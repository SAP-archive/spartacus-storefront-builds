{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-launch-dialog.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/default-anonymous-consent-layout.config.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/split-view/split-view-deactivate.guard.ts","ng://@spartacus/storefront/shared/components/split-view/split-view.service.ts","ng://@spartacus/storefront/shared/components/split-view/split/split-view.component.ts","ng://@spartacus/storefront/shared/components/split-view/view/view.component.ts","ng://@spartacus/storefront/shared/components/split-view/split-view.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/table/config/table.config.ts","ng://@spartacus/storefront/shared/components/table/table.component.ts","ng://@spartacus/storefront/shared/components/table/table.module.ts","ng://@spartacus/storefront/shared/components/table/table.service.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-structure/services/feature-modules.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-components.service.ts","ng://@spartacus/storefront/shared/utils/combined-injector.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/lazy-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/asm-toggle-ui/asm-toggle-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/default-asm-layout.config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/events/page/page.events.ts","ng://@spartacus/storefront/events/cart/cart-page.events.ts","ng://@spartacus/storefront/events/cart/cart-page-event.builder.ts","ng://@spartacus/storefront/events/cart/cart-page-event.module.ts","ng://@spartacus/storefront/events/page/page-event.builder.ts","ng://@spartacus/storefront/events/page/page-event.module.ts","ng://@spartacus/storefront/events/product/product-page.events.ts","ng://@spartacus/storefront/events/product/product-page-event.builder.ts","ng://@spartacus/storefront/events/product/product-page-event.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/events/events.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","DIALOG_TYPE","LAUNCH_CALLER","BREAKPOINT","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","ar","error","__spread","concat","OutletPosition","LayoutConfig","Injectable","providedIn","useExisting","Config","LaunchRenderStrategy","document","rendererFactory","renderedCallers","dialogClasses","popoverClasses","sidebarEndClasses","sidebarStartClasses","renderer","createRenderer","shouldRender","caller","config","Boolean","component","some","el","multi","applyClasses","dialogType","classes","DIALOG","addClass","POPOVER","SIDEBAR_END","SIDEBAR_START","classes_1","classes_1_1","newClass","location","nativeElement","remove","filter","_a","removeClass","getPriority","Inject","DOCUMENT","InlineRenderStrategy","componentFactoryResolver","_this","_super","render","vcr","template","resolveComponentFactory","createComponent","element","of","isDevMode","console","warn","hasMatch","inline","args","RendererFactory2","ComponentFactoryResolver","LaunchDialogService","renderStrategies","layoutConfig","_dialogClose","BehaviorSubject","undefined","launch","findConfiguration","getStrategy","clear","asObservable","closeDialog","reason","resolveApplicable","ICON_TYPE","OutletService","features","templatesRefs","BEFORE","Map","REPLACE","AFTER","add","outlet","templateOrFactory","position","store","newValue","get","set","stacked","templateRef","removeValueOrAll","has","delete","existing","isLevel","val","FeatureConfigService","OutletRefDirective","tpl","outletService","ngOnInit","cxOutletRef","cxOutletPos","ngOnDestroy","TemplateRef","Input","Directive","selector","OutletRefModule","NgModule","imports","CommonModule","declarations","exports","OutletRendererService","outletRefs","size","register","cxOutlet","context","getOutletRef","pipe","map","IntersectionService","isIntersected","options","intersects","first","Observable","observer","intersectOptions","rootMargin","getRootMargin","threshold","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","distinctUntilChanged","deferredLoading","intersectionMargin","DeferLoaderService","platformId","intersectionService","globalLoadStrategy","strategy","DeferLoadingStrategy","INSTANT","load","shouldLoadInstantly","deferLoading","elementLoadingStrategy","isPlatformServer","DEFER","type","PLATFORM_ID","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","renderedComponents","loaded","EventEmitter","subscription","Subscription","unsubscribe","cxOutletDefer","build","ngOnChanges","changes","emit","hostElement","getHostElement","subscribe","buildOutlet","templates","includes","isArray","components","forEach","obj","tmplOrFactory","ComponentFactory","view","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","parentNode","ViewContainerRef","Output","OutletModule","providers","OutletRenderStrategy","template_1","outletDirective","reverse","find","componentType","tap","RoutingRenderStrategy","routingService","_caller","go","cxRoute","RoutingService","LaunchDialogModule","forRoot","ngModule","LaunchDialogModule_1","provide","AnonymousConsentLaunchDialogService","launchDialogService","openDialog","openElement","ANONYMOUS_CONSENT","combineLatest","dialogClose","close","comp","focus","destroy","BaseFocusService","BaseFocusDirective","elementRef","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","host","tagName","toLowerCase","hasAttribute","ElementRef","HostBinding","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","HostListener","BlockFocusDirective","block","PersistFocusService","group","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","event","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","isHidden","findFocusable","locked","invisible","suffix","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","setTimeout","_b","setAttribute","shouldUnlockAfterAutofocus","toString","Renderer2","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","AnonymousConsentManagementBannerComponent","anonymousConsentsService","anonymousConsentLaunchDialogService","subscriptions","bannerVisible$","isBannerVisible","viewDetails","hideBanner","dialog","allowAll","giveAllConsents","toggleBannerDismissed","AnonymousConsentsService","Component","IconResourceType","IconConfig","PaginationItemType","PaginationNavigationPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","res","types","svgResource","addLinkResource","resource","findResource","head","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","DomSanitizer","IconComponent","iconLoader","setIcon","addStyleClasses","styleClasses","cls","split","IconModule","provideDefaultConfig","AnonymousConsentDialogComponent","role","modal","showLegalDescription","iconTypes","requiredConsents","focusConfig","anonymousConsents","showLegalDescriptionInDialog","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","rejectAll","take","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","AnonymousConsentsConfig","defaultAnonymousConsentLayoutConfig","AnonymousConsentOpenDialogComponent","ViewChild","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","provideConfig","cmsComponents","entryComponents","SpinnerComponent","SpinnerModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","globalMessageService","anonymousConsentsConfig","authService","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","withLatestFrom","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","success","onConsentGivenSuccess","resetWithdrawConsentProcessState","skipWhile","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","code","GlobalMessageType","MSG_TYPE_CONFIRMATION","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","loading","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","UserConsentService","GlobalMessageService","AuthService","ConsentManagementModule","FormsModule","ReactiveFormsModule","guards","AuthGuard","AnonymousConsentsDialogModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","floor","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","slice","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","sort","a","width","_reversedFormats","sortedFormats","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","isInitialized","isLoading","isMissing","container","handleMissing","loadHandler","errorHandler","MediaModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","FormErrorsComponent","_control","control","errors$","statusChanges","startWith","errors","invalid","dirty","touched","FormErrorsModule","GenericLinkComponent","router","PROTOCOL_REGEX","URL_SPLIT","routeParts","isExternalUrl","test","setUrlParts","currentValue","path","queryParams","fragment","getAbsoluteUrl","splitUrl","parseUrl","match","Router","GenericLinkModule","ItemCounterComponent","min","allowZero","readonly","input","sub","valueChanges","setValue","getValidCount","emitEvent","markAsDirty","decrement","max","ItemCounterModule","defaultPaginationConfig","pagination","addStart","addEnd","PaginationConfig","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","MediaConfig","ModalRef","NgbModalRef","ModalService","ngbModalService","modals","open","content","activeModal","getActiveModal","dismissActiveModal","dismiss","closeActiveModal","NgbModal","SplitViewDeactivateGuard","canDeactivate","timer","SplitViewService","_views$","visibleViewCount","views","hidden","visible","viewPosition","hide","splice","toggle","force","viewState","generateNextPosition","SplitViewComponent","splitService","lastVisibleView","lastVisible","ViewComponent","hiddenChange","SplitViewModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsConfig","QualtricsLoaderService","qsiLoaded$","fromEvent","qsi$","switchMap","isDataLoaded","api","qsi","qsiApi","initialize","run","reload","API","unload","log","addScript","scriptSource","hasScript","script","defer","source","querySelector","QualtricsComponent","qualtricsLoader","qualtrics","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","deps","StarRatingComponent","disabled","change","initialRate","setRate","rating","saveRate","setRateOnEvent","StarRatingModule","TableConfig","TableComponent","paginateEvent","_dataset","dataset","addTableDebugInfo","getDataValue","dataRow","headerKey","values","header","tableType","structure","TableModule","TableService","buildStructure","hasTableConfig","buildStructureFromConfig","buildStructureFromData","buildRandomStructure","getTableConfig","headers","hideHeader","tableConfig","table","bestMatch","message","ViewConfig","ViewConfigModule","ViewConfigModule_1","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","params","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","CheckoutService","ActiveCartService","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","password","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","controls","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","FeatureModulesService","configInitializer","compiler","componentFeatureMap","dependencyModules","initFeatureMap","_arguments","P","generator","getStableConfig","_k","featureModulesConfig","featureModules","_e","featureName","featureConfig","_f","_g","Promise","resolve","reject","fulfilled","rejected","result","then","hasFeatureFor","getCmsMapping","feature","resolveFeature","featureInstance","componentsMappings","getInjectors","injectors","moduleRef","depsModules","module","featureConfig_1","Error","depsResolve","dependencies","forkJoin","depModuleFunc","resolveDependencyModule","resolveFeatureModule","resolveModuleFactory","resolvedConfiguration","resolveFeatureConfiguration","featureInjector","featureConfigChunks","ConfigChunk","InjectFlags","Self","featureDefaultConfigChunks","DefaultConfigChunk","configurationFactory","moduleFunc","moduleFactory","pluck","NgModuleFactory","compileModuleAsync","observeOn","queueScheduler","merge","dependency","ConfigInitializerService","Compiler","CmsComponentsService","missingComponents","mappings","mappingResolvers","determineMappings","componentTypes","featureResolvers","componentTypes_1","componentTypes_1_1","staticConfig","getFeatureMappingResolver","mapTo","mappingResolver$","featureComponentMapping","deepMerge","share","getMapping","componentConfig","disableSSR","getDeferLoadingStrategy","getChildRoutes","routes","componentTypes_2","componentTypes_2_1","childRoutes","getGuards","Set","componentTypes_3","componentTypes_3_1","guard","getI18nKeys","i18nKeys","componentTypes_4","componentTypes_4_1","CmsConfig","NOT_FOUND_SYMBOL","CombinedInjector","mainInjector","complementaryInjectors","token","notFoundValue","flags","CmsInjectorService","cmsComponentsService","getCmsData","uid","parentInjector","CmsService","getComponentData","getInjector","configProviders","useValue","parent","ComponentHandlerService","handlers","invalidMappings","componentMapping","handler","getLauncher","viewContainerRef","elementInjector","launcher","ComponentHandler","ComponentWrapperDirective","dynamicAttributeService","componentHandler","cmsInjector","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","ChangeDetectorRef","addDynamicAttributes","DynamicAttributeService","DefaultComponentHandler","subscriber","factory","getComponentFactory","LazyComponentHandler","defaultHandler","isNotClass","signature","substr","replace","PageComponentModule","AsmEnablerService","isEnabled","addUi","isLaunched","isUsedBefore","localStorage","setItem","getItem","ASM","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","asmEnablerService","CheckoutStepType","DeliveryModePreferences","AsmComponentService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","isCustomerEmulationSessionInProgress","mergeMap","userToken","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","isCollapsed$","getAsmUiState","uiState","collapsed","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","UserService","AsmService","encapsulation","ViewEncapsulation","None","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","FormatTimerPipe","transform","totalSeconds","minutes","seconds","Pipe","name","AsmToggleUiComponent","isCollapsed","toggleUi","updateAsmUiState","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","user","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","onDocumentClick","resultList","contains","closeResults","(document:click)","defaultAsmLayoutConfig","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","ProductService","AddedToCartDialogComponent","modalService","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","product","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","selectiveCartService","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","getControl","SelectiveCartService","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","selectiveCartEnabled","cartLoaded$","getLoaded","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","getLoading","slots","selectiveCart","loadingCart","exclude","arr","arg","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","cmsService","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","SkipLinkScrollPosition","CheckoutConfig","defaultCheckoutConfig","checkout","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","expressCheckoutService","firstStep$","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","countrySelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","translate","month","payment","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","textExpires","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","field","cardLabels","selected","title","img","actions","goNext","goPrevious","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","setAsDefaultField","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","regionSelected","addresses$","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","card","getCardContent","addAddress","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","SkipLinkConfig","SkipLinkService","keyboardFocusService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","getSkipLinkIndexInArray","i18nKey","scrollToTarget","parentElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkComponent","skipLinkService","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","HamburgerMenuService","isExpanded","events","NavigationStart","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","slot","pendingComponentCount","class","lastPosition","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","slotData","PageSlotModule","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","LanguageService","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","JsonLdScriptFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","isPlatformBrowser","scriptElement","getElementById","JSON","stringify","_key","SecurityContext","HTML","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","routing","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","pageMeta","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductReviewService","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","typeCode","select","tabNum","scrollTo","offsetTop","history","activeTab","getTitleParams","tabComps","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","continue","amendOrderForm","forwardRoute","AmendOrderActionsModule","ValidateQuantityToCancel","cxNoSelectedItemToCancel","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","UserNotificationPreferenceService","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","UserInterestsService","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","contentPageLabelOrId","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","closest","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","ProductReferenceService","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","siteContext","routerState","criteria","getCriteriaFromRoute","model$","routeParams","getQueryFromRouteParams","brandCode","getPageItems","pageNumber","routeCriteria","navigate","queryParamsHandling","relativeTo","setQuery","viewPage","ProductSearchService","CurrencyService","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","updateState","increaseVisibleValues","decreaseVisibleValues","topValueCount","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","_isDialog","expandFacetGroup","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","q","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchConfig","searchQuery","queryText","geolocation","useMyLocation","radius","parseParameters","googleMaps","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderConfig","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","auth","loginAsGuest","routeState","prefilledEmail","loginForm","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","titleSelected","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","HomePageVisitedEvent","PageVisitedEvent","CartPageVisitedEvent","CartPageEventBuilder","eventService","buildCartPageEvent","pageVisitedEvent","semanticRoute","createFrom","ActionsSubject","EventService","CartPageEventModule","_cartPageEventBuilder","PageEventBuilder","buildPageVisitedEvent","buildHomePageVisitedEvent","getNavigatedEvent","ofType","ROUTER_NAVIGATED","payload","PageEventModule","_pageEventBuilder","ProductPageEventBuilder","SearchPageResultsEvent","buildSearchPageResultsEvent","ProductDetailsPageEvent","buildProductDetailsPageEvent","CategoryPageResultsEvent","buildCategoryResultsPageEvent","productId","categories","skip","isCategoryPage","pageEvent","categoryName","categoryPage","EMPTY","numberOfResults","searchPage","isSearchPage","ProductPageEventModule","_productPageEventBuilder","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","EventsModule","StorefrontFoundationModule","StateModule","AuthModule","AnonymousConsentsModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport interface LaunchConfig {\n  [key: string]: LaunchOptions;\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Dialog type is used to apply CSS classes\n   */\n  dialogType?: DIALOG_TYPE;\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n  ANONYMOUS_CONSENT = 'ANONYMOUS_CONSENT',\n}\n","import { Injectable } from '@angular/core';\nimport { Config, DeferLoadingStrategy } from '@spartacus/core';\nimport { LaunchConfig } from '../launch-dialog/index';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n\n  launch?: LaunchConfig;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Renderer2,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Applicable, Priority } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  DIALOG_TYPE,\n  LaunchDialog,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config';\n\nexport abstract class LaunchRenderStrategy implements Applicable {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER | string;\n    element?: any;\n    component?: ComponentRef<any>;\n  }> = [];\n\n  /**\n   * Classes to apply to the component when the dialog is a DIALOG\n   */\n  protected dialogClasses = ['d-block', 'fade', 'modal', 'show'];\n  /**\n   * Classes to apply to the component when the dialog is a POPOVER\n   */\n  protected popoverClasses = ['cx-dialog-popover'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_END\n   */\n  protected sidebarEndClasses = ['cx-sidebar-end'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_START\n   */\n  protected sidebarStartClasses = ['cx-sidebar-start'];\n\n  protected renderer: Renderer2;\n\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>>;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(\n    caller: LAUNCH_CALLER | string,\n    config: LaunchDialog\n  ): boolean {\n    return (\n      Boolean(config.component) &&\n      (this.renderedCallers.some((el) => el.caller === caller)\n        ? !!config.multi\n        : true)\n    );\n  }\n\n  protected applyClasses(\n    component: ComponentRef<any>,\n    dialogType: DIALOG_TYPE\n  ): void {\n    let classes = [];\n\n    // TODO: make classes configurable\n    switch (dialogType) {\n      case DIALOG_TYPE.DIALOG:\n        classes = this.dialogClasses;\n        this.renderer.addClass(this.document.body, 'modal-open');\n        break;\n      case DIALOG_TYPE.POPOVER:\n        classes = this.popoverClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_END:\n        classes = this.sidebarEndClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_START:\n        classes = this.sidebarStartClasses;\n        break;\n    }\n\n    for (const newClass of classes) {\n      this.renderer.addClass(component.location.nativeElement, newClass);\n    }\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER | string, config: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller !== caller\n    );\n\n    if ((config as LaunchDialog)?.dialogType === DIALOG_TYPE.DIALOG) {\n      this.renderer.removeClass(this.document.body, 'modal-open');\n    }\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER | string,\n    vcr: ViewContainerRef\n  ): Observable<ComponentRef<any>> {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n\n      const component = vcr.createComponent(template);\n\n      if (config?.dialogType) {\n        this.applyClasses(component, config?.dialogType);\n      }\n\n      this.renderedCallers.push({ caller, element: vcr.element, component });\n\n      return of(component);\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { resolveApplicable } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { LayoutConfig } from '../../config/layout-config';\nimport { LaunchOptions, LAUNCH_CALLER } from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  private _dialogClose = new BehaviorSubject<string>(undefined);\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected layoutConfig: LayoutConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>> {\n    const config = this.findConfiguration(caller);\n    if (config) {\n      const renderer = this.getStrategy(config);\n\n      // Render if the strategy exists\n      if (renderer) {\n        this._dialogClose.next(undefined);\n        return renderer.render(config, caller, vcr);\n      }\n    } else if (isDevMode()) {\n      console.warn('No configuration provided for caller ' + caller);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER | string): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  get dialogClose(): Observable<string> {\n    return this._dialogClose.asObservable();\n  }\n\n  closeDialog(reason: string) {\n    this._dialogClose.next(reason);\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER | string): LaunchOptions {\n    if (this.layoutConfig?.launch) {\n      return this.layoutConfig.launch[caller];\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveApplicable(this.renderStrategies, [config]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  /**\n   * @deprecated since 2.1, see #8116\n   */\n  constructor();\n  // tslint:disable-next-line: unified-signatures\n  constructor(features: FeatureConfigService);\n  constructor(protected features?: FeatureConfigService) {}\n\n  private templatesRefs = {\n    [OutletPosition.BEFORE]: new Map<string, T[]>(),\n    [OutletPosition.REPLACE]: new Map<string, T[]>(),\n    [OutletPosition.AFTER]: new Map<string, T[]>(),\n  };\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    const store = this.templatesRefs[position];\n    if (store) {\n      const existing = store.get(outlet) || [];\n      const newValue: T[] = existing.concat([templateOrFactory]);\n      store.set(outlet, newValue);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    const store =\n      this.templatesRefs[position] ||\n      this.templatesRefs[OutletPosition.REPLACE];\n\n    const templateRef: T[] = store.get(outlet);\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    const store =\n      this.templatesRefs[position] ||\n      this.templatesRefs[OutletPosition.REPLACE];\n\n    this.removeValueOrAll(store, outlet, value);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n\n      if (this.features?.isLevel('2.1')) {\n        existing = existing.filter((val) => val !== value);\n      } else {\n        // deprecated since 2.1, see #8116:\n        existing = existing.filter((val) => val === value);\n      }\n\n      store.set(outlet, existing);\n    }\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit, OnDestroy {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  /**\n   * @deprecated since 2.1, see #8201\n   */\n  constructor(tpl: TemplateRef<any>, outletService: OutletService);\n  constructor(\n    tpl: TemplateRef<any>,\n    outletService: OutletService,\n    // tslint:disable-next-line: unified-signatures\n    features: FeatureConfigService\n  );\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService,\n    private features?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n\n  ngOnDestroy() {\n    if (this.features?.isLevel('2.1')) {\n      this.outletService.remove(this.cxOutletRef, this.cxOutletPos, this.tpl);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new BehaviorSubject(new Map<string, OutletDirective>());\n\n  /**\n   * Dynamically render the templates in the specified array\n   *\n   * @param outlet\n   */\n  render(outlet: string): void {\n    if (this.outletRefs.value.size !== 0) {\n      this.outletRefs.value.get(outlet).render();\n    }\n  }\n\n  /**\n   * Register outlet to be available to render dynamically\n   *\n   * @param cxOutlet\n   * @param context\n   */\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.next(this.outletRefs.value.set(cxOutlet, context));\n  }\n  /**\n   * Returns map of outlets\n   *\n   */\n  getOutletRef(outlet: string): Observable<OutletDirective> {\n    return this.outletRefs.asObservable().pipe(\n      map((val) => val.get(outlet)),\n      filter((val) => Boolean(val))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, threshold: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n  public renderedComponents = new Map<\n    OutletPosition,\n    Array<ComponentRef<any> | EmbeddedViewRef<any>>\n  >();\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.renderedComponents.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n      this.outletRendererService.register(this.cxOutlet, this);\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    const components = [];\n    templates.forEach((obj) => {\n      const component = this.create(obj);\n      components.push(component);\n    });\n\n    this.renderedComponents.set(position, components);\n  }\n\n  private create(tmplOrFactory: any): ComponentRef<any> | EmbeddedViewRef<any> {\n    this.renderedTemplate.push(tmplOrFactory);\n\n    if (tmplOrFactory instanceof ComponentFactory) {\n      const component = this.vcr.createComponent(tmplOrFactory);\n      return component;\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n      return view;\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent nodes of the given element.\n   *\n   * We avoid traversing the parent _elements_, as this is blocking\n   * ie11 implementations. One of the spare exclusions we make to not\n   * supporting ie11.\n   *\n   * @param element\n   */\n  private getHostElement(element: Node): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentNode);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  RendererFactory2,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER | string\n  ): Observable<ComponentRef<any>> {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n      this.renderedCallers.push({ caller });\n\n      return this.outletRendererService.getOutletRef(config.outlet).pipe(\n        map((outletDirective) => {\n          const components = outletDirective.renderedComponents.get(\n            config.position ? config.position : OutletPosition.BEFORE\n          ) as ComponentRef<any>[];\n\n          return components\n            .reverse()\n            .find(\n              (component) => component.componentType === template.componentType\n            );\n        }),\n        tap((component) => {\n          if (config?.dialogType) {\n            this.applyClasses(component, config?.dialogType);\n          }\n        })\n      );\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER | string, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n\n    super.remove(caller, config);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, RendererFactory2 } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected routingService: RoutingService\n  ) {\n    super(document, rendererFactory);\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER | string) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { LayoutConfig } from '../config/layout-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [{ provide: LayoutConfig, useExisting: Config }],\n    };\n  }\n}\n","import { ElementRef, Injectable, ViewContainerRef } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport {\n  LaunchDialogService,\n  LAUNCH_CALLER,\n} from '../../layout/launch-dialog/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentLaunchDialogService {\n  constructor(protected launchDialogService: LaunchDialogService) {}\n\n  openDialog(\n    openElement?: ElementRef,\n    vcr?: ViewContainerRef\n  ): Observable<any> | undefined {\n    const component = this.launchDialogService.launch(\n      LAUNCH_CALLER.ANONYMOUS_CONSENT,\n      vcr\n    );\n\n    if (component) {\n      return combineLatest([\n        component,\n        this.launchDialogService.dialogClose,\n      ]).pipe(\n        filter(([, close]) => close && close !== undefined),\n        tap(([comp]) => {\n          openElement?.nativeElement.focus();\n          this.launchDialogService.clear(LAUNCH_CALLER.ANONYMOUS_CONSENT);\n          comp.destroy();\n        }),\n        map(([comp]) => comp)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singleton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistence key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistence\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      // we wait a few milliseconds, mainly because firefox will otherwise apply\n      // the mouse event on the new focused child element\n      setTimeout(() => {\n        super.handleFocus(event as KeyboardEvent);\n      }, 100);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elements,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { Component, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      null,\n      this.vcr\n    );\n    if (dialog) {\n      this.subscriptions.add(dialog.subscribe());\n    }\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [provideDefaultConfig(fontawesomeIconConfig)],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { FocusConfig } from '../../../layout/a11y/keyboard-focus/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  @HostBinding('attr.role') role = 'dialog';\n  @HostBinding('attr.aria-modal') modal = true;\n\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: 'input[type=\"checkbox\"]',\n    focusOnEscape: true,\n  };\n\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    // Close on click outside the dialog window\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\n      this.close('Cross click');\n    }\n  }\n\n  constructor(\n    protected config: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected el: ElementRef,\n    protected launchDialogService: LaunchDialogService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  close(reason?: any): void {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { DIALOG_TYPE } from '../../layout/launch-dialog/index';\nimport { AnonymousConsentDialogComponent } from '../../shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component';\n\nexport const defaultAnonymousConsentLayoutConfig: LayoutConfig = {\n  launch: {\n    ANONYMOUS_CONSENT: {\n      inline: true,\n      component: AnonymousConsentDialogComponent,\n      dialogType: DIALOG_TYPE.DIALOG,\n    },\n  },\n};\n","import {\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  @ViewChild('open') openElement: ElementRef;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService\n  ) {}\n\n  openDialog(): void {\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      this.openElement,\n      this.vcr\n    );\n    if (dialog) {\n      dialog.pipe(take(1)).subscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../layout/a11y/keyboard-focus/index';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { defaultAnonymousConsentLayoutConfig } from './default-anonymous-consent-layout.config';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideConfig(defaultAnonymousConsentLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/index';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsDialogModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media?.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Params, Router } from '@angular/router';\n\n// private\ninterface RouteParts {\n  /** Path in the Angular-like array format */\n  path?: string[];\n\n  /** Query params */\n  queryParams?: Params;\n\n  /** Hash fragment */\n  fragment?: string;\n}\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent implements OnChanges {\n  constructor(protected router: Router) {}\n\n  /**\n   * Pattern matching string starting with `http://` or `https://`.\n   */\n  private readonly PROTOCOL_REGEX: RegExp = /^https?:\\/\\//i;\n\n  /**\n   * Used to split url into 2 parts:\n   * 1. the path\n   * 2. query params + hash fragment\n   */\n  private readonly URL_SPLIT = /(^[^#?]*)(.*)/;\n\n  /**\n   * Parsed parts of the @Input `url`, when it's a local URL.\n   * It should not be used when the `url` is external.\n   * @see `url`\n   */\n  private routeParts: RouteParts = {};\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  /**\n   * Returns true when the @Input `url` is a string starting with `http://` or `https://`.\n   */\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.PROTOCOL_REGEX.test(this.url);\n  }\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['url']) {\n      this.setUrlParts(changes['url'].currentValue);\n    }\n  }\n\n  /**\n   * The part with the path of the local url.\n   */\n  get routerUrl(): any[] {\n    return this.routeParts.path;\n  }\n\n  /**\n   * The part with the query params of the local url.\n   */\n  get queryParams(): Params {\n    return this.routeParts.queryParams;\n  }\n\n  /**\n   * The part with the hash fragment of the local url.\n   */\n  get fragment(): string {\n    return this.routeParts.fragment;\n  }\n\n  /**\n   * Parses the given url and sets the property `urlParts` accordingly.\n   */\n  private setUrlParts(url: string | any[]) {\n    if (typeof url === 'string') {\n      url = this.getAbsoluteUrl(url); // string links in CMS sometimes don't have the leading slash, so fix it here\n      this.routeParts = this.splitUrl(url as string);\n    } else {\n      this.routeParts = { path: url };\n    }\n  }\n\n  /**\n   * Parses the given string into 3 parts:\n   * - string path (wrapped in an array to be compatible with Angular syntax for the `routerLink`)\n   * - query params (as an object)\n   * - hash fragment (string)\n   */\n  private splitUrl(url: string = ''): RouteParts {\n    const { queryParams, fragment } = this.router.parseUrl(url);\n    const [, path] = url.match(this.URL_SPLIT);\n\n    // wrap path in an array, to have the Angular-like path format\n    return { path: [path], queryParams, fragment };\n  }\n\n  /**\n   * Prepends a leading slash to the given URL string, in case it doesn't have it.\n   */\n  private getAbsoluteUrl(url: string): string {\n    return url.startsWith('/') ? url : '/' + url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functionality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent implements OnInit, OnDestroy {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive integer or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Indicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  /**\n   * Subscription responsible for auto-correcting control's value when it's invalid.\n   */\n  private sub: Subscription;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  ngOnInit() {\n    this.sub = this.control.valueChanges\n      .pipe(startWith(this.control.value))\n      .subscribe((value) =>\n        this.control.setValue(this.getValidCount(value), { emitEvent: false })\n      );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { MediaFormatSize } from './media.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { Observable, timer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Guard that can be used in split-view based child routes. This guard\n * delays the guard to be removed with 500ms, so that any css transition can be\n * finished before the DOM is destroyed.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SplitViewDeactivateGuard implements CanDeactivate<boolean> {\n  canDeactivate(): Observable<boolean> {\n    return timer(500).pipe(map(() => true));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { ViewState } from './split/split-view.model';\n\n/**\n * Supposed to be injected in the split view component, so that the view state\n * is maintained in the context of a single split view.\n */\n@Injectable()\nexport class SplitViewService {\n  protected _views$: BehaviorSubject<any[]> = new BehaviorSubject([]);\n\n  /**\n   * Resolves the max number of visible views for the split view.\n   */\n  visibleViewCount(): Observable<number> {\n    return this._views$.pipe(\n      map((views) => {\n        const hidden = views.findIndex((view: ViewState) => view.hidden);\n        return hidden === -1 ? views.length : hidden;\n      }),\n      filter((visible) => visible > 0),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Adds a view to the list of views. The view is initialized with the\n   * hide state, which defaults to false.\n   */\n  add(viewPosition: number, hide = false) {\n    if (!this.views[viewPosition]) {\n      this.views[viewPosition] = { hidden: hide };\n      this._views$.next(this.views);\n    }\n  }\n\n  /**\n   * Removes a view from the list of views.\n   */\n  remove(viewPosition: number) {\n    this._views$.next(this.views.splice(0, viewPosition));\n  }\n\n  /**\n   * Toggles the visible state for the given view. An optional\n   * force argument can be used to dictate the visibility.\n   */\n  toggle(viewPosition: number, force?: boolean) {\n    if (!this.views[viewPosition]) {\n      this.add(viewPosition, force ?? false);\n    } else {\n      this.views[viewPosition].hidden =\n        force ?? !this.views[viewPosition].hidden;\n      // Whenever a view is closing, we close all underlying views as well.\n      if (!this.views[viewPosition].hidden) {\n        this.views\n          .slice(viewPosition + 1)\n          .map((viewState) => (viewState.hidden = true));\n      }\n      this._views$.next(this.views);\n    }\n  }\n\n  /**\n   * Returns the next view number, that can be used by views to register itself.\n   */\n  generateNextPosition(): number {\n    return this.views.length;\n  }\n\n  /**\n   * Utility method that resolves all views.\n   */\n  protected get views(): ViewState[] {\n    return this._views$.value;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  OnDestroy,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SplitViewService } from '../split-view.service';\n\n/**\n * The split-view component supports an unlimited number of nested views. The component\n * is a host to those view components and doesn't add any restrictions to it's content;\n * content is projected as-is.\n *\n * ```html\n * <cx-split-view>\n *   <cx-view></cx-view>\n *   <cx-view></cx-view>\n *   <any-wrapper>\n *     <cx-view></cx-view>\n *   </any-wrapper>\n * </cx-split-view>\n * ```\n *\n * The split view component is only concerned with tracking the underlying _visible_\n * view components, so that the `lastVisibleView` can be updated accordingly. The actual\n * visibility of views is controlled by CSS. To allow for maximum flexibility, the CSS\n * implementation is using CSS variables. The `lastVisibleView` is bind to the\n * `--cx-last-visible-view` on the host, so that all descendants views will inherit the\n * property conveniently.\n */\n@Component({\n  selector: 'cx-split-view',\n  templateUrl: './split-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [SplitViewService],\n})\nexport class SplitViewComponent implements OnDestroy {\n  /**\n   * Indicates the last visible view in the range of views that is visible. This\n   * is bind to a css variable `--cx-last-visible-view` so that the experience\n   * can be fully controlled by css.\n   */\n  @HostBinding('style.--cx-last-visible-view')\n  lastVisibleView = 1;\n\n  protected subscription: Subscription = this.splitService\n    .visibleViewCount()\n    .subscribe((lastVisible: number) => (this.lastVisibleView = lastVisible));\n\n  constructor(protected splitService: SplitViewService) {}\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SplitViewService } from '../split-view.service';\n\n/**\n * The view component is part of the `SplitViewComponent`. The view\n * contains the navigable content that should be split up. It maintains\n * a view position and allows to show or hide the view.\n *\n * The ViewComponent interacts with the `SplitViewService` for handing over the\n * view state, so that the overarching `SplitViewComponent` can manage the\n * overall experience.\n */\n@Component({\n  selector: 'cx-view',\n  templateUrl: './view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewComponent implements OnInit, OnDestroy {\n  @Input()\n  @HostBinding('attr.position')\n  position: number;\n\n  /**\n   * The hidden input is used to set the initial visible state of the view.\n   * The hidden state defaults to false.\n   *\n   * The hidden input supports 2-way binding, see `hiddenChange` property.\n   */\n  @Input()\n  set hidden(hidden: boolean) {\n    this.splitService.toggle(this.viewPosition, hidden);\n  }\n\n  /**\n   * An update of the view visibility is emitted to the hiddenChange output.\n   */\n  @Output()\n  hiddenChange = new EventEmitter();\n\n  protected subscription: Subscription;\n\n  constructor(protected splitService: SplitViewService) {}\n\n  ngOnInit() {\n    this.splitService.add(this.viewPosition, this.hidden);\n\n    this.subscription = this.splitService\n      .visibleViewCount()\n      .subscribe((visible) => {\n        if (this.hidden !== this.viewPosition >= visible) {\n          this.hiddenChange.emit(this.viewPosition >= visible);\n        }\n      });\n  }\n\n  /**\n   * Toggles the visibility of the view.\n   *\n   * An optional force flag can be used to explicitly show or hide view component.\n   */\n  toggle(force?: boolean) {\n    this.splitService.toggle(this.viewPosition, force);\n  }\n\n  /**\n   * Returns the position for the view.\n   *\n   * The position is either taken from the input `position` or generated by the `SplitService`.\n   */\n  protected get viewPosition(): number {\n    if (this.position === undefined) {\n      this.position = this.splitService.generateNextPosition();\n    }\n    return this.position;\n  }\n\n  /**\n   * The view is removed from the `SplitService` so that the view no longer\n   * plays a role in the overall split view.\n   */\n  ngOnDestroy() {\n    this.splitService.remove(this.viewPosition);\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SplitViewComponent } from './split/split-view.component';\nimport { ViewComponent } from './view/view.component';\n\n/**\n * The split-view component supports an unlimited number of nested views. Nested views are rendered\n * next to each other. The views can be rendered next to each other, but the max number of visible\n * views can be limisted as well. This is configurable in the CSS layer, so that the max number of views\n * per split-view can be different for each component.\n *\n * The basic structure of the split-view component is shown below:\n *\n *\n * ```\n * <cx-split-view>\n * </cx-split-view>\n * ```\n *\n * The UX pattern used for the split-view is driven by an initial view, which gets splitted into\n * more views as soon as the user starts interacting with the initial and subsequantial views.\n * The views can be driven by routes, which means that you can navigate through the splitted views\n * by using the browser history as well as share or bookmark splitted views.\n *\n * The UI is implemented in the style layer, with only a few generic style rules. Most of the split\n * view style is driven by CSS properties, so that alternative split-view styles can be introduced\n * per page or component.\n *\n * The max number of views per split-view on mobile is limited to 1 by default, where as on tablet\n * (and higher) it is set to 2. Spartacus has a pretty narrow layout, which is why 2 is maximum,\n * but customers could alter the layout to bring in more views in the same split-view at the time.\n *\n */\n\n@NgModule({\n  declarations: [SplitViewComponent, ViewComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [SplitViewComponent, ViewComponent],\n})\nexport class SplitViewModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Configuration options for the Qualtrics integration, which allows you to\n * specify the qualtrics project and deployment script.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QualtricsConfig {\n  /**\n   * Holds the qualtrics integration options.\n   */\n  qualtrics?: {\n    /**\n     * Deployment script, loaded from a resource, to integrate the deployment of the qualtrics project.\n     * You would typically store the file in the local assets folder.\n     *\n     * Defaults to `assets/qualtricsIntegration.js`\n     */\n    scriptSource?: string;\n  };\n}\n","import {\n  Injectable,\n  isDevMode,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\n\nexport const QUALTRICS_EVENT_NAME = 'qsi_js_loaded';\n\n/**\n * Service to integration Qualtrics.\n *\n * The integration observes the Qualtrics API, and when available, it runs the QSI API\n * to let Qualtrics evaluate the application.\n *\n * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application\n * data before pulling the QSI API. This is beneficial in a single page application when additional\n * data is required before the Qualtrics _creatives_ run.\n *\n * This service also supports the creation of the Qualtrics deployment script. This is optional, as\n * the script can be added in alternatives ways.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  /**\n   * Reference to the QSI API.\n   */\n  protected qsiApi: any;\n\n  /**\n   * QSI load event that happens when the QSI JS file is loaded.\n   */\n  private qsiLoaded$: Observable<any> = this.winRef?.nativeWindow\n    ? fromEvent(this.winRef.nativeWindow, QUALTRICS_EVENT_NAME)\n    : of();\n\n  /**\n   * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.\n   *\n   * The API is emitted when the JavaScript resource holding this API is fully loaded.\n   * The API is also stored locally in the service, in case it's required later on.\n   */\n  protected qsi$: Observable<any> = this.qsiLoaded$.pipe(\n    switchMap(() => this.isDataLoaded()),\n    map(() => this.winRef?.nativeWindow['QSI']),\n    filter((api) => Boolean(api)),\n    tap((qsi) => (this.qsiApi = qsi))\n  );\n\n  constructor(\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.initialize();\n  }\n\n  /**\n   * Starts observing the Qualtrics integration. The integration is based on a\n   * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,\n   * we run the API.\n   */\n  protected initialize() {\n    this.qsi$.subscribe(() => this.run());\n  }\n\n  /**\n   * Evaluates the Qualtrics project code for the application.\n   *\n   * In order to reload the evaluation in Qualtrics, the API requires to unload the API before\n   * running it again. We don't do this by default, but offer a flag to conditionally unload the API.\n   */\n  protected run(reload = false): void {\n    if (!this.qsiApi?.API) {\n      if (isDevMode()) {\n        console.log('The QSI api is not available');\n      }\n      return;\n    }\n\n    if (reload) {\n      // Removes any currently displaying creatives\n      this.qsiApi.API.unload();\n    }\n\n    // Starts the intercept code evaluation right after loading the Site Intercept\n    // code for any defined intercepts or creatives\n    this.qsiApi.API.load().done(this.qsiApi.API.run());\n  }\n\n  /**\n   * Adds the deployment script to the DOM.\n   *\n   * The script will not be added twice if it was loaded before. In that case, we use\n   * the Qualtrics API directly to _unload_ and _run_ the project.\n   */\n  addScript(scriptSource: string): void {\n    if (this.hasScript(scriptSource)) {\n      this.run(true);\n    } else {\n      const script: HTMLScriptElement = this.renderer.createElement('script');\n      script.type = 'text/javascript';\n      script.defer = true;\n      script.src = scriptSource;\n      this.renderer.appendChild(this.winRef.document.body, script);\n    }\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.\n   * You can observe any data in this method.\n   *\n   * Defaults to true.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n\n  /**\n   * Indicates if the script is already added to the DOM.\n   */\n  protected hasScript(source?: string): boolean {\n    return !!this.winRef.document.querySelector(`script[src=\"${source}\"]`);\n  }\n\n  protected get renderer(): Renderer2 {\n    return this.rendererFactory.createRenderer(null, null);\n  }\n}\n","import { Component, isDevMode } from '@angular/core';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n/**\n * Adds the Qualtrics deployment script whenever the component is loaded. The\n * deployment script is loaded from the global configuration (`qualtrics.scriptSource`).\n */\n@Component({\n  selector: 'cx-qualtrics',\n  template: ``,\n})\nexport class QualtricsComponent {\n  constructor(\n    protected qualtricsLoader: QualtricsLoaderService,\n    protected config: QualtricsConfig\n  ) {\n    if (this.config.qualtrics?.scriptSource) {\n      this.qualtricsLoader.addScript(this.config.qualtrics.scriptSource);\n    } else if (isDevMode()) {\n      console.warn(\n        `We're unable to add the Qualtrics deployment code as there is no script source defined in config.qualtrics.scriptSource.`\n      );\n    }\n  }\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => (ctx ? this.getInjectedService(ctx) : undefined)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data?.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { BREAKPOINT } from '../../../../layout/config/layout-config';\nimport { TableStructureConfiguration } from '../table.model';\n\n/**\n * Helper configuration to introduce a breakpoint specific table configuration.\n */\nexport interface TableConfiguration extends TableStructureConfiguration {\n  breakpoint?: BREAKPOINT;\n}\n\n/**\n * The `TableConfig` provides table configurations. The configuration allows for a\n * an optional breakpoint specific structure, so a dedicated table structure per\n * screen size can be generated (see `TableService`).\n *\n * The string based key is used to define a configuration for a specific type. The type\n * binds to a specific component, such as the cost-center table. The various table types\n * should be exposed by feature modules, to ease the configuration.\n *\n * The `TableConfiguration` is added in an array, so that any opinionated default configurations\n * can be replaced by customer configurations.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class TableConfig {\n  table: {\n    [key: string]: TableConfiguration[];\n  };\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  isDevMode,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\nimport { Table, TableHeader } from './table.model';\n\n/**\n * The table component provides a generic DOM structure based on the `dataset` input.\n * The `Table` dataset contains both a type, table structure, table data and controls\n * for pagination and sorting.\n *\n * The table component only supports horizontal table structure.\n *\n * The implementation is fairly \"dumb\" and only provides the following features:\n * - Use outlet for table headers (`<th>`) and cells (`<td>`).\n * - Localizing table headers, using the `I18nModule`.\n * - Sorting table columns.\n * - Add CSS classes on each cell to\n *\n * Al features are optional.\n *\n * By default, the headers and columns are rendered with an outlet template. The template\n * reference is generated by concatenating the table _type_ and table _label key_.\n * The following snippet shows an outlet generated for the table type \"cost-center\" with\n * a label \"name\":\n *\n * ```\n * <th>\n *   <template cxOutlet=\"tbl.cost-center.header.name\">\n *     [localized label is generated here]\n *   </template>\n * </th>\n * ```\n *\n * Similarly, the `<td>` is generated with the outlet template reference `tbl.cost-center.data.name`.\n *\n * This allows container components (and customers) to further customize the table rendering.\n *\n *\n */\n@Component({\n  selector: 'cx-table',\n  templateUrl: './table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableComponent {\n  @HostBinding('attr.cx-table-type') tableType: string;\n\n  protected _dataset: Table;\n  @Input()\n  set dataset(dataset: Table) {\n    this._dataset = dataset;\n    this.addTableDebugInfo();\n  }\n  get dataset(): Table {\n    return this._dataset;\n  }\n\n  /**\n   * The paginateEvent is triggered when a new page is required. This includes sorting.\n   */\n  @Output() paginateEvent: EventEmitter<PaginationModel> = new EventEmitter();\n\n  /**\n   * Returns the configured data value by the label key.\n   * If there's no headerKey available, or no corresponding value, the\n   * first value in the data row is returned.\n   */\n  getDataValue(dataRow: any, headerKey: string, index: number): string {\n    return dataRow[headerKey] || Object.values(dataRow)[index];\n  }\n\n  /**\n   * Sorts the table by emitting the pagination to the container/host component.\n   */\n  sort(header: TableHeader) {\n    if (header.sortCode) {\n      this.paginateEvent.emit({\n        ...this.dataset.pagination,\n        sort: header.sortCode,\n      });\n    }\n  }\n\n  /**\n   * Generates the table type into the UI in devMode, so that developers\n   * can easily get the notion of the table type.\n   */\n  protected addTableDebugInfo() {\n    if (isDevMode) {\n      this.tableType = this.dataset?.structure?.type;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { TableComponent } from './table.component';\n\n/**\n * The TableModule provides a table component that is driven by (responsible) configuration.\n */\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  declarations: [TableComponent],\n  exports: [TableComponent],\n})\nexport class TableModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { TableConfig } from './config/table.config';\nimport { TableStructure, TableStructureConfiguration } from './table.model';\n\n/**\n * Responsive table service.\n *\n * The `TableService` is used to generate a `TableStructure` based on configuration. The table\n * structure configuration allows for breakpoint specific configuration, so that the table\n * experience can be differentiated various screen sizes.\n *\n * The table structure configuration is driven by a table type. The various supported\n * table types are exposed in feature libraries.\n *\n * If there is no table configuration for the given type found, a table header structure\n * is generated based on the actual data or randomly (in case no data is passed in) by\n * generating 5 headers. In case of a generated header, we warn the developer in devMode that\n * there is no configuration available.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TableService {\n  constructor(\n    protected breakpointService: BreakpointService,\n    protected config: TableConfig\n  ) {}\n\n  /**\n   * Builds the table structure. The table structure can be created by the help of\n   * the `tableType`. The `tableType` can be used in the configuration `TableConfig`,\n   * so that the table headers can be defined.\n   */\n  buildStructure(\n    tableType: string,\n    data$?: Observable<any>\n  ): Observable<TableStructure> {\n    if (this.hasTableConfig(tableType)) {\n      return this.buildStructureFromConfig(tableType);\n    } else {\n      if (data$) {\n        return this.buildStructureFromData(tableType, data$);\n      } else {\n        return this.buildRandomStructure(tableType);\n      }\n    }\n  }\n\n  /**\n   * Returns the table structure by configuration. The configuration can be\n   * breakpoint-driven, which means that an alternative header structure can\n   * be created per screen size.\n   *\n   * The breakpoint is resolved by teh `BreakpointService`.\n   */\n  protected buildStructureFromConfig(type: string): Observable<TableStructure> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => ({ ...this.getTableConfig(type, breakpoint), type }))\n    );\n  }\n\n  /**\n   * This method generates a table structure by the help of the first data row.\n   */\n  protected buildStructureFromData(\n    type: string,\n    data$: Observable<any>\n  ): Observable<TableStructure> {\n    this.warn(\n      `No table configuration found to render table with type \"${type}\". The table header for \"${type}\" is generated by the help of the first data item`\n    );\n    return data$.pipe(\n      map((data: any[]) => {\n        const headers = Object.keys(data?.[0]).map((key) => ({\n          key,\n          label: key,\n        }));\n        return {\n          type: type,\n          headers,\n        } as TableStructure;\n      })\n    );\n  }\n\n  /**\n   * As a last resort, the table structure is randomly created. We add 5 unknown headers\n   * and use the `hideHeader` to avoid the unknown headers to be rendered.\n   */\n  protected buildRandomStructure(type: string): Observable<TableStructure> {\n    this.warn(\n      `No data available for \"${type}\", a random structure is generated (with hidden table headers).`\n    );\n\n    return of({\n      type,\n      headers: [\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n      ],\n      hideHeader: true,\n    });\n  }\n\n  /**\n   * Finds the best applicable table configuration for the given type\n   * and breakpoint. If there is no configuration available for the breakpoint,\n   * the best match will be returned, using mobile first approach.\n   *\n   * If there is no match for any breakpoint, the fallback is a configuration\n   * without the notion of a breakpoint. Otherwise we fallback to the first\n   * available config.\n   */\n  protected getTableConfig(\n    type: string,\n    breakpoint: BREAKPOINT\n  ): TableStructureConfiguration {\n    const tableConfig = this.config.table[type];\n\n    // find all relevant breakpoints\n    const current = this.breakpointService.breakpoints.indexOf(breakpoint);\n    const relevant = this.breakpointService.breakpoints\n      .slice(0, current + 1)\n      .reverse();\n\n    const bestMatch: BREAKPOINT = relevant.find(\n      (br) => !!tableConfig.find((structure) => structure.breakpoint === br)\n    );\n\n    return bestMatch\n      ? tableConfig.find((config) => config.breakpoint === bestMatch)\n      : tableConfig.find((structure) => !structure.breakpoint) ||\n          tableConfig[0];\n  }\n\n  protected hasTableConfig(tableType: string): boolean {\n    return !!this.config.table?.[tableType];\n  }\n\n  /**\n   * Prints a convenient message in the console to increase developer experience.\n   */\n  private warn(message) {\n    if (isDevMode) {\n      console.warn(message);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import {\n  Compiler,\n  Injectable,\n  InjectFlags,\n  Injector,\n  NgModuleFactory,\n  NgModuleRef,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CMSComponentConfig,\n  CmsComponentMapping,\n  CmsConfig,\n  ConfigChunk,\n  ConfigInitializerService,\n  configurationFactory,\n  DefaultConfigChunk,\n  FeatureModuleConfig,\n} from '@spartacus/core';\nimport {\n  combineLatest,\n  defer,\n  forkJoin,\n  from,\n  merge,\n  Observable,\n  of,\n  queueScheduler,\n} from 'rxjs';\nimport {\n  map,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\ninterface FeatureInstance extends FeatureModuleConfig {\n  moduleRef?: NgModuleRef<any>;\n  depsModules?: any[];\n  componentsMappings?: CMSComponentConfig;\n}\n\n/**\n * Service responsible for resolving cms config based feature modules.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureModulesService implements OnDestroy {\n  // feature modules configuration\n  private featureModulesConfig?: {\n    [featureName: string]: FeatureModuleConfig;\n  };\n\n  // maps componentType to feature\n  private componentFeatureMap: Map<string, string> = new Map();\n\n  /*\n   * Contains either FeatureInstance or FeatureInstance resolver for not yet\n   * resolved feature modules\n   */\n  private features: Map<string, Observable<FeatureInstance>> = new Map();\n\n  private dependencyModules = new Map<any, NgModuleRef<any>>();\n\n  constructor(\n    protected configInitializer: ConfigInitializerService,\n    protected compiler: Compiler,\n    protected injector: Injector\n  ) {\n    this.initFeatureMap();\n  }\n\n  private async initFeatureMap(): Promise<void> {\n    const config: CmsConfig = await this.configInitializer.getStableConfig(\n      'featureModules'\n    );\n\n    this.featureModulesConfig = config.featureModules ?? {};\n\n    for (const [featureName, featureConfig] of Object.entries(\n      this.featureModulesConfig\n    )) {\n      if (featureConfig?.cmsComponents?.length) {\n        for (const component of featureConfig.cmsComponents) {\n          this.componentFeatureMap.set(component, featureName);\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if there is feature module configuration that covers specified\n   * component type\n   */\n  hasFeatureFor(componentType: string): boolean {\n    return this.componentFeatureMap.has(componentType);\n  }\n\n  /**\n   * Return full CmsComponent mapping defined in feature module\n   */\n  getCmsMapping(componentType: string): Observable<CmsComponentMapping> {\n    const feature = this.componentFeatureMap.get(componentType);\n\n    return this.resolveFeature(feature).pipe(\n      map(\n        (featureInstance) => featureInstance.componentsMappings[componentType]\n      )\n    );\n  }\n\n  /**\n   * Get all injectors for feature and its dependencies\n   *\n   * As it's a synchronous method, it works only for already resolved features,\n   * returning undefined otherwise\n   */\n  getInjectors(componentType: string): Injector[] | undefined {\n    const feature = this.componentFeatureMap.get(componentType);\n    let injectors;\n\n    // we are returning injectors only for already resolved features\n    this.features\n      .get(feature)\n      ?.subscribe((featureInstance) => {\n        injectors = [\n          // feature module injector\n          featureInstance.moduleRef.injector,\n          // injectors from dependency modules\n          ...featureInstance.depsModules.map(\n            (module) => this.dependencyModules.get(module).injector\n          ),\n        ];\n      })\n      .unsubscribe();\n    return injectors;\n  }\n\n  /**\n   * Resolve feature based on feature name, if feature was not yet resolved\n   *\n   * It will first resolve all module dependencies if defined\n   */\n  private resolveFeature(featureName: string): Observable<FeatureInstance> {\n    return defer(() => {\n      if (!this.features.has(featureName)) {\n        const featureConfig = this.featureModulesConfig[featureName];\n\n        if (!featureConfig?.module) {\n          throw new Error(\n            'No module defined for Feature Module ' + featureName\n          );\n        }\n\n        // resolve dependencies first (if any)\n        const depsResolve = featureConfig.dependencies?.length\n          ? forkJoin(\n              featureConfig.dependencies.map((depModuleFunc) =>\n                this.resolveDependencyModule(depModuleFunc)\n              )\n            )\n          : of(undefined);\n\n        this.features.set(\n          featureName,\n          depsResolve.pipe(\n            switchMap((deps) => this.resolveFeatureModule(featureConfig, deps)),\n            shareReplay()\n          )\n        );\n      }\n\n      return this.features.get(featureName);\n    });\n  }\n\n  /**\n   * Initialize feature module by returning feature instance\n   */\n  private resolveFeatureModule(\n    featureConfig: FeatureModuleConfig,\n    depsModules: any[] = []\n  ): Observable<FeatureInstance> {\n    return this.resolveModuleFactory(featureConfig?.module).pipe(\n      map(([moduleFactory]) => {\n        const moduleRef = moduleFactory.create(this.injector);\n\n        const featureInstance: FeatureInstance = {\n          ...featureConfig,\n          moduleRef,\n          depsModules,\n          componentsMappings: {},\n        };\n\n        // resolve configuration for feature module\n        const resolvedConfiguration = this.resolveFeatureConfiguration(\n          moduleRef.injector\n        );\n\n        // extract cms components configuration from feature config\n        for (const componentType of featureInstance.cmsComponents) {\n          featureInstance.componentsMappings[componentType] =\n            resolvedConfiguration.cmsComponents[componentType];\n        }\n        return featureInstance;\n      })\n    );\n  }\n\n  /**\n   * Returns configuration provided in feature module\n   */\n  private resolveFeatureConfiguration(featureInjector: Injector): CmsConfig {\n    // get config chunks from feature lib\n    const featureConfigChunks = featureInjector.get<any[]>(\n      ConfigChunk,\n      [],\n      InjectFlags.Self\n    );\n    // get default config chunks from feature lib\n    const featureDefaultConfigChunks = featureInjector.get<any[]>(\n      DefaultConfigChunk,\n      [],\n      InjectFlags.Self\n    );\n\n    return configurationFactory(\n      featureConfigChunks,\n      featureDefaultConfigChunks\n    ) as CmsConfig;\n  }\n\n  /**\n   * Resolves dependency module and initializes single module instance\n   */\n  private resolveDependencyModule(\n    moduleFunc: () => Promise<any>\n  ): Observable<any> {\n    // We grab moduleFactory symbol from module function and if there is no\n    // such a module created yet, we create it and store it in a\n    // dependencyModules map\n    return this.resolveModuleFactory(moduleFunc).pipe(\n      tap(([moduleFactory, module]) => {\n        if (!this.dependencyModules.has(module)) {\n          const moduleRef = moduleFactory.create(this.injector);\n          this.dependencyModules.set(module, moduleRef);\n        }\n      }),\n      pluck(1)\n    );\n  }\n\n  /**\n   * Resolve any Angular module from an function that return module or moduleFactory\n   */\n  private resolveModuleFactory(\n    moduleFunc: () => Promise<any>\n  ): Observable<[NgModuleFactory<any>, any]> {\n    return from(moduleFunc()).pipe(\n      switchMap((module) =>\n        module instanceof NgModuleFactory\n          ? (of([module, module]) as Observable<[NgModuleFactory<any>, any]>)\n          : combineLatest([\n              // using compiler here is for jit compatibility, there is no overhead\n              // for aot production builds as it will be stubbed\n              from(this.compiler.compileModuleAsync(module as any)),\n              of(module),\n            ])\n      ),\n      observeOn(queueScheduler)\n    );\n  }\n\n  ngOnDestroy(): void {\n    // clean up all initialized features\n    merge(...Array.from(this.features.values())).subscribe((featureInstance) =>\n      featureInstance.moduleRef?.destroy()\n    );\n\n    // clean up all initialized dependency modules\n    this.dependencyModules.forEach((dependency) => dependency.destroy());\n  }\n}\n","import { Inject, Injectable, Injector, PLATFORM_ID } from '@angular/core';\nimport {\n  CmsComponentMapping,\n  CmsConfig,\n  deepMerge,\n  DeferLoadingStrategy,\n} from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\nimport { defer, forkJoin, Observable, of } from 'rxjs';\nimport { mapTo, share, tap } from 'rxjs/operators';\nimport { FeatureModulesService } from './feature-modules.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentsService {\n  private missingComponents: string[] = [];\n  private mappings: { [componentType: string]: CmsComponentMapping } = {};\n\n  // contains\n  private mappingResolvers: Map<\n    string,\n    Observable<CmsComponentMapping>\n  > = new Map();\n\n  /**\n   * @deprecated since 2.1\n   * constructor(config: CmsConfig, platformId: Object);\n   */\n  constructor(\n    protected config: CmsConfig,\n    @Inject(PLATFORM_ID) protected platformId: Object,\n    protected featureModules?: FeatureModulesService\n  ) {}\n\n  /**\n   * Should be called to make sure all component mappings are determined,\n   * especially lazy loaded ones.\n   *\n   * It's recommended way to make sure all other methods of CmsComponentService\n   * will be able to work synchronously for asked component types and avoid risk\n   * of potential errors that could be thrown otherwise.\n   */\n  determineMappings(componentTypes: string[]): Observable<string[]> {\n    return defer(() => {\n      // we use defer, to be sure the logic below used to compose final observable\n      // will be executed at subscription time (with up to date state at the time,\n      // when it will be needed)\n      const featureResolvers = [];\n\n      for (const componentType of componentTypes) {\n        if (!this.mappings[componentType]) {\n          const staticConfig = this.config.cmsComponents[componentType];\n\n          // check if this component type is managed by feature module\n          if (this.featureModules.hasFeatureFor(componentType)) {\n            featureResolvers.push(\n              // we delegate populating this.mappings to feature resolver\n              this.getFeatureMappingResolver(componentType, staticConfig)\n            );\n          } else {\n            // simply use only static config\n            this.mappings[componentType] = staticConfig;\n          }\n        }\n      }\n\n      if (featureResolvers.length) {\n        return forkJoin(featureResolvers).pipe(mapTo(componentTypes));\n      } else {\n        return of(componentTypes);\n      }\n    });\n  }\n\n  private getFeatureMappingResolver(\n    componentType: string,\n    staticConfig?: CmsComponentMapping\n  ): Observable<CmsComponentMapping> {\n    if (!this.mappingResolvers.has(componentType)) {\n      const mappingResolver$ = this.featureModules\n        .getCmsMapping(componentType)\n        .pipe(\n          tap((featureComponentMapping) => {\n            // We treat cms mapping configuration from a feature as a default,\n            // that can be overridden by app/static configuration\n            this.mappings[componentType] = deepMerge(\n              {},\n              featureComponentMapping,\n              staticConfig\n            );\n            this.mappingResolvers.delete(componentType);\n          }),\n          share()\n        );\n      this.mappingResolvers.set(componentType, mappingResolver$);\n    }\n    return this.mappingResolvers.get(componentType);\n  }\n\n  getInjectors(componentType: string): Injector[] {\n    return (\n      (this.featureModules.hasFeatureFor(componentType) &&\n        this.featureModules.getInjectors(componentType)) ??\n      []\n    );\n  }\n\n  /**\n   * Return collection of component mapping configuration for specified list of\n   * component types.\n   *\n   * If component mapping can't be determined synchronously, for example, lazy\n   * loaded one, it will throw an error.\n   *\n   * To make sure component mapping is available, determineMappings()\n   * should be called and completed first.\n   */\n  getMapping(componentType: string): CmsComponentMapping {\n    const componentConfig =\n      this.mappings[componentType] ??\n      this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  /**\n   * Checks, if component should be rendered as some components\n   * could be disabled for server side renderings\n   */\n  shouldRender(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getMapping(componentType)?.disableSSR);\n  }\n\n  /**\n   * Return DeferLoadingStrategy for component type.\n   */\n  getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    return this.config.cmsComponents?.[componentType]?.deferLoading;\n  }\n\n  /**\n   * Get cms driven child routes for components\n   */\n  getChildRoutes(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        routes.push(...(this.getMapping(componentType)?.childRoutes ?? []));\n      }\n    }\n    return routes;\n  }\n\n  /**\n   * Get cms driven guards for components\n   */\n  getGuards(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getMapping(componentType)?.guards?.forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  /**\n   * Get i18n keys associated with components\n   */\n  getI18nKeys(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        this.getMapping(componentType)?.i18nKeys?.forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n}\n","import {\n  AbstractType,\n  InjectFlags,\n  InjectionToken,\n  Injector,\n  Type,\n} from '@angular/core';\n\nconst NOT_FOUND_SYMBOL = {};\n\n/**\n * CombinedInjector is able to combine more than one injector together in a way\n * that main injector is supported by complementary injectors.\n *\n * Should be used as a parent injector for components, when we want to have access\n * to both providers from component hierarchical injectors and providers from any\n * number of additional injectors (lazy loaded modules for example).\n */\nexport class CombinedInjector implements Injector {\n  /**\n   * @param mainInjector Component hierarchical injector\n   * @param complementaryInjectors Additional injector that will be taken into an account when resolving dependencies\n   */\n  constructor(\n    private mainInjector: Injector,\n    private complementaryInjectors: Injector[]\n  ) {}\n\n  get<T>(\n    token: Type<T> | InjectionToken<T> | AbstractType<T>,\n    notFoundValue?: T,\n    flags?: InjectFlags\n  ): T;\n  get(token: any, notFoundValue?: any): any;\n  get(token, notFoundValue?: any, flags?: InjectFlags): any {\n    // tslint:disable-next-line:no-bitwise\n    if (flags & InjectFlags.Self) {\n      if (notFoundValue !== undefined) {\n        return notFoundValue;\n      }\n      throw new Error(\n        \"CombinedInjector should be used as a parent injector / doesn't support self dependencies\"\n      );\n    }\n\n    for (const injector of [\n      this.mainInjector,\n      ...this.complementaryInjectors,\n    ]) {\n      // First we are resolving providers provided at Self level in all injectors,\n      // starting with main injector and going through complementary ones...\n      const service = injector.get(token, NOT_FOUND_SYMBOL, InjectFlags.Self);\n      if (service !== NOT_FOUND_SYMBOL) {\n        return service;\n      }\n    }\n    // ...and then fallback to main injector passing the flag\n    return this.mainInjector.get(token, notFoundValue, flags);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsComponentsService } from '../../../services/cms-components.service';\nimport { CombinedInjector } from '../../../../shared/utils/combined-injector';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsComponentsService.getMapping(type)?.providers ?? [];\n\n    const complementaryInjectors = this.cmsComponentsService.getInjectors(type);\n\n    if (complementaryInjectors?.length) {\n      parentInjector = new CombinedInjector(\n        parentInjector ?? this.injector,\n        complementaryInjectors\n      );\n    }\n\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Applicable {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsComponentsService } from '../../services/cms-components.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService\n  ) {}\n\n  ngOnInit() {\n    this.cmsComponentsService\n      .determineMappings([this.cxComponentWrapper.flexType])\n      .subscribe(() => {\n        if (\n          this.cmsComponentsService.shouldRender(\n            this.cxComponentWrapper.flexType\n          )\n        ) {\n          this.launchComponent();\n        }\n      });\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsComponentsService.getMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n        this.injector.get(ChangeDetectorRef).markForCheck();\n      });\n  }\n\n  private decorate(elementRef: ElementRef): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      elementRef.nativeElement,\n      this.renderer,\n      { componentData: this.cxComponentWrapper }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return typeof componentMapping.component === 'function';\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { DefaultComponentHandler } from './default-component.handler';\nimport { switchMap } from 'rxjs/operators';\nimport { ComponentHandler } from './component-handler';\n\n/**\n * Lazy component handler used for launching lazy loaded cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LazyComponentHandler implements ComponentHandler {\n  constructor(protected defaultHandler: DefaultComponentHandler) {}\n\n  /**\n   * We want to mach dynamic import signature () => import('')\n   */\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      this.isNotClass(componentMapping.component)\n    );\n  }\n\n  private isNotClass(symbol: any): boolean {\n    const signature = symbol.toString().substr(0, 20).replace(' ', '');\n    return signature.startsWith('function()') || signature.startsWith('()=>');\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return from(componentMapping.component()).pipe(\n      switchMap((component) =>\n        this.defaultHandler.launcher(\n          { ...componentMapping, component },\n          viewContainerRef,\n          elementInjector\n        )\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { LazyComponentHandler } from './handlers/lazy-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: LazyComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  isCollapsed$: Observable<boolean>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected asmService: AsmService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n    this.isCollapsed$ = this.asmService\n      .getAsmUiState()\n      .pipe(map((uiState) => uiState.collapsed));\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AsmService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm-toggle-ui',\n  templateUrl: './asm-toggle-ui.component.html',\n  styleUrls: ['./asm-toggle-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmToggleUiComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  isCollapsed: boolean;\n\n  constructor(protected asmService: AsmService) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      this.asmService.getAsmUiState().subscribe((uiState) => {\n        this.isCollapsed = uiState.collapsed;\n      })\n    );\n  }\n\n  toggleUi(): void {\n    this.asmService.updateAsmUiState({ collapsed: !this.isCollapsed });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\n\nexport const defaultAsmLayoutConfig: LayoutConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AsmModule as AsmCoreModule,\n  I18nModule,\n  provideConfig,\n} from '@spartacus/core';\nimport { FormErrorsModule } from '../../shared/index';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { AsmToggleUiComponent } from './asm-toggle-ui/asm-toggle-ui.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { defaultAsmLayoutConfig } from './default-asm-layout.config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n    AsmToggleUiComponent,\n  ],\n  providers: [provideConfig(defaultAsmLayoutConfig)],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n\n    this.cart$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getActiveCartId(),\n      this.customerCouponService.getCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      ),\n    ]).pipe(\n      tap(\n        ([cart, activeCardId, customerCoupons]: [\n          Cart,\n          string,\n          CustomerCouponSearchResult\n        ]) => {\n          this.cartId = activeCardId;\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n        }\n      ),\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n    );\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n  selectiveCartEnabled: boolean;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.selectiveCartEnabled = this.selectiveCartService.isEnabled();\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartEnabled\n        ? this.selectiveCartService.getLoaded()\n        : of(false),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn && this.selectiveCartEnabled\n          ? cartLoaded && sflLoaded\n          : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, Cart, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.isEnabled()\n          ? this.selectiveCartService.getCart()\n          : of({} as Cart),\n        this.activeCartService.getLoading(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart, loadingCart]) => {\n          const exclude = (arr, args) =>\n            arr.filter((item) => args.every((arg) => arg !== item));\n          return Object.keys(cart).length === 0 && loadingCart\n            ? exclude(slots, [\n                'TopContent',\n                'CenterRightContentSlot',\n                'EmptyCartMiddleContent',\n              ])\n            : cart.totalItems\n            ? exclude(slots, ['EmptyCartMiddleContent'])\n            : selectiveCart.totalItems\n            ? exclude(slots, [\n                'EmptyCartMiddleContent',\n                'CenterRightContentSlot',\n              ])\n            : exclude(slots, ['TopContent', 'CenterRightContentSlot']);\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { SaveForLaterComponent } from './save-for-later.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          if (code !== this.currentDeliveryModeId) {\n            this.checkoutDeliveryService.setDeliveryMode(code);\n          }\n        }\n        this.currentDeliveryModeId = code;\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.checkoutDeliveryService.setDeliveryMode(code);\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n  protected checkoutStepUrlNext: string;\n  protected checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.routingService.go(this.checkoutStepUrlNext);\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CheckoutService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm: FormGroup = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  ErrorModel,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  addresses$: Observable<Address[]>;\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField = true;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries: Country[]) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles: Title[]) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions: Region[]) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(\n              (error: ErrorModel) => error.subject === 'titleCode'\n            )\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n\n    this.addresses$ = this.userAddressService.getAddresses();\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take, filter } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    this.selectedAddress$\n      .pipe(\n        filter((selected) => !!selected?.shippingAddress),\n        take(1)\n      )\n      .subscribe(() => this.goNext());\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nimport { CmsComponentsService } from '../../services/cms-components.service';\n\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position represents the unique key for a page slot on a single page, but can\n   * be reused cross pages.\n   *\n   * The position is used to find the CMS components for the page slot. It is also\n   * added as an additional CSS class so that layoutt can be applied.\n   */\n  @Input() set position(value: string) {\n    this.position$.next(value);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  /**\n   * Maintains css classes introduced by the host and adds additional classes.\n   */\n  @Input() @HostBinding() class: string;\n\n  /**\n   * Indicates that the page slot is the last page slot above the fold.\n   */\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  /**\n   * Indicates that the components of the page slot haven't been loaded as long\n   * as the isPending state is true.\n   */\n  @HostBinding('class.cx-pending') isPending = true;\n\n  /**\n   * Indicates that the page slot doesn't contain any components. This is no\n   * longer used in spartacus, but kept for backwards compatibility.\n   */\n  @HostBinding('class.has-components') @Input() hasComponents = false;\n\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  components: ContentSlotComponentData[];\n\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    distinctUntilChanged(this.isDistinct)\n  );\n\n  /** Observes the components for the given page slot. */\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\n    map((slot) => slot?.components ?? [])\n  );\n\n  protected subscription: Subscription = new Subscription();\n\n  /** Keeps track of the pending components that must be loaded for the page slot */\n  private pendingComponentCount = 0;\n\n  /** Tracks the last used position, in case the page slot is used dynamically */\n  private lastPosition: string;\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\n        this.components = value?.components || [];\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  protected decorate(slot: ContentSlotData): void {\n    let cls = this.class || '';\n\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\n      cls = cls.replace(this.lastPosition, '');\n    }\n    if (this.position$.value) {\n      cls += ` ${this.position$.value}`;\n      this.lastPosition = this.position$.value;\n    }\n\n    // host bindings\n    this.pending = slot?.components?.length || 0;\n    this.hasComponents = slot?.components?.length > 0;\n    if (cls && cls !== this.class) {\n      this.class = cls;\n    }\n\n    this.addSmartEditSlotClass(slot);\n  }\n\n  /**\n   * Sets the pending count for the page slot components. Once all pending components are\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\n   */\n  protected set pending(count: number) {\n    this.pendingComponentCount = count;\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  protected get pending(): number {\n    return this.pendingComponentCount;\n  }\n\n  /*\n   * Is triggered when a component is added to the view. This is used to\n   * update the pending count\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pending--;\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether the component should be\n   * rendered instantly or whether it should be deferred.\n   */\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(\n      componentType\n    );\n    return { deferLoading };\n  }\n\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\n    return (\n      current.components &&\n      old.components?.length === current.components.length &&\n      !old.components.find(\n        (el, index) => el.uid !== current.components[index].uid\n      )\n    );\n  }\n\n  private addSmartEditSlotClass(slot: ContentSlotData): void {\n    if (slot) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.elementRef.nativeElement,\n        this.renderer,\n        { slotData: slot }\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddToHomeScreenService {\n  protected deferredEvent: any;\n\n  protected canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    protected config: PWAModuleConfig,\n    protected globalMessageService: GlobalMessageService,\n    protected winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService implements OnDestroy {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  private subscription: Subscription;\n\n  init() {\n    this.subscription = this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory implements OnDestroy {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  private subscription: Subscription;\n\n  build() {\n    this.subscription = this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsDialogModule } from '../../shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsDialogModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsComponentsService.getGuards(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected translation: TranslationService,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsComponentsService.getI18nKeys(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsComponentsService } from './cms-components.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(\n    private router: Router,\n    private cmsComponentsService: CmsComponentsService\n  ) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsComponentsService.getChildRoutes(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsComponentsService } from '../services/cms-components.service';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    protected cmsService: CmsService,\n    protected cmsRoutes: CmsRoutesService,\n    protected cmsI18n: CmsI18nService,\n    protected cmsGuards: CmsGuardsService,\n    protected cmsComponentsService: CmsComponentsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsComponentsService.determineMappings(componentTypes)\n      ),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, take, switchMap } from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    winRef?: WindowRef,\n    // tslint:disable-next-line:unified-signatures\n    breakpointService?: BreakpointService\n  );\n  /**\n   * @deprecated since 2.1\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    winRef?: WindowRef\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    protected cmsService: CmsService,\n    protected winRef?: WindowRef,\n    protected breakpointService?: BreakpointService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilChanged((x, y) => x?.components === y?.components),\n    switchMap((data) =>\n      combineLatest(\n        (data?.components ?? '').split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab) {\n                return undefined;\n              }\n\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number, event?: MouseEvent): void {\n    this.breakpointService\n      ?.isDown(BREAKPOINT.sm)\n      .pipe(take(1))\n      .subscribe((res) => {\n        if (res) {\n          this.activeTabNum = this.activeTabNum === tabNum ? -1 : tabNum;\n          if (event && event?.target) {\n            const target = event.target as HTMLElement;\n            const parentNode = target.parentNode as HTMLElement;\n            this.winRef?.nativeWindow?.scrollTo(0, parentNode.offsetTop);\n          }\n        } else {\n          this.activeTabNum = tabNum;\n        }\n      });\n  }\n\n  ngOnInit(): void {\n    this.activeTabNum =\n      this.winRef?.nativeWindow?.history?.state?.activeTab ?? this.activeTabNum;\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() amendOrderForm: FormGroup;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n\n  constructor(protected routingService: RoutingService) {}\n\n  continue(event: Event): void {\n    if (this.amendOrderForm.valid) {\n      this.routingService.go({\n        cxRoute: this.forwardRoute,\n        params: { code: this.orderCode },\n      });\n    } else {\n      this.amendOrderForm.markAllAsTouched();\n      event.stopPropagation();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantityToCancel(control: FormControl) {\n  if (!control.value) {\n    return null;\n  }\n  const quantity = Object.values(control.value).reduce(\n    (acc: number, val: number) => acc + val,\n    0\n  );\n  return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup(\n      {},\n      { validators: [ValidateQuantityToCancel] }\n    );\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  ItemCounterModule,\n  MediaModule,\n} from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup) {\n    if (form.valid) {\n      this.orderAmendService.save();\n    } else {\n      form.markAllAsTouched();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order?.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\nimport { FormErrorsModule } from '../../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm: FormGroup = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return data\n          ? {\n              title: data.name,\n              children: [nav],\n            }\n          : undefined;\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category),\n   * also taking into account content pages (contentPageLabelOrId)\n   * and product pages (productCode)\n   */\n  protected getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.contentPageLabelOrId) {\n      return item.contentPageLabelOrId;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    } else if (item.productCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'product',\n        params: {\n          code: item.productCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    const wrapper = <HTMLElement>node.querySelector('.wrapper');\n    const body = <HTMLElement>node.closest('body');\n    if (wrapper) {\n      this.renderer.removeStyle(wrapper, 'margin-left');\n      if (\n        wrapper.offsetLeft + wrapper.offsetWidth >\n        body.offsetLeft + body.offsetWidth\n      ) {\n        this.renderer.setStyle(\n          wrapper,\n          'margin-left',\n          `${node.offsetWidth - wrapper.offsetWidth}px`\n        );\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c?.displayProducts === 'true' || c?.displayProducts === true,\n            displayProductImages:\n              <any>c?.displayProductImages === 'true' ||\n              c?.displayProductImages === true,\n            displaySuggestions:\n              <any>c?.displaySuggestions === 'true' ||\n              c?.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d?.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data?.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) => {\n      this.mainMediaContainer.next(p.images?.PRIMARY ? p.images.PRIMARY : {});\n    })\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RouterState,\n  RoutingService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\nimport { ProductListRouteParams, SearchCriteria } from './product-list.model';\n\n/**\n * The `ProductListComponentService` is used to search products. The service is used\n * on the Product Listing Page, for listing products and the facet navigation.\n *\n * The service exposes the product search results based on the category and search\n * route parameters. The route parameters are used to query products by the help of\n * the `ProductSearchService`.\n */\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  /**\n   * @deprecated will be removed in version 3.0 as this is the\n   *   subscription is longer used\n   */\n  protected sub: Subscription;\n\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  /**\n   * Emits the search results for the current search query.\n   *\n   * The `searchResults$` is _not_ concerned with querying, it only observes the\n   * `productSearchService.getResults()`\n   */\n  protected searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  /**\n   * Observes the route and performs a search on each route change.\n   *\n   * Context changes, such as language and currencies are also taken\n   * into account, so that the search is performed again.\n   */\n  protected searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    ...this.siteContext,\n  ]).pipe(\n    map(([routerState, ..._context]) => (routerState as RouterState).state),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream is used for the Product Listing and Product Facets.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  /**\n   * Expose the `SearchCriteria`. The search criteria are driven by the route parameters.\n   *\n   * This search route configuration is not yet configurable\n   * (see https://github.com/SAP/spartacus/issues/7191).\n   */\n  protected getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  /**\n   * Resolves the search query from the given `ProductListRouteParams`.\n   */\n  protected getQueryFromRouteParams({\n    query,\n    categoryCode,\n    brandCode,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n\n    // TODO: drop support for brands as they should be treated\n    // similarly as any category.\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  /**\n   * Performs a search based on the given search criteria.\n   *\n   * The search is delegated to the `ProductSearchService`.\n   */\n  protected search(criteria: SearchCriteria): void {\n    const currentPage = criteria.currentPage;\n    const pageSize = criteria.pageSize;\n    const sortCode = criteria.sortCode;\n\n    this.productSearchService.search(\n      criteria.query,\n      // TODO: consider dropping this complex passing of cleaned object\n      Object.assign(\n        {},\n        currentPage && { currentPage },\n        pageSize && { pageSize },\n        sortCode && { sortCode }\n      )\n    );\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  /**\n   * Sort the search results by the given sort code.\n   */\n  sort(sortCode: string): void {\n    this.route({ sortCode });\n  }\n\n  /**\n   * Routes to the next product listing page, using the given `queryParams`. The\n   * `queryParams` support sorting, pagination and querying.\n   *\n   * The `queryParams` are delegated to the Angular router `NavigationExtras`.\n   */\n  protected route(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n\n  /**\n   * The site context is used to update the search query in case of a\n   * changing context. The context will typically influence the search data.\n   *\n   * We keep this private for now, as we're likely refactoring this in the next\n   * major version.\n   */\n  private get siteContext(): Observable<string>[] {\n    // TODO: we should refactor this so that custom context will be taken\n    // into account automatically. Ideally, we drop the specific context\n    // from the constructor, and query a ContextService for all contexts.\n\n    return [this.languageService.getActive(), this.currencyService.getActive()];\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  setQuery(query: string): void {\n    this.route({ query, currentPage: undefined });\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  viewPage(pageNumber: number): void {\n    this.route({ currentPage: pageNumber });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      (breadcrumb.facetValueCode === params.categoryCode ||\n        breadcrumb.facetValueCode === params.brandCode)\n    );\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: facet.topValueCount || 0,\n          maxVisible: facet.topValueCount || 0,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string): { [key: string]: string } {\n    return {\n      // to avoid encoding issues with facets that have space (' ') in their name,\n      // we replace the decoded '+' back to empty space ' '.\n      // For more, see https://github.com/SAP/spartacus/issues/7348\n      query: new HttpUrlEncodingCodec().decodeValue(query).replace(/\\+/g, ' '),\n    };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given _active_ facet when there\n   * the original facets is not available. This happens for non multi-valued facets.\n   *\n   * With this approach, the we keep the focus, either at the facet list or on the\n   * active facets.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return facetList.facets?.find((f) =>\n      f.values?.find((val) => val.name === facet.facetValueName)\n    )\n      ? ''\n      : facet.facetValueName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  private _isDialog: boolean;\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input()\n  set isDialog(value: boolean) {\n    this._isDialog = value;\n    if (value) {\n      this.renderer.addClass(document.body, 'modal-open');\n    }\n  }\n\n  get isDialog(): boolean {\n    return this._isDialog;\n  }\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  @HostListener('click') handleClick() {\n    this.close();\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef,\n    protected renderer: Renderer2\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.renderer.removeClass(document.body, 'modal-open');\n    this.closeList.emit(event);\n  }\n\n  block(event?: MouseEvent) {\n    event.stopPropagation();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n  StoreFinderConfig,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n  radius: number;\n  searchQuery: StoreFinderSearchQuery;\n  geolocation: GeoPoint;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    protected config: StoreFinderConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.radius = this.config.googleMaps.radius;\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { Params } from '@angular/router';\nimport { PageContext } from '@spartacus/core';\n\n/**\n * Indicates either that a user visited an arbitrary page of a web presence or that the page type was unknown.\n */\nexport class PageVisitedEvent {\n  context: PageContext;\n  semanticRoute?: string;\n  url: string;\n  params: Params;\n}\n\n/**\n * Indicates that a user visited the home page of a web presence.\n */\nexport class HomePageVisitedEvent extends PageVisitedEvent {}\n","import { PageVisitedEvent } from '../page/page.events';\n\n/**\n * Indicates that a user visited a cart page.\n */\nexport class CartPageVisitedEvent extends PageVisitedEvent {}\n","import { Injectable } from '@angular/core';\nimport { ActionsSubject } from '@ngrx/store';\nimport { createFrom, EventService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PageVisitedEvent } from '../page/page.events';\nimport { CartPageVisitedEvent } from './cart-page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageEventBuilder {\n  constructor(\n    protected actions: ActionsSubject,\n    protected eventService: EventService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(CartPageVisitedEvent, this.buildCartPageEvent());\n  }\n\n  protected buildCartPageEvent(): Observable<CartPageVisitedEvent> {\n    return this.eventService.get(PageVisitedEvent).pipe(\n      filter((pageVisitedEvent) => pageVisitedEvent.semanticRoute === 'cart'),\n      map((pageVisitedEvent) =>\n        createFrom(CartPageVisitedEvent, pageVisitedEvent)\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartPageEventBuilder } from './cart-page-event.builder';\n\n@NgModule({})\nexport class CartPageEventModule {\n  constructor(_cartPageEventBuilder: CartPageEventBuilder) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { RouterNavigatedAction, ROUTER_NAVIGATED } from '@ngrx/router-store';\nimport { ActionsSubject } from '@ngrx/store';\nimport {\n  ActivatedRouterStateSnapshot,\n  createFrom,\n  EventService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { HomePageVisitedEvent, PageVisitedEvent } from './page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageEventBuilder {\n  constructor(\n    protected actions: ActionsSubject,\n    protected eventService: EventService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(PageVisitedEvent, this.buildPageVisitedEvent());\n    this.eventService.register(\n      HomePageVisitedEvent,\n      this.buildHomePageVisitedEvent()\n    );\n  }\n\n  protected buildPageVisitedEvent(): Observable<PageVisitedEvent> {\n    return this.getNavigatedEvent().pipe(\n      map((state) =>\n        createFrom(PageVisitedEvent, {\n          context: state.context,\n          semanticRoute: state.semanticRoute,\n          url: state.url,\n          params: state.params,\n        })\n      )\n    );\n  }\n\n  protected buildHomePageVisitedEvent(): Observable<HomePageVisitedEvent> {\n    return this.buildPageVisitedEvent().pipe(\n      filter((pageVisitedEvent) => pageVisitedEvent.semanticRoute === 'home'),\n      map((pageVisitedEvent) =>\n        createFrom(HomePageVisitedEvent, pageVisitedEvent)\n      )\n    );\n  }\n\n  private getNavigatedEvent(): Observable<ActivatedRouterStateSnapshot> {\n    return this.actions.pipe(\n      ofType<RouterNavigatedAction<ActivatedRouterStateSnapshot>>(\n        ROUTER_NAVIGATED\n      ),\n      map((event) => event.payload.routerState)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageEventBuilder } from './page-event.builder';\n\n@NgModule({})\nexport class PageEventModule {\n  constructor(_pageEventBuilder: PageEventBuilder) {}\n}\n","import { Category, Price } from '@spartacus/core';\n\n/**\n * Indicates that a user visited a product details page. A visited product code value is emitted whenever the product\n * details page is visited, together with the name, the price, and the categories of that product.\n */\nexport class ProductDetailsPageEvent {\n  categories?: Category[];\n  code?: string;\n  name?: string;\n  price?: Price;\n}\n\n/**\n * Indicates that a user visited a category. The code and the name of the category\n * are emitted whenever a category page is visited.\n */\nexport class CategoryPageResultsEvent {\n  categoryCode: string;\n  categoryName: string;\n}\n\n/**\n * Indicates that the search results have been retrieved.\n * The search term and the number of results are emitted\n * whenever a search has been executed.\n */\nexport class SearchPageResultsEvent {\n  searchTerm: string;\n  numberOfResults: Number;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  createFrom,\n  EventService,\n  ProductSearchService,\n  ProductService,\n} from '@spartacus/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { filter, map, skip, switchMap, take } from 'rxjs/operators';\nimport { PageVisitedEvent } from '../page/page.events';\nimport {\n  CategoryPageResultsEvent,\n  ProductDetailsPageEvent,\n  SearchPageResultsEvent,\n} from './product-page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageEventBuilder {\n  constructor(\n    protected eventService: EventService,\n    protected productService: ProductService,\n    protected productSearchService: ProductSearchService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(\n      SearchPageResultsEvent,\n      this.buildSearchPageResultsEvent()\n    );\n    this.eventService.register(\n      ProductDetailsPageEvent,\n      this.buildProductDetailsPageEvent()\n    );\n    this.eventService.register(\n      CategoryPageResultsEvent,\n      this.buildCategoryResultsPageEvent()\n    );\n  }\n\n  protected buildProductDetailsPageEvent(): Observable<\n    ProductDetailsPageEvent\n  > {\n    return this.eventService.get(PageVisitedEvent).pipe(\n      filter(\n        (pageVisitedEvent) => pageVisitedEvent.semanticRoute === 'product'\n      ),\n      map((pageVisitedEvent) => pageVisitedEvent.context.id),\n      switchMap((productId) =>\n        this.productService.get(productId).pipe(\n          filter((product) => Boolean(product)),\n          take(1),\n          map((product) =>\n            createFrom(ProductDetailsPageEvent, {\n              categories: product.categories,\n              code: product.code,\n              name: product.name,\n              price: product.price,\n            })\n          )\n        )\n      )\n    );\n  }\n\n  protected buildCategoryResultsPageEvent(): Observable<\n    CategoryPageResultsEvent\n  > {\n    const searchResults$ = this.productSearchService.getResults().pipe(\n      // skipping the initial value, and preventing emission of the previous search state\n      skip(1)\n    );\n\n    const categoryPageVisitedEvent$ = this.eventService\n      .get(PageVisitedEvent)\n      .pipe(\n        map((pageVisitedEvent) => ({\n          isCategoryPage: pageVisitedEvent.semanticRoute === 'category',\n          categoryCode: pageVisitedEvent.context.id,\n        }))\n      );\n\n    return categoryPageVisitedEvent$.pipe(\n      switchMap((pageEvent) => {\n        if (!pageEvent.isCategoryPage) {\n          return EMPTY;\n        }\n\n        return searchResults$.pipe(\n          map((searchResults) => ({\n            categoryCode: pageEvent.categoryCode,\n            categoryName: searchResults.breadcrumbs[0].facetValueName,\n          })),\n          map((categoryPage) =>\n            createFrom(CategoryPageResultsEvent, categoryPage)\n          )\n        );\n      })\n    );\n  }\n\n  protected buildSearchPageResultsEvent(): Observable<SearchPageResultsEvent> {\n    const searchResults$ = this.productSearchService.getResults().pipe(\n      // skipping the initial value, and preventing emission of the previous search state\n      skip(1),\n      map((searchResults) => ({\n        searchTerm: searchResults.freeTextSearch,\n        numberOfResults: searchResults.pagination.totalResults,\n      })),\n      map((searchPage) => createFrom(SearchPageResultsEvent, searchPage))\n    );\n\n    const searchPageVisitedEvent$ = this.eventService\n      .get(PageVisitedEvent)\n      .pipe(\n        map((pageVisitedEvent) => pageVisitedEvent.semanticRoute === 'search')\n      );\n\n    return searchPageVisitedEvent$.pipe(\n      switchMap((isSearchPage) => (isSearchPage ? searchResults$ : EMPTY))\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ProductPageEventBuilder } from './product-page-event.builder';\n\n@NgModule({})\nexport class ProductPageEventModule {\n  constructor(_productPageEventBuilder: ProductPageEventBuilder) {}\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport { CartPageEventModule } from './cart/cart-page-event.module';\nimport { PageEventModule } from './page/page-event.module';\nimport { ProductPageEventModule } from './product/product-page-event.module';\n\n@NgModule({\n  imports: [CartPageEventModule, PageEventModule, ProductPageEventModule],\n})\nexport class EventsModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { EventsModule } from '../events/events.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n    EventsModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}