{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-root/asm-root.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","map","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","changeDetection","ChangeDetectionStrategy","OnPush","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","subscription","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","increment","preventDefault","stopPropagation","onBlur","focus","onFocus","setFocus","registerOnTouched","fn","registerOnChange","updatedQuantity","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","ViewChild","static","OnlyNumberDirective","hostElement","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","Directive","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","get","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","BehaviorSubject","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","load","filter","switchMap","qsi","isDataLoaded","dataLoaded","API","unload","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","cmsComponents","component","entryComponents","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","item","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","ViewConfigModule","forRoot","ngModule","provideConfig","view","ViewConfig","AutoFocusDirective","ngAfterViewInit","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","FeaturesConfigModule","CurrentProductService","routingService","productService","getProduct","getRouterState","state","params","productCode","RoutingService","ProductService","AddedToCartDialogComponent","cartService","fb","quantity","group","entry$","entry","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","updateEntry","entryNumber","CartService","FormBuilder","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","setStockInfo","markForCheck","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","ChangeDetectorRef","AutoFocusDirectiveModule","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","isReadOnly","vouchers","slice","sort","a","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","authService","formBuilder","getOccUserId","cart","userId","cartId","OCC_USER_ID_ANONYMOUS","guid","cartIsLoading$","resetAddVoucherProcessingState","couponCode","Validators","required","submitDisabled$","valid","getAddVoucherResultLoading","btnEnabled","addVoucherIsLoading","getAddVoucherResultSuccess","success","onSuccess","reset","applyVoucher","addVoucher","AuthService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","potentialProductPromotions","_items","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","e_2","_f","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entries","CartItemComponent","compact","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","go","cxRoute","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","slots","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","checkout","steps","name","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getUserToken","getAssignedUser","token","user","access_token","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","uid","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","warn","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","paymentMethodSelected","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","layoutModules","LayoutModule","CmsMappingService","platformId","isComponentEnabled","flexType","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","componentType","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsConfig","Inject","PLATFORM_ID","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","Promise","resolve","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","CmsService","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","addClass","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","path","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","CmsPageGuard","cmsService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","OutletDirective","vcr","_context","renderTemplate","cxOutlet","ComponentFactory","createComponent","createEmbeddedView","$implicit","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","split","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","DOCUMENT","CxApiService","auth","checkoutDelivery","checkoutPayment","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","userAddress","userConsent","userOrder","userPayment","ngZone","CartDataService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserConsentService","UserOrderService","NgZone","ComponentWrapperDirective","componentMapper","dynamicAttributeService","shouldRenderComponent","cxComponentWrapper","launchWebComponent","launchComponent","cmpRef","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","element","parentElement","P","reject","fulfilled","rejected","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","addComponentClass","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","JSON","stringify","scriptElement","getElementById","createRenderer","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","sanitizer","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","DomSanitizer","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","AsmComponentService","logoutCustomerSupportAgentAndCustomer","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","isCustomerEmulationSessionInProgress","mergeMap","userToken","AsmMainUiComponent","asmService","asmComponentService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","handleCustomerSessionStartRedirection","loginCustomerSupportAgent","password","authorizeCustomerSupporAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","updateAsmUiState","visible","AsmService","AsmRootComponent","asmUi$","getAsmUiState","queryParamMap","queryParams","showUi","expandUi","expanded","collapseUi","CSAgentLoginFormComponent","submitClicked","csAgentTokenLoading","submitEvent","onSubmit","isNotValid","CustomerSelectionComponent","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","asm","maxResults","selectCustomerFromList","customer","onDocumentClick","resultList","contains","closeResults","host","(document:click)","AsmConfig","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","resetTimer","agentSessionTimer","startingDelayInSeconds","FormatTimerPipe","transform","totalSeconds","minutes","seconds","Pipe","CustomerEmulationComponent","isCustomerEmulationSessionInProgress$","AsmModule","AsmComponent","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","isLevel","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","onError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentStatus","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","moduleComponents","ɵ1","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","submit","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","ViewModes","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","infiniteScroll","active","setViewMode","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","ProductGridItemComponent","ProductListItemComponent","defaultScrollConfig","productLimit","showMoreButton","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","isActive","thumbnail","zoom","GALLERY","ProductImagesModule","ScheduleComponent","storeDataService","displayDays","changes","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","totalResults","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","store","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","history","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","hasPage","ɵ0$2","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","isEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                consent.consentState == null ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","export enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      // force hasStock and quanity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  CartVoucherService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  submitDisabled$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n\n  private subscription = new Subscription();\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = combineLatest([\n      this.cartService.getActive(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(\n        ([cart, userId]: [Cart, string]) =>\n          (this.cartId =\n            userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n      ),\n      map(([cart]: [Cart, string]) => cart)\n    );\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.submitDisabled$ = combineLatest([\n      this.cartIsLoading$,\n      this.form.valueChanges.pipe(\n        startWith(true),\n        map(() => this.form.valid)\n      ),\n      this.cartVoucherService.getAddVoucherResultLoading(),\n    ]).pipe(\n      map(\n        ([cartIsLoading, btnEnabled, addVoucherIsLoading]) =>\n          cartIsLoading || !btnEnabled || addVoucherIsLoading\n      )\n    );\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  applyVoucher(): void {\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  set items(_items) {\n    this._items = _items;\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  private _items: Item[] = [];\n\n  get items(): Item[] {\n    return this._items;\n  }\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  // TODO remove for 2.0 - left to keep backward compatibility\n  ngOnInit(): void {}\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getActive().pipe(\n      map(cart => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n  CartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/index';\nimport { CheckoutStepType } from '../../model/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...sortedTitles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { ComponentFactory, Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = new Map<\n    string,\n    TemplateRef<any> | ComponentFactory<any>\n  >();\n  private templatesRefsBefore = new Map<\n    string,\n    TemplateRef<any> | ComponentFactory<any>\n  >();\n  private templatesRefsAfter = new Map<\n    string,\n    TemplateRef<any> | ComponentFactory<any>\n  >();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: ComponentFactory<any>,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: TemplateRef<any> | ComponentFactory<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore.set(outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs.set(outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter.set(outlet, templateOrFactory);\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> | ComponentFactory<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    return templateRef;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    this.renderTemplate(OutletPosition.BEFORE);\n    this.renderTemplate(OutletPosition.REPLACE, true);\n    this.renderTemplate(OutletPosition.AFTER);\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): void {\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template && template instanceof ComponentFactory) {\n      this.vcr.createComponent(template);\n    } else if ((template && template instanceof TemplateRef) || replace) {\n      this.vcr.createEmbeddedView(\n        <TemplateRef<any>>template || this.templateRef,\n        {\n          $implicit: this._context,\n        }\n      );\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = JSON.stringify(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const html = `<script type=\"application/ld+json\">${JSON.stringify(\n        schema\n      )}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentGiven(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentGiven(consentTemplate: ConsentTemplate): boolean {\n    return (\n      Boolean(consentTemplate.currentConsent) &&\n      Boolean(consentTemplate.currentConsent.consentGivenDate) &&\n      !Boolean(consentTemplate.currentConsent.consentWithdrawnDate)\n    );\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentWithdrawn(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentWithdrawn(consentTemplate: ConsentTemplate): boolean {\n    if (Boolean(consentTemplate.currentConsent)) {\n      return Boolean(consentTemplate.currentConsent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/index';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletModule, OutletRefModule } from '../../cms-structure/index';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable } from '@angular/core';\nimport { AuthService, RoutingService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    private authService: AuthService,\n    private routingService: RoutingService\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.authService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.authService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.authService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected asmService: AsmService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.authService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.authService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.authService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.authService.authorizeCustomerSupporAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.authService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.authService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.asmService.updateAsmUiState({ visible: false });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AsmService, AsmUi } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm',\n  templateUrl: './asm-root.component.html',\n})\nexport class AsmRootComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  asmUi$: Observable<AsmUi>;\n\n  constructor(\n    protected asmService: AsmService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.asmUi$ = this.asmService.getAsmUiState();\n\n    this.subscription.add(\n      this.activatedRoute.queryParamMap.subscribe(queryParams => {\n        if (queryParams.get('asm') === 'true') {\n          this.showUi();\n        }\n      })\n    );\n  }\n\n  expandUi(): void {\n    this.asmService.updateAsmUiState({ expanded: true });\n  }\n\n  collapseUi(): void {\n    this.asmService.updateAsmUiState({ expanded: false });\n  }\n\n  private showUi(): void {\n    this.asmService.updateAsmUiState({ visible: true });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, OnInit, Output, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList', { static: false }) resultList: ElementRef;\n  @ViewChild('searchTerm', { static: false }) searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmRootComponent } from './asm-root/asm-root.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AsmComponent: {\n          component: AsmRootComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmRootComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  exports: [AsmRootComponent],\n  entryComponents: [AsmRootComponent],\n})\nexport class AsmModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    RouterModule.forChild([\n      {\n        path: 'guest/order/:orderCode',\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes => codes.map(code => this.productService.get(code)))\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        return sortedTitles;\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template.description,\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AsmModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    AsmModule.forRoot(),\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}