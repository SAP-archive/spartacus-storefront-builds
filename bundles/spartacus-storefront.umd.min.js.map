{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/web-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/launch-dialog/config/default-launch-config.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render-strategy.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render-strategy.service.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render-strategy.service.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","IconResourceType","SkipLinkScrollPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","IconConfig","DomSanitizer","Injectable","providedIn","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","provide","useExisting","Config","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","pop","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","CmsMappingService","platformId","missingComponents","getComponentMapping","componentType","componentConfig","console","warn","isComponentEnabled","isPlatformServer","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","childRoutes","CmsConfig","Inject","args","PLATFORM_ID","ComponentHandler","ComponentHandlerService","handlers","invalidMappings","resolve","componentMapping","matchedHandlers","filter","handler","hasMatch","sort","a","getPriority","isDevMode","has","getLauncher","viewContainerRef","elementInjector","launcher","Optional","CmsInjectorService","cmsMapping","injector","getCmsData","uid","parentInjector","data$","get","CmsService","getComponentData","getInjector","configProviders","Injector","CmsComponentData","useValue","parent","ComponentWrapperDirective","vcr","cmsMappingService","dynamicAttributeService","componentHandler","cmsInjector","cmsService","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","isLaunchInSmartEdit","addDynamicAttributes","properties","ViewContainerRef","DynamicAttributeService","Directive","DefaultComponentHandler","Observable","subscriber","factory","getComponentFactory","createComponent","undefined","location","destroy","ComponentFactoryResolver","resolveComponentFactory","CxApiService","auth","cart","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","ActiveCartService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","WebComponentHandler","platform","loadedWebComponents","webElement","active","disposeFunc","remove","initWebComponent","then","elementName","cmsComponentData","cxApi","element","parentElement","Promise","path","script","setAttribute","body","isPlatformBrowser","onload","chainedOnload_1","DOCUMENT","PageComponentModule","multi","AsmComponentService","authService","asmAuthService","routingService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","of","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","globalMessageService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","switchMap","access_token","handleCustomerSessionStartRedirection","GlobalMessageType","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","HostBinding","encapsulation","ViewEncapsulation","None","BaseFocusService","BaseFocusDirective","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","tagName","toLowerCase","hasAttribute","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","HostListener","BlockFocusDirective","block","PersistFocusService","focus","Map","group","set","clear","delete","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","event","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","querySelectorAll","findFirstFocusable","autofocus","el","isHidden","findFocusable","locked","invisible","suffix","map","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","EventEmitter","emit","Output","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","v","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","shouldUnlockAfterAutofocus","setTimeout","toString","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","DIALOG_TYPE","LAUNCH_CALLER","SkipLinkService","keyboardFocusService","skipLinks$","BehaviorSubject","getSkipLinks","found","skipLinks","skipLink","existing","splice","getSkipLinkIndexInArray","i18nKey","position","scrollToTarget","HTMLElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_LAUNCH_CONFIG","launch","ASM","outlet","SKIP_LINKS","LaunchRenderStrategy","renderedCallers","shouldRender","caller","some","_config","LaunchDialogService","renderStrategies","launchConfig","findConfiguration","getStrategy","render","strategy","match","LaunchConfig","AsmEnablerService","launchDialogService","load","isEnabled","addUi","isLaunched","isUsedBefore","setItem","params","getItem","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","deps","asmEnablerService","BREAKPOINT","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","markForCheck","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","floor","seconds","slice","Pipe","name","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","subscription","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","controls","valueChanges","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","PaginationItemType","PaginationNavigationPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","code","width","_reversedFormats","sortedFormats","reverse","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","container","handleMissing","loadHandler","errorHandler","MediaConfig","MediaModule","forRoot","ngModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","step","allowZero","readonly","input","control","markAsDirty","decrement","getControl","_control$","startWith","getValidCount","emitEvent","max","ItemCounterModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","_","number","label","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","BEFORE","AFTER","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","fromEvent","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","FormErrorsComponent","_control","errors$","statusChanges","errors","entries","invalid","dirty","touched","FormErrorsModule","ViewConfigModule","ViewConfigModule_1","view","ViewConfig","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entryNumber","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","DeliveryModePreferences","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","isLevel","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","getLoaded","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","slots","selectiveCart","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","features","CartComponentModule","CartModule","CheckoutStepType","CheckoutConfig","OutletPosition","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","catch","verifyAddress","countrySelected","regionSelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","payment","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","templateOrFactory","REPLACE","store","stacked","templateRef","removeValueOrAll","newValue","val","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","componentFactoryResolver","outletService","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","InlineRenderStrategy","inline","OutletRefDirective","tpl","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","first","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletRendererService","outletRefs","register","cxOutlet","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","cxOutletDefer","build","changes","hostElement","getHostElement","buildOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","OutletModule","OutletRenderStrategy","RoutingRenderStrategy","_caller","LaunchDialogModule","LaunchDialogModule_1","provideConfig","LayoutModule","PageSlotComponent","cdRef","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","addSmartEditContract","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","replace","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","getNextPageContext","shouldReloadCmsData","isFeatureEnabled","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","typeCode","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","paymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","observeOn","asyncScheduler","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","querySelector","navBar","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","y","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductDetailOutlets","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductFacetNavigationComponent","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","toggleFacet","getVisibleFacetValues","values","topValueCount","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","viewStore","prepareRouteUrl","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(fontawesomeIconConfig),\n    { provide: IconConfig, useExisting: Config },\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsComponentMapping, CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  private missingComponents: string[] = [];\n\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  public getComponentMapping(componentType: string): CmsComponentMapping {\n    const componentConfig = this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  isComponentEnabled(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getComponentMapping(componentType)?.disableSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    return this.getComponentMapping(componentType)?.childRoutes ?? [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    return this.getComponentMapping(componentType)?.guards ?? [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    return this.getComponentMapping(componentType)?.i18nKeys ?? [];\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Handler, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Handler {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const matchedHandlers = (this.handlers ?? []).filter((handler) =>\n      handler.hasMatch(componentMapping)\n    );\n    if (matchedHandlers.length > 1) {\n      matchedHandlers.sort(\n        (a, b) =>\n          (a.getPriority ? a.getPriority() : 0) -\n          (b.getPriority ? b.getPriority() : 0)\n      );\n    }\n    if (isDevMode() && matchedHandlers.length === 0) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n    return matchedHandlers[matchedHandlers.length - 1];\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsMappingService } from '../../../services/cms-mapping.service';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsMapping: CmsMappingService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsMapping.getComponentMapping(type)?.providers ?? [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsMappingService } from '../../services/cms-mapping.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsMappingService: CmsMappingService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService,\n    protected cmsService: CmsService // TODO: remove, move smartedit detection responsibility to different layer/service\n  ) {}\n\n  ngOnInit() {\n    if (\n      this.cmsMappingService.isComponentEnabled(\n        this.cxComponentWrapper.flexType\n      )\n    ) {\n      this.launchComponent();\n    }\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsMappingService.getComponentMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n      });\n  }\n\n  private decorate(elementRef: ElementRef) {\n    if (this.cmsService.isLaunchInSmartEdit()) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.cxComponentWrapper.properties,\n        elementRef.nativeElement,\n        this.renderer\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      componentMapping.component.prototype\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import {\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ComponentHandler } from './component-handler';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CxApiService } from '../services/cx-api.service';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n/**\n * Component handler responsible for launching cms web components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebComponentHandler implements ComponentHandler {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'string' &&\n      componentMapping.component.includes('#')\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef }> {\n    return new Observable<{ elementRef: ElementRef }>((subscriber) => {\n      let webElement;\n      let active = true;\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const renderer = injector.get(Renderer2);\n\n      const disposeFunc = () => {\n        active = false;\n        if (webElement) {\n          webElement.remove();\n        }\n      };\n\n      this.initWebComponent(componentMapping.component, renderer).then(\n        (elementName) => {\n          if (elementName) {\n            webElement = renderer.createElement(elementName);\n\n            const cmsComponentData = injector.get(CmsComponentData, null);\n\n            webElement.cxApi = {\n              ...injector.get(CxApiService),\n              cmsComponentData,\n            };\n\n            renderer.appendChild(\n              viewContainerRef.element.nativeElement.parentElement,\n              webElement\n            );\n\n            subscriber.next({ elementRef: new ElementRef(webElement) });\n\n            if (!active) {\n              disposeFunc();\n            }\n          }\n        }\n      );\n\n      return disposeFunc;\n    });\n  }\n\n  private initWebComponent(\n    component: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const [path, selector] = component.split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { WebComponentHandler } from './handlers/web-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: WebComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistance key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistance\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked')\n  isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      super.handleFocus(event as KeyboardEvent);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elmenents,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport abstract class LaunchConfig {\n  launch?: {\n    [key: string]: LaunchOptions;\n  };\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Optional elements for other configurations\n   */\n  options?: {\n    /**\n     * Dialog type is used to apply CSS classes\n     */\n    dialogType?: DIALOG_TYPE;\n  };\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { AsmMainUiComponent } from '../../../cms-components/asm/asm-main-ui/asm-main-ui.component';\nimport { SkipLinkComponent } from '../../a11y/skip-link/component/skip-link.component';\nimport { LaunchConfig } from './launch-config';\n\nexport const DEFAULT_LAUNCH_CONFIG: LaunchConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n    SKIP_LINKS: {\n      outlet: 'cx-storefront',\n      component: SkipLinkComponent,\n    },\n  },\n};\n","import { ViewContainerRef } from '@angular/core';\nimport { LaunchDialog, LaunchOptions, LAUNCH_CALLER } from '../config';\n\nexport abstract class LaunchRenderStrategy {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER;\n    element?: any;\n  }> = [];\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ): void;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract match(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(caller: LAUNCH_CALLER, config: LaunchDialog): boolean {\n    return this.renderedCallers.some((el) => el.caller === caller)\n      ? !!config.multi\n      : true;\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER, _config?: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n  }\n}\n","import { Inject, Injectable, ViewContainerRef } from '@angular/core';\nimport {\n  LaunchConfig,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  // Keep a list of rendered elements\n  protected renderedCallers: LAUNCH_CALLER[] = [];\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected launchConfig: LaunchConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(caller: LAUNCH_CALLER, vcr?: ViewContainerRef): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.render(config, caller, vcr);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER): LaunchOptions {\n    return this.launchConfig?.launch[caller];\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return this.renderStrategies.find((strategy) => strategy.match(config));\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { MediaFormatSize } from './media.model';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { MediaComponent } from './media.component';\nimport { MediaConfig } from './media.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n      providers: [\n        {\n          provide: MediaConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap((value) =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(() =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter((loaded) => loaded),\n      switchMap(() => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap((dataLoaded) => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: ` <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container> `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { FormErrorsModule } from '../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  FeatureConfigService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected featureConfig: FeatureConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    private authService: AuthService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn ? cartLoaded && sflLoaded : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart]) => {\n          if (cart.totalItems) {\n            return slots.filter((slot) => slot !== 'EmptyCartMiddleContent');\n          } else if (selectiveCart.totalItems) {\n            return slots.filter(\n              (slot) =>\n                slot !== 'EmptyCartMiddleContent' &&\n                slot !== 'CenterRightContentSlot'\n            );\n          } else {\n            return slots.filter(\n              (slot) =>\n                slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n  Region,\n  UserAddressService,\n  StateUtils,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.paymentForm.get('cardType.code').setValue(card.code);\n  }\n\n  monthSelected(month: string): void {\n    this.paymentForm.get('expiryMonth').setValue(month);\n  }\n\n  yearSelected(year: number): void {\n    this.paymentForm.get('expiryYear').setValue(year);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddressForm\n      .get('region.isocodeShort')\n      .setValue(region.isocodeShort);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          (paymentInfo) => paymentInfo && !!Object.keys(paymentInfo).length\n        )\n      )\n      .subscribe((paymentInfo) => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach((key) => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some((error) => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.addressForm['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    const selectedSub = this.selectedAddress$.subscribe((selected) => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  Config,\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected componentFactoryResolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER,\n    vcr: ViewContainerRef\n  ) {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      vcr.createComponent(template);\n      this.renderedCallers.push({ caller, element: vcr.element });\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  match(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new Map<string, OutletDirective>();\n\n  render(outlet: string): void {\n    if (this.outletRefs.size !== 0) {\n      this.outletRefs.get(outlet).render();\n    }\n  }\n\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.set(cxOutlet, context);\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService?: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n    this.outletRendererService.register(this.cxOutlet, this);\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach((obj) => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n    this.renderedTemplate.push(tmplOrFactory);\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super();\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ) {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n\n      const element = vcr?.element;\n      this.renderedCallers.push({ caller, element });\n    }\n  }\n\n  match(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected routingService: RoutingService) {\n    super();\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER) {\n    this.routingService.go(config);\n  }\n\n  match(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideConfig } from '@spartacus/core';\nimport { DEFAULT_LAUNCH_CONFIG } from './config/default-launch-config';\nimport { LaunchConfig } from './config/launch-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [\n        provideConfig(DEFAULT_LAUNCH_CONFIG),\n        { provide: LaunchConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    tap((slot) => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map((slot) => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig,\n    protected cdRef?: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe((components) => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n    this.cdRef?.markForCheck();\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Config,\n  isFeatureEnabled,\n  ProtectedRoutesGuard,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    @Inject(Config) protected config: any\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService\n                  .getPage(pageContext, this.shouldReloadCmsData())\n                  .pipe(\n                    first(),\n                    switchMap((pageData) =>\n                      pageData\n                        ? this.service.canActivatePage(\n                            pageContext,\n                            pageData,\n                            route,\n                            state\n                          )\n                        : this.service.canActivateNotFoundPage(\n                            pageContext,\n                            route,\n                            state\n                          )\n                    )\n                  )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReloadCmsData(): boolean {\n    return !isFeatureEnabled(this.config, 'cmsPageLoadOnce');\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap((data) =>\n      combineLatest(\n        data.components.split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach((key) => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => Boolean(order)),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe((params) => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap((searchResult) => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach((el) => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map((searchResult) => {\n        return searchResult.facets\n          ? searchResult.facets.filter((facet) => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet: Facet): Facet[] {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : facet.topValueCount\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService, RoutingService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(\n    protected storeDataService: StoreDataService,\n    protected route: ActivatedRoute,\n    protected routingService: RoutingService\n  ) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}