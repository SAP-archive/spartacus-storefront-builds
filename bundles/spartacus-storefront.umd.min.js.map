{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/storefrontlib/src/layout/launch-dialog/config/launch-config.ts","../../../projects/storefrontlib/src/layout/config/layout-config.ts","../../../projects/storefrontlib/src/layout/launch-dialog/services/launch-render.strategy.ts","../../../projects/storefrontlib/src/layout/launch-dialog/services/inline-render.strategy.ts","../../../projects/storefrontlib/src/cms-structure/outlet/outlet.model.ts","../../../projects/storefrontlib/src/layout/launch-dialog/services/launch-dialog.service.ts","../../../projects/storefrontlib/src/cms-structure/outlet/outlet.service.ts","../../../projects/storefrontlib/src/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","../../../projects/storefrontlib/src/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","../../../projects/storefrontlib/src/cms-structure/outlet/outlet-renderer.service.ts","../../../projects/storefrontlib/src/layout/loading/intersection.service.ts","../../../projects/storefrontlib/src/layout/loading/defer-loader.service.ts","../../../projects/storefrontlib/src/cms-structure/outlet/outlet.directive.ts","../../../projects/storefrontlib/src/cms-structure/outlet/outlet.module.ts","../../../projects/storefrontlib/src/layout/launch-dialog/services/outlet-render.strategy.ts","../../../projects/storefrontlib/src/layout/launch-dialog/services/routing-render.strategy.ts","../../../projects/storefrontlib/src/layout/launch-dialog/launch-dialog.module.ts","../../../projects/storefrontlib/src/cms-components/anonymous-consent-management/anonymous-consent-launch-dialog.service.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/keyboard-focus.model.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/base/base-focus.service.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/base/base-focus.directive.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/block/block-focus.directive.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/services/select-focus.util.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/focus.directive.ts","../../../projects/storefrontlib/src/layout/a11y/keyboard-focus/keyboard-focus.module.ts","../../../projects/storefrontlib/src/cms-components/misc/icon/icon.model.ts","../../../projects/storefrontlib/src/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","../../../projects/storefrontlib/src/layout/direction/config/direction.model.ts","../../../projects/storefrontlib/src/cms-components/misc/icon/fontawesome-icon.config.ts","../../../projects/storefrontlib/src/cms-components/misc/icon/icon-loader.service.ts","../../../projects/storefrontlib/src/cms-components/misc/icon/icon.component.ts","../../../projects/storefrontlib/src/cms-components/misc/icon/default-icon.config.ts","../../../projects/storefrontlib/src/cms-components/misc/icon/icon.module.ts","../../../projects/storefrontlib/src/shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component.ts","../../../projects/storefrontlib/src/cms-components/anonymous-consent-management/default-anonymous-consent-layout.config.ts","../../../projects/storefrontlib/src/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","../../../projects/storefrontlib/src/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","../../../projects/storefrontlib/src/shared/components/spinner/spinner.component.ts","../../../projects/storefrontlib/src/shared/components/spinner/spinner.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/consent-management/components/consent-management.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/consent-management/consent-management.module.ts","../../../projects/storefrontlib/src/shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module.ts","../../../projects/storefrontlib/src/shared/components/card/card.component.ts","../../../projects/storefrontlib/src/shared/components/card/card.module.ts","../../../projects/storefrontlib/src/shared/components/carousel/carousel.service.ts","../../../projects/storefrontlib/src/shared/components/carousel/carousel.component.ts","../../../projects/storefrontlib/src/layout/breakpoint/breakpoint.service.ts","../../../projects/storefrontlib/src/shared/components/media/media.service.ts","../../../projects/storefrontlib/src/shared/components/media/media.component.ts","../../../projects/storefrontlib/src/shared/components/media/media.module.ts","../../../projects/storefrontlib/src/shared/components/carousel/carousel.module.ts","../../../projects/storefrontlib/src/shared/components/date-picker/date-picker.component.ts","../../../projects/storefrontlib/src/shared/components/date-picker/date-picker.module.ts","../../../projects/storefrontlib/src/shared/components/date-time-picker/date-time-picker.component.ts","../../../projects/storefrontlib/src/shared/components/date-time-picker/date-time-picker.module.ts","../../../projects/storefrontlib/src/shared/components/form/form-errors/form-errors.component.ts","../../../projects/storefrontlib/src/shared/components/form/form-errors/form-errors.module.ts","../../../projects/storefrontlib/src/shared/components/generic-link/generic-link.component.ts","../../../projects/storefrontlib/src/shared/components/generic-link/generic-link.module.ts","../../../projects/storefrontlib/src/shared/components/item-counter/item-counter.component.ts","../../../projects/storefrontlib/src/shared/components/item-counter/item-counter.module.ts","../../../projects/storefrontlib/src/shared/components/list-navigation/pagination/pagination.model.ts","../../../projects/storefrontlib/src/shared/components/list-navigation/pagination/config/default-pagination.config.ts","../../../projects/storefrontlib/src/shared/components/list-navigation/pagination/config/pagination.config.ts","../../../projects/storefrontlib/src/shared/components/list-navigation/pagination/pagination.builder.ts","../../../projects/storefrontlib/src/shared/components/list-navigation/pagination/pagination.component.ts","../../../projects/storefrontlib/src/shared/components/list-navigation/pagination/pagination.module.ts","../../../projects/storefrontlib/src/shared/components/list-navigation/sorting/sorting.component.ts","../../../projects/storefrontlib/src/shared/components/list-navigation/list-navigation.module.ts","../../../projects/storefrontlib/src/shared/components/media/media.config.ts","../../../projects/storefrontlib/src/shared/components/modal/modal-ref.ts","../../../projects/storefrontlib/src/shared/components/modal/modal.service.ts","../../../projects/storefrontlib/src/shared/components/order-overview/order-overview.component.ts","../../../projects/storefrontlib/src/shared/components/order-overview/order-overview.module.ts","../../../projects/storefrontlib/src/shared/components/replenishment-order-cancellation-dialog/replenishment-order-cancellation-dialog.component.ts","../../../projects/storefrontlib/src/shared/components/replenishment-order-cancellation-dialog/replenishment-order-cancellation-dialog.module.ts","../../../projects/storefrontlib/src/shared/components/split-view/split-view.service.ts","../../../projects/storefrontlib/src/shared/components/split-view/split/split-view.component.ts","../../../projects/storefrontlib/src/shared/components/split-view/view/view.component.ts","../../../projects/storefrontlib/src/shared/components/split-view/split-view.module.ts","../../../projects/storefrontlib/src/cms-components/misc/global-message/global-message.component.ts","../../../projects/storefrontlib/src/cms-components/misc/global-message/global-message.module.ts","../../../projects/storefrontlib/src/cms-components/misc/qualtrics/config/qualtrics-config.ts","../../../projects/storefrontlib/src/cms-components/misc/qualtrics/qualtrics-loader.service.ts","../../../projects/storefrontlib/src/cms-components/misc/qualtrics/qualtrics.component.ts","../../../projects/storefrontlib/src/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","../../../projects/storefrontlib/src/cms-components/misc/qualtrics/qualtrics.module.ts","../../../projects/storefrontlib/src/cms-components/misc/site-context-selector/language-currency.component.ts","../../../projects/storefrontlib/src/cms-structure/page/model/cms-component-data.ts","../../../projects/storefrontlib/src/cms-components/misc/site-context-selector/site-context-component.service.ts","../../../projects/storefrontlib/src/cms-components/misc/site-context-selector/site-context-selector.component.ts","../../../projects/storefrontlib/src/cms-components/misc/site-context-selector/site-context.model.ts","../../../projects/storefrontlib/src/cms-components/misc/site-context-selector/site-context-selector.module.ts","../../../projects/storefrontlib/src/shared/components/star-rating/star-rating.component.ts","../../../projects/storefrontlib/src/shared/components/star-rating/star-rating.module.ts","../../../projects/storefrontlib/src/shared/components/table/table-data-cell/table-data-cell.component.ts","../../../projects/storefrontlib/src/shared/components/table/table-header-cell/table-header-cell.component.ts","../../../projects/storefrontlib/src/shared/components/table/config/default-table.config.ts","../../../projects/storefrontlib/src/shared/components/table/config/table.config.ts","../../../projects/storefrontlib/src/shared/components/table/table-data-cell/table-data-cell.module.ts","../../../projects/storefrontlib/src/shared/components/table/table-header-cell/table-header-cell.module.ts","../../../projects/storefrontlib/src/shared/components/table/table.model.ts","../../../projects/storefrontlib/src/shared/components/table/table-renderer.service.ts","../../../projects/storefrontlib/src/shared/components/table/table.component.ts","../../../projects/storefrontlib/src/shared/components/table/table.module.ts","../../../projects/storefrontlib/src/shared/components/table/table.service.ts","../../../projects/storefrontlib/src/shared/config/view-config.ts","../../../projects/storefrontlib/src/shared/config/view-config.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order-details/order-details.service.ts","../../../projects/storefrontlib/src/shared/services/promotion/promotion.service.ts","../../../projects/storefrontlib/src/shared/utils/validators/custom-form-validators.ts","../../../projects/storefrontlib/src/shared/utils/forms/title-utils.ts","../../../projects/storefrontlib/src/cms-structure/services/feature-modules.service.ts","../../../projects/storefrontlib/src/cms-structure/services/cms-components.service.ts","../../../projects/storefrontlib/src/shared/utils/combined-injector.ts","../../../projects/storefrontlib/src/cms-structure/page/component/services/cms-injector.service.ts","../../../projects/storefrontlib/src/cms-structure/page/component/handlers/component-handler.ts","../../../projects/storefrontlib/src/cms-structure/page/component/services/component-handler.service.ts","../../../projects/storefrontlib/src/cms-structure/page/component/component-wrapper.directive.ts","../../../projects/storefrontlib/src/cms-structure/page/component/handlers/default-component.handler.ts","../../../projects/storefrontlib/src/cms-structure/page/component/handlers/lazy-component.handler.ts","../../../projects/storefrontlib/src/cms-structure/page/component/page-component.module.ts","../../../projects/storefrontlib/src/cms-components/asm/asm-constants.ts","../../../projects/storefrontlib/src/cms-components/asm/services/asm-enabler.service.ts","../../../projects/storefrontlib/src/cms-components/asm/asm-loader.module.ts","../../../projects/storefrontlib/src/cms-components/asm/services/asm-component.service.ts","../../../projects/storefrontlib/src/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","../../../projects/storefrontlib/src/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","../../../projects/storefrontlib/src/cms-components/asm/asm-session-timer/format-timer.pipe.ts","../../../projects/storefrontlib/src/cms-components/asm/asm-toggle-ui/asm-toggle-ui.component.ts","../../../projects/storefrontlib/src/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","../../../projects/storefrontlib/src/cms-components/asm/customer-emulation/customer-emulation.component.ts","../../../projects/storefrontlib/src/cms-components/asm/customer-selection/customer-selection.component.ts","../../../projects/storefrontlib/src/cms-components/asm/default-asm-layout.config.ts","../../../projects/storefrontlib/src/cms-components/asm/asm.module.ts","../../../projects/storefrontlib/src/cms-components/product/current-product.service.ts","../../../projects/storefrontlib/src/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","../../../projects/storefrontlib/src/cms-components/cart/add-to-cart/add-to-cart.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/promotions/promotions.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/promotions/promotions.module.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-coupon/cart-coupon.component.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-coupon/cart-coupon.module.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-shared/cart-shared.module.ts","../../../projects/storefrontlib/src/cms-components/cart/add-to-cart/add-to-cart.module.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-details/cart-details.component.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-details/cart-details.module.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-not-empty.guard.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-page-layout-handler.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-totals/cart-totals.component.ts","../../../projects/storefrontlib/src/cms-components/cart/cart-totals/cart-totals.module.ts","../../../projects/storefrontlib/src/cms-structure/page/page-layout/page-layout-handler.ts","../../../projects/storefrontlib/src/cms-components/cart/mini-cart/mini-cart.component.ts","../../../projects/storefrontlib/src/cms-components/cart/mini-cart/mini-cart.module.ts","../../../projects/storefrontlib/src/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","../../../projects/storefrontlib/src/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","../../../projects/storefrontlib/src/cms-components/cart/save-for-later/save-for-later.component.ts","../../../projects/storefrontlib/src/cms-components/cart/save-for-later/save-for-later.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/model/checkout-step.model.ts","../../../projects/storefrontlib/src/cms-components/cart/cart.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/config/checkout-config.ts","../../../projects/storefrontlib/src/cms-components/checkout/config/default-checkout-config.ts","../../../projects/storefrontlib/src/cms-components/checkout/services/checkout-config.service.ts","../../../projects/storefrontlib/src/cms-components/checkout/guards/checkout-auth.guard.ts","../../../projects/storefrontlib/src/cms-components/checkout/services/checkout-step.service.ts","../../../projects/storefrontlib/src/cms-components/checkout/services/checkout-details.service.ts","../../../projects/storefrontlib/src/cms-components/checkout/services/express-checkout.service.ts","../../../projects/storefrontlib/src/cms-components/checkout/guards/checkout.guard.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/guards/checkout-steps-set.guard.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/checkout-progress/multiline-titles.pipe.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/guards/checkout-details-loaded.guard.ts","../../../projects/storefrontlib/src/cms-components/checkout/guards/not-checkout-auth.guard.ts","../../../projects/storefrontlib/src/cms-components/checkout/guards/delivery-mode-set.guard.ts","../../../projects/storefrontlib/src/cms-components/checkout/guards/payment-details-set.guard.ts","../../../projects/storefrontlib/src/cms-components/checkout/guards/shipping-address-set.guard.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/cost-center/cost-center.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/cost-center/cost-center.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/payment-method/payment-method.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/payment-method/payment-method.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/payment-type/payment-type.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/payment-type/payment-type.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/place-order/default-place-order-spinner-layout.config.ts","../../../projects/storefrontlib/src/cms-components/checkout/services/checkout-replenishment-form-service.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/place-order/place-order.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/place-order/place-order.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/review-submit/review-submit.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/review-submit/review-submit.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/schedule-replenishment-order/schedule-replenishment-order.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/schedule-replenishment-order/schedule-replenishment-order.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/shipping-address/shipping-address.component.ts","../../../projects/storefrontlib/src/cms-components/checkout/components/shipping-address/shipping-address.module.ts","../../../projects/storefrontlib/src/cms-components/checkout/checkout.module.ts","../../../projects/storefrontlib/src/layout/a11y/skip-link/config/skip-link.config.ts","../../../projects/storefrontlib/src/layout/a11y/skip-link/service/skip-link.service.ts","../../../projects/storefrontlib/src/layout/a11y/skip-link/component/skip-link.component.ts","../../../projects/storefrontlib/src/layout/a11y/skip-link/config/default-skip-link.config.ts","../../../projects/storefrontlib/src/layout/a11y/skip-link/directive/skip-link.directive.ts","../../../projects/storefrontlib/src/layout/a11y/skip-link/skip-link.module.ts","../../../projects/storefrontlib/src/layout/config/default-layout.config.ts","../../../projects/storefrontlib/src/layout/direction/config/direction.config.ts","../../../projects/storefrontlib/src/layout/direction/config/default-direction.config.ts","../../../projects/storefrontlib/src/layout/direction/direction.service.ts","../../../projects/storefrontlib/src/layout/direction/direction.module.ts","../../../projects/storefrontlib/src/layout/header/hamburger-menu/hamburger-menu.service.ts","../../../projects/storefrontlib/src/layout/header/hamburger-menu/hamburger-menu.component.ts","../../../projects/storefrontlib/src/layout/header/hamburger-menu/hamburger-menu.module.ts","../../../projects/storefrontlib/src/layout/layout.module.ts","../../../projects/storefrontlib/src/cms-structure/page/slot/page-slot.component.ts","../../../projects/storefrontlib/src/cms-structure/page/slot/page-slot.module.ts","../../../projects/storefrontlib/src/cms-structure/page/page-layout/page-layout.service.ts","../../../projects/storefrontlib/src/cms-structure/page/page-layout/page-layout.component.ts","../../../projects/storefrontlib/src/cms-structure/page/page-layout/page-template.directive.ts","../../../projects/storefrontlib/src/cms-structure/page/page-layout/page-layout.module.ts","../../../projects/storefrontlib/src/cms-structure/pwa/pwa.module-config.ts","../../../projects/storefrontlib/src/cms-structure/pwa/services/add-to-home-screen.service.ts","../../../projects/storefrontlib/src/cms-structure/pwa/components/add-to-home-screen.component.ts","../../../projects/storefrontlib/src/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","../../../projects/storefrontlib/src/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","../../../projects/storefrontlib/src/cms-structure/pwa/pwa.module.ts","../../../projects/storefrontlib/src/cms-structure/seo/html-lang-provider.ts","../../../projects/storefrontlib/src/cms-structure/seo/seo-meta.service.ts","../../../projects/storefrontlib/src/cms-structure/seo/structured-data/json-ld-script.factory.ts","../../../projects/storefrontlib/src/cms-structure/seo/structured-data/json-ld.directive.ts","../../../projects/storefrontlib/src/cms-structure/seo/structured-data/builders/tokens.ts","../../../projects/storefrontlib/src/cms-structure/seo/structured-data/structured-data.factory.ts","../../../projects/storefrontlib/src/cms-structure/seo/structured-data/structured-data.module.ts","../../../projects/storefrontlib/src/cms-structure/seo/seo.module.ts","../../../projects/storefrontlib/src/layout/main/storefront.component.ts","../../../projects/storefrontlib/src/layout/main/main.module.ts","../../../projects/storefrontlib/src/cms-structure/services/cms-guards.service.ts","../../../projects/storefrontlib/src/cms-structure/services/cms-i18n.service.ts","../../../projects/storefrontlib/src/cms-structure/services/cms-routes-impl.service.ts","../../../projects/storefrontlib/src/cms-structure/services/cms-routes.service.ts","../../../projects/storefrontlib/src/cms-structure/guards/cms-page-guard.service.ts","../../../projects/storefrontlib/src/cms-structure/guards/cms-page.guard.ts","../../../projects/storefrontlib/src/cms-structure/routing/cms-route/add-cms-route.ts","../../../projects/storefrontlib/src/cms-structure/routing/cms-route/cms-route.module.ts","../../../projects/storefrontlib/src/cms-structure/routing/default-routing-config.ts","../../../projects/storefrontlib/src/cms-structure/routing/routing.module.ts","../../../projects/storefrontlib/src/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","../../../projects/storefrontlib/src/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","../../../projects/storefrontlib/src/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","../../../projects/storefrontlib/src/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","../../../projects/storefrontlib/src/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","../../../projects/storefrontlib/src/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","../../../projects/storefrontlib/src/cms-structure/utils/cms-structure.model.ts","../../../projects/storefrontlib/src/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","../../../projects/storefrontlib/src/cms-structure/utils/cms-structure.util.ts","../../../projects/storefrontlib/src/cms-components/content/banner-carousel/banner-carousel.component.ts","../../../projects/storefrontlib/src/cms-components/content/banner-carousel/banner-carousel.module.ts","../../../projects/storefrontlib/src/cms-components/content/banner/banner.component.ts","../../../projects/storefrontlib/src/cms-components/content/banner/banner.module.ts","../../../projects/storefrontlib/src/cms-components/content/link/link.component.ts","../../../projects/storefrontlib/src/cms-components/content/link/link.module.ts","../../../projects/storefrontlib/src/cms-components/content/paragraph/paragraph.component.ts","../../../projects/storefrontlib/src/cms-components/content/paragraph/paragraph.module.ts","../../../projects/storefrontlib/src/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","../../../projects/storefrontlib/src/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/address-book/address-book.component.service.ts","../../../projects/storefrontlib/src/cms-components/myaccount/address-book/address-book.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/address-book/address-book.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/close-account/close-account.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/forgot-password/forgot-password.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/forgot-password/forgot-password.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/amend-order.model.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/amend-order.service.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order-details/order-details.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order-history/order-history.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order-history/order-history.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/replenishment-order-details/default-replenishment-order-cancellation-layout.config.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/replenishment-order-details/replenishment-order-cancellation/replenishment-order-cancellation-launch-dialog.service.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/replenishment-order-details/replenishment-order-cancellation/replenishment-order-cancellation.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/replenishment-order-details/replenishment-order-details.service.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/replenishment-order-details/replenishment-order-details.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/replenishment-order-history/replenishment-order-history.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/replenishment-order-history/replenishment-order-history.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/return-request-detail/return-request.service.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/order/order.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/payment-methods/payment-methods.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/payment-methods/payment-methods.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/reset-password/reset-password-form.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/reset-password/reset-password.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/update-email/update-email.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/update-email/update-email.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/update-password/update-password.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/update-profile/update-profile.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/update-profile/update-profile.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","../../../projects/storefrontlib/src/cms-components/myaccount/my-coupons/my-coupons.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/my-coupons/my-coupons.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/notification-preference/notification-preference.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/notification-preference/notification-preference.module.ts","../../../projects/storefrontlib/src/cms-components/myaccount/my-interests/my-interests.component.ts","../../../projects/storefrontlib/src/cms-components/myaccount/my-interests/my-interests.module.ts","../../../projects/storefrontlib/src/cms-components/navigation/breadcrumb/breadcrumb.component.ts","../../../projects/storefrontlib/src/cms-components/navigation/breadcrumb/breadcrumb.module.ts","../../../projects/storefrontlib/src/cms-components/navigation/navigation/navigation.service.ts","../../../projects/storefrontlib/src/cms-components/navigation/category-navigation/category-navigation.component.ts","../../../projects/storefrontlib/src/cms-components/navigation/navigation/navigation-ui.component.ts","../../../projects/storefrontlib/src/cms-components/navigation/navigation/navigation.component.ts","../../../projects/storefrontlib/src/cms-components/navigation/navigation/navigation.module.ts","../../../projects/storefrontlib/src/cms-components/navigation/category-navigation/category-navigation.module.ts","../../../projects/storefrontlib/src/cms-components/navigation/footer-navigation/footer-navigation.component.ts","../../../projects/storefrontlib/src/cms-components/navigation/footer-navigation/footer-navigation.module.ts","../../../projects/storefrontlib/src/cms-components/navigation/search-box/search-box-component.service.ts","../../../projects/storefrontlib/src/cms-components/navigation/search-box/search-box.component.ts","../../../projects/storefrontlib/src/cms-components/navigation/search-box/highlight.pipe.ts","../../../projects/storefrontlib/src/cms-components/navigation/search-box/search-box.module.ts","../../../projects/storefrontlib/src/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","../../../projects/storefrontlib/src/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","../../../projects/storefrontlib/src/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","../../../projects/storefrontlib/src/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","../../../projects/storefrontlib/src/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","../../../projects/storefrontlib/src/cms-components/order-confirmation/guards/order-confirmation.guard.ts","../../../projects/storefrontlib/src/cms-components/order-confirmation/order-confirmation.module.ts","../../../projects/storefrontlib/src/cms-components/order-confirmation/replenishment-order-confirmation.module.ts","../../../projects/storefrontlib/src/cms-components/product/carousel/product-carousel.service.ts","../../../projects/storefrontlib/src/cms-components/product/carousel/product-carousel/product-carousel.component.ts","../../../projects/storefrontlib/src/cms-components/product/carousel/product-carousel/product-carousel.module.ts","../../../projects/storefrontlib/src/cms-components/product/carousel/product-references/product-references.component.ts","../../../projects/storefrontlib/src/cms-components/product/carousel/product-references/product-references.module.ts","../../../projects/storefrontlib/src/cms-components/product/config/default-scroll-config.ts","../../../projects/storefrontlib/src/cms-components/product/product-images/product-images.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-images/product-images.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-intro/product-intro.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-intro/product-intro.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-view/product-view.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/container/product-list-component.service.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/container/product-list.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-facet-navigation/facet.model.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-list-item/product-list-item.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-variants/product-variants.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-variants/guards/product-variant.guard.ts","../../../projects/storefrontlib/src/cms-components/product/product-variants/product-variants.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-outlets.model.ts","../../../projects/storefrontlib/src/cms-components/product/product-list/product-list.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-summary/product-summary.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-summary/product-summary.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","../../../projects/storefrontlib/src/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","../../../projects/storefrontlib/src/cms-components/product/product-tabs/product-tabs.module.ts","../../../projects/storefrontlib/src/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","../../../projects/storefrontlib/src/cms-components/product/stock-notification/stock-notification.component.ts","../../../projects/storefrontlib/src/cms-components/product/stock-notification/stock-notification.module.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/schedule-component/schedule.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/store-finder/store-finder.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","../../../projects/storefrontlib/src/cms-components/storefinder/store-finder.module.ts","../../../projects/storefrontlib/src/cms-components/user/checkout-login/checkout-login.component.ts","../../../projects/storefrontlib/src/cms-components/user/checkout-login/checkout-login.module.ts","../../../projects/storefrontlib/src/cms-components/user/login-form/login-form.component.ts","../../../projects/storefrontlib/src/cms-components/user/login-form/login-form.module.ts","../../../projects/storefrontlib/src/cms-components/user/login-register/login-register.component.ts","../../../projects/storefrontlib/src/cms-components/user/login-register/login-register.module.ts","../../../projects/storefrontlib/src/cms-components/user/login-route/login.guard.ts","../../../projects/storefrontlib/src/cms-components/user/login-route/login-route.module.ts","../../../projects/storefrontlib/src/cms-components/user/login/login.component.ts","../../../projects/storefrontlib/src/cms-components/user/login/login.module.ts","../../../projects/storefrontlib/src/cms-components/user/logout/logout.guard.ts","../../../projects/storefrontlib/src/cms-components/user/logout/logout.module.ts","../../../projects/storefrontlib/src/cms-components/user/register/register.component.ts","../../../projects/storefrontlib/src/cms-components/user/register/register.module.ts","../../../projects/storefrontlib/src/cms-components/user/user.module.ts","../../../projects/storefrontlib/src/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","../../../projects/storefrontlib/src/cms-components/wish-list/components/wish-list/wish-list.component.ts","../../../projects/storefrontlib/src/cms-components/wish-list/wish-list.module.ts","../../../projects/storefrontlib/src/cms-components/cms-lib.module.ts","../../../projects/storefrontlib/src/cms-pages/product-details-page/product-details-url-matcher.ts","../../../projects/storefrontlib/src/cms-pages/product-details-page/product-details-page.module.ts","../../../projects/storefrontlib/src/cms-pages/product-listing-page/product-listing-url-matcher.ts","../../../projects/storefrontlib/src/cms-pages/product-listing-page/product-listing-page.module.ts","../../../projects/storefrontlib/src/events/page/page.events.ts","../../../projects/storefrontlib/src/events/cart/cart-page.events.ts","../../../projects/storefrontlib/src/events/cart/cart-page-event.builder.ts","../../../projects/storefrontlib/src/events/cart/cart-page-event.module.ts","../../../projects/storefrontlib/src/events/page/page-event.builder.ts","../../../projects/storefrontlib/src/events/page/page-event.module.ts","../../../projects/storefrontlib/src/events/product/product-page.events.ts","../../../projects/storefrontlib/src/events/product/product-page-event.builder.ts","../../../projects/storefrontlib/src/events/product/product-page-event.module.ts","../../../projects/storefrontlib/src/recipes/config/default-media.config.ts","../../../projects/storefrontlib/src/recipes/config/layout-config.ts","../../../projects/storefrontlib/src/recipes/config/static-cms-structure.ts","../../../projects/storefrontlib/src/events/events.module.ts","../../../projects/storefrontlib/src/recipes/storefront-foundation.module.ts","../../../projects/storefrontlib/src/recipes/storefront.module.ts","../../../projects/storefrontlib/src/recipes/b2c-storefront.module.ts","../../../projects/storefrontlib/src/utils/form-utils.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__values","o","s","m","i","__read","r","ar","error","__spread","arguments","concat","DIALOG_TYPE","LAUNCH_CALLER","BREAKPOINT","Injectable","args","providedIn","useExisting","Config","LaunchRenderStrategy","document","rendererFactory","renderedCallers","dialogClasses","popoverClasses","popoverCenterClasses","popoverCenterBackdropClasses","sidebarEndClasses","sidebarStartClasses","renderer","createRenderer","shouldRender","caller","config","Boolean","component","some","el","multi","applyClasses","dialogType","classes","DIALOG","addClass","POPOVER","POPOVER_CENTER","POPOVER_CENTER_BACKDROP","SIDEBAR_END","SIDEBAR_START","classes_1","classes_1_1","newClass","location","nativeElement","remove","filter","_a","removeClass","getPriority","Inject","DOCUMENT","RendererFactory2","InlineRenderStrategy","componentFactoryResolver","_this","_super","render","vcr","template","resolveComponentFactory","createComponent","element","of","isDevMode","console","warn","hasMatch","inline","ComponentFactoryResolver","OutletPosition","LaunchDialogService","renderStrategies","layoutConfig","_dialogClose","BehaviorSubject","undefined","_dataSubject","defineProperty","asObservable","launch","data","findConfiguration","getStrategy","clear","closeDialog","reason","resolveApplicable","LayoutConfig","OutletService","features","templatesRefs","_b","BEFORE","Map","REPLACE","AFTER","add","outlet","templateOrFactory","position","store","newValue","get","set","stacked","templateRef","removeValueOrAll","has","delete","existing","isLevel","val","FeatureConfigService","OutletRefDirective","tpl","outletService","ngOnInit","cxOutletRef","cxOutletPos","ngOnDestroy","Directive","selector","TemplateRef","Input","NgModule","imports","CommonModule","declarations","exports","OutletRendererService","outletRefs","size","register","cxOutlet","context","getOutletRef","pipe","map","IntersectionService","isIntersected","options","intersects","first","Observable","observer","intersectOptions","rootMargin","getRootMargin","threshold","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","distinctUntilChanged","deferredLoading","intersectionMargin","DeferLoaderService","platformId","intersectionService","globalLoadStrategy","strategy","DeferLoadingStrategy","INSTANT","load","shouldLoadInstantly","deferLoading","elementLoadingStrategy","isPlatformServer","DEFER","decorators","type","PLATFORM_ID","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","renderedComponents","outletContext$","ReplaySubject","loaded","EventEmitter","subscription","Subscription","unsubscribe","cxOutletDefer","build","ngOnChanges","changes","cxOutletContext","emit","hostElement","getHostElement","subscribe","buildOutlet","templates","includes","isArray","components","forEach","obj","tmplOrFactory","ComponentFactory","getComponentInjector","view","createEmbeddedView","$implicit","markForCheck","contextData","reference","context$","Injector","providers","provide","OutletContextData","useValue","parent","injector","HTMLElement","parentNode","complete","ViewContainerRef","Output","OutletRenderStrategy","template_1","outletDirective","reverse","find","componentType","tap","RoutingRenderStrategy","routingService","_caller","go","cxRoute","RoutingService","LaunchDialogModule","forRoot","ngModule","AnonymousConsentLaunchDialogService","launchDialogService","openDialog","openElement","ANONYMOUS_CONSENT","combineLatest","dialogClose","close","comp","focus","destroy","TrapFocus","FOCUS_ATTR","FOCUS_GROUP_ATTR","BaseFocusDirective","elementRef","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","host","tagName","toLowerCase","hasAttribute","ElementRef","BaseFocusService","HostBinding","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","event","isNavigating","metaKey","code","target","HostListener","BlockFocusDirective","block","GLOBAL_GROUP","PersistFocusService","group","key","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","isHidden","findFocusable","locked","invisible","suffix","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","c","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","start","end","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","setTimeout","setAttribute","shouldUnlockAfterAutofocus","toString","Renderer2","KeyboardFocusService","FocusDirective","directives","ICON_TYPE","AnonymousConsentManagementBannerComponent","anonymousConsentsService","anonymousConsentLaunchDialogService","subscriptions","bannerVisible$","isBannerVisible","viewDetails","hideBanner","dialog","allowAll","giveAllConsents","toggleBannerDismissed","Component","AnonymousConsentsService","IconResourceType","DirectionMode","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","PENCIL","CLOCK","TRASH","ACTIVE","ON","OFF","LINK_OUT","SORT_DOWN","SORT","resources","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getFlipDirection","flipDirection","getStyleClasses","iconType","resourceType","res","types","svgResource","addLinkResource","resource","findResource","head","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","IconConfig","DomSanitizer","IconComponent","iconLoader","setIcon","addStyleClasses","flipIcon","iconDirection","flipAtLtr","LTR","flipAtRtl","RTL","styleClasses","cls","split","_c","defaultIconConfig","provideDefaultConfig","AnonymousConsentDialogComponent","role","modal","showLegalDescription","iconTypes","requiredConsents","focusConfig","anonymousConsents","showLegalDescriptionInDialog","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","rejectAll","take","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","AnonymousConsentsConfig","defaultAnonymousConsentLayoutConfig","AnonymousConsentOpenDialogComponent","ViewChild","I18nModule","FeaturesConfigModule","KeyboardFocusModule","provideConfig","cmsComponents","entryComponents","SpinnerComponent","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","globalMessageService","anonymousConsentsConfig","authService","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","withLatestFrom","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","success","onConsentGivenSuccess","resetWithdrawConsentProcessState","skipWhile","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","GlobalMessageType","MSG_TYPE_CONFIRMATION","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","loading","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","UserConsentService","GlobalMessageService","AuthService","FormsModule","ReactiveFormsModule","SpinnerModule","IconModule","guards","AuthGuard","ConsentManagementModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","floor","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","changeDetection","ChangeDetectionStrategy","OnPush","BreakpointService","platform","breakpoint$","isPlatformBrowser","getBreakpoint","innerWidth","fallbackBreakpoint","_breakpoints","resolveBreakpointsFromConfig","getSize","breakpoint","getMaxSize","getMinSize","breakpoints","isDown","br","slice","isUp","isEqual","keys","sort","prev","max","breakpointConfig","min","windowWidth","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","mediaFormats","a","width","_reversedFormats","sortedFormats","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","isInitialized","isLoading","isMissing","container","handleMissing","loadHandler","errorHandler","MediaModule","RouterModule","UrlModule","DatePickerComponent","dateFormatterService","nativeValue","endOfDay","onInput","toModel","onChange","_event","onTouched","registerOnChange","fn","registerOnTouched","writeValue","toNative","getMin","getMax","validate","input","validity","valid","validators","rangeOverflow","cxDateMax","rangeUnderflow","cxDateMin","NG_VALUE_ACCESSOR","forwardRef","NG_VALIDATORS","DatePickerFormatterService","static","read","DateTimePickerComponent","DateTimePickerFormatterService","FormErrorsComponent","_control","control","errors$","statusChanges","startWith","errors","invalid","dirty","touched","GenericLinkComponent","router","PROTOCOL_REGEX","URL_SPLIT","routeParts","isExternalUrl","test","setUrlParts","currentValue","path","queryParams","fragment","getAbsoluteUrl","splitUrl","parseUrl","match","Router","ItemCounterComponent","allowZero","readonly","sub","valueChanges","setValue","getValidCount","emitEvent","markAsDirty","decrement","PaginationItemType","PaginationNavigationPosition","defaultPaginationConfig","pagination","addStart","addEnd","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstituted","GAP","FIRST","assign","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfterLinks","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","SortingComponent","sortListEvent","sortList","sortCode","NgSelectModule","PaginationModule","ModalRef","NgbModalRef","ModalService","ngbModalService","modals","open","content","activeModal","handleModalRemoveEvents","finally","getActiveModal","dismissActiveModal","dismiss","closeActiveModal","NgbModal","OrderOverviewComponent","translation","order","getReplenishmentCodeCardContent","orderCode","translate","textTitle","title","text","getReplenishmentActiveCardContent","_d","textActive","textCancelled","getReplenishmentStartOnCardContent","isoDate","getDate","Date","getReplenishmentFrequencyCardContent","frequency","getReplenishmentNextDateCardContent","getOrderCodeCardContent","getOrderCurrentDateCardContent","getOrderStatusCardContent","status","getPurchaseOrderNumber","poNumber","noneTextTitle","getMethodOfPaymentCardContent","hasPaymentInfo","textAccount","textCard","getCostCenterCardContent","costCenter","textBold","name","unit","getAddressCardContent","deliveryAddress","firstName","lastName","formattedAddress","country","getDeliveryModeCardContent","deliveryMode","description","deliveryCost","formattedValue","getPaymentInfoCardContent","payment","month","expiryMonth","year","expiryYear","textExpires","accountHolderName","cardNumber","getBillingAddressCardContent","billingAddress","givenDate","date","toDateString","TranslationService","CardModule","ReplenishmentOrderCancellationDialogComponent","userReplenishmentOrderService","getReplenishmentOrderDetails","data$","replenishmentOrder","replenishmentOrderCode","getCancelReplenishmentOrderSuccess","onSuccess","params","clearCancelReplenishmentOrderProcessState","cancelReplenishment","cancelReplenishmentOrder","UserReplenishmentOrderService","SplitViewService","defaultHideMode","splitViewCount","_views$","initialState","state","hidden","views","updateState","updateSplitView","getActiveView","getActive","getViewState","activePosition","splice","toggle","forceHide","hide","lastVisible","l","SplitViewComponent","splitService","lastVisibleView","mode","Number","getComputedStyle","getPropertyValue","ViewComponent","cd","disappeared","hiddenChange","_hidden","viewPosition","delayWhen","timer","duration","force","nextPosition","trim","ChangeDetectorRef","GlobalMessageComponent","messageType","messages$","QUALTRICS_EVENT_NAME","QualtricsLoaderService","qsiLoaded$","nativeWindow","fromEvent","qsi$","switchMap","isDataLoaded","api","qsi","qsiApi","initialize","run","reload","API","unload","log","addScript","scriptSource","hasScript","script","defer","source","querySelector","qualtricsLoader","qualtrics","QualtricsConfig","defaultQualtricsConfig","QualtricsComponent","LABELS","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","getInjectedService","nativeName","symbol","isocode","CmsComponentData","Optional","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextType","SiteContextModule","CMSSiteContextComponent","useClass","deps","LanguageCurrencyComponent","StarRatingComponent","disabled","change","initialRate","setRate","rating","saveRate","setRateOnEvent","TableDataCellComponent","model","field","_field","TableHeaderCellComponent","fieldOptions","i18nKey","i18nRoot","_options","cells","_type","_i18nRoot","defaultTableConfig","tableOptions","headerComponent","dataComponent","TableLayout","TableRendererService","structure","thRenderer","getHeaderRenderer","ref","getHeaderOutletRef","tdRenderer","getDataRenderer","getDataOutletRef","outletRef","_e","getHeaderOutletContext","getDataOutletContext","TableConfig","TableComponent","rendererService","_structure","init","verticalLayout","layout","VERTICAL","verticalStackedLayout","VERTICAL_STACKED","horizontalLayout","HORIZONTAL","addTableDebugInfo","launchItem","isCurrentItem","currentItem","property","trackData","_i","JSON","stringify","tableType","OutletModule","TableHeaderCellModule","TableDataCellModule","TableService","buildStructure","defaultStructure","hasTableConfig","buildStructureFromConfig","buildRandomStructure","getTableConfig","table","relevant","findRelevantBreakpoints","closestBreakpoint","buildStructureFromData","logWarning","message","ViewConfigModule","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","consumedEntries","e_2","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","CheckoutService","ActiveCartService","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","password","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","mustBePositive","cxNegativeAmount","noSpecialCharacters","str","char","cxContainsSpecialCharacters","firstControlName","secondControlName","errorName","firstControl","controls","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","FeatureModulesService","configInitializer","lazyModules","componentFeatureMap","initFeatureMap","getStableConfig","_k","featureModulesConfig","featureModules","featureName","featureConfig","module","_f","_g","hasFeatureFor","getCmsMapping","feature","resolveFeature","featureInstance","componentsMappings","getInjectors","injectors","moduleRef","dependencyModuleRefs","featureConfig_1","Error","depsResolve","dependencies","forkJoin","depModuleFunc","resolveDependencyModuleInstance","resolveFeatureModule","resolveModuleInstance","resolvedConfiguration","resolveFeatureConfiguration","featureInjector","featureConfigChunks","ConfigChunk","InjectFlags","Self","featureDefaultConfigChunks","DefaultConfigChunk","deepMerge","merge","values","ConfigInitializerService","LazyModulesService","CmsComponentsService","missingComponents","mappings","mappingResolvers","determineMappings","componentTypes","featureResolvers","componentTypes_1","componentTypes_1_1","staticConfig","getFeatureMappingResolver","mapTo","mappingResolver$","featureComponentMapping","share","getMapping","componentConfig","disableSSR","getDeferLoadingStrategy","getChildRoutes","configs","componentTypes_2","componentTypes_2_1","childRoutes","standardizeChildRoutes","childRoutesConfigs","getGuards","Set","componentTypes_3","componentTypes_3_1","guard","getI18nKeys","i18nKeys","componentTypes_4","componentTypes_4_1","CmsConfig","NOT_FOUND_SYMBOL","CombinedInjector","mainInjector","complementaryInjectors","token","notFoundValue","flags","CmsInjectorService","cmsComponentsService","getCmsData","uid","parentInjector","CmsService","getComponentData","getInjector","configProviders","ComponentHandlerService","handlers","invalidMappings","componentMapping","handler","getLauncher","viewContainerRef","elementInjector","launcher","ComponentHandler","ComponentWrapperDirective","dynamicAttributeService","componentHandler","cmsInjector","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","decorate","addDynamicAttributes","DynamicAttributeService","DefaultComponentHandler","subscriber","factory","getComponentFactory","LazyComponentHandler","defaultHandler","isNotClass","signature","substr","replace","ASM_ENABLED_LOCAL_STORAGE_KEY","AsmEnablerService","isEnabled","addUi","isLaunched","isUsedBefore","localStorage","setItem","getItem","ASM","Location","asmFactory","asmEnablerService","PageComponentModule","APP_INITIALIZER","useFactory","AsmComponentService","csAgentAuthService","logoutCustomerSupportAgentAndCustomer","logoutCustomerSupportAgent","logoutCustomer","initLogout","isCustomerEmulationSessionInProgress","isCustomerEmulated","removeItem","CsAgentAuthService","AsmMainUiComponent","userService","asmComponentService","asmService","startingCustomerSession","customerSupportAgentLoggedIn$","isCustomerSupportAgentLoggedIn","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","isLoggedIn","handleCustomerSessionStartRedirection","isCollapsed$","getAsmUiState","uiState","collapsed","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","authorizeCustomerSupportAgent","logout","startCustomerEmulationSession","customerId","hideUi","encapsulation","ViewEncapsulation","None","UserService","AsmService","AsmSessionTimerComponent","changeDetectorRef","userIdService","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","resetTimer","getUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","UserIdService","FormatTimerPipe","transform","totalSeconds","minutes","seconds","Pipe","AsmToggleUiComponent","isCollapsed","toggleUi","updateAsmUiState","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","markAllAsTouched","FormBuilder","CustomerEmulationComponent","user","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","customerSearch","pageSize","maxResults","selectCustomerFromList","onDocumentClick","resultList","contains","closeResults","(document:click)","defaultAsmLayoutConfig","AsmCoreModule","AsmLoaderModule","FormErrorsModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","product","ProductService","AddedToCartDialogComponent","modalService","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","addedEntryWasMerged$","loaded$","switchMapTo","getEntries","numberOfEntriesBeforeAdd","FormControl","updateOn","addControl","AddToCartComponent","currentProductService","showQuantity","hasStock","addToCartForm","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","componentInstance","getLastEntry","cart$","isStable","PromotionsComponent","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartApplyCouponComponent","CartItemListComponent","selectiveCartService","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","controlName","getControlName","updateable","removeEntry","getControl","SelectiveCartService","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","CartCouponModule","NgbModule","PromotionsModule","ItemCounterModule","OrderSummaryComponent","CartSharedModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","selectiveCartEnabled","cartLoaded$","getLoaded","cartLoaded","sflLoaded","saveForLater","CartComponent","CartNotEmptyGuard","semanticPathService","canActivate","isEmpty","totalItems","SemanticPathService","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","getLoading","slots","selectiveCart","loadingCart","exclude","arr","arg","CartTotalsComponent","PAGE_LAYOUT_HANDLER","InjectionToken","quantity$","deliveryItemsQuantity","total$","totalPrice","MiniCartComponent","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","SaveForLaterComponent","cmsService","isCartEmpty$","saveForLater$","moveToCart","CheckoutStepType","CartDetailsModule","CartTotalsModule","SaveForLaterModule","AddToWishListModule","AddToCartModule","MiniCartModule","CartModule","DeliveryModePreferences","checkoutShippingSteps","SHIPPING_ADDRESS","DELIVERY_MODE","checkoutPaymentSteps","PAYMENT_DETAILS","PAYMENT_TYPE","defaultCheckoutConfig","checkout","steps","routeName","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","compareDeliveryCost","deliveryMode1","deliveryMode2","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","CheckoutConfig","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","cartUser","roles","B2BUserGroup","B2B_CUSTOMER_GROUP","MSG_TYPE_WARNING","isGuestCart","reportAuthGuard","createUrlTree","forced","AuthRedirectService","CheckoutStepService","routingConfigService","steps$","activeStepIndex$","activeStepUrl","getRouteConfig","paths","resetSteps","back","previousUrl","getPreviousCheckoutStepUrl","nextUrl","getNextCheckoutStepUrl","goToStepWithIndex","stepIndex","getStepUrlFromStepRoute","allSteps","getBackBntText","x","disableEnableStep","currentStepType","currentStep","getCheckoutStep","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getCurrentStepIndex","nextStep","previousStep","currentStepUrl","getStepUrlFromActivatedRoute","stepRoute","RoutingConfigService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","checkoutStepService","expressCheckoutService","firstStep$","expressCheckoutPossible","CheckoutOrchestrator","CheckoutOrchestratorComponent","CheckoutOrderSummary","CheckoutOrderSummaryComponent","CheckoutProgressMobileBottomComponent","_steps$","activeStepIndex","CheckoutStepsSetGuard","paymentTypeService","checkoutCostCenterService","route","currentIndex","currentRouteUrl","isAccountPayment","isAccount","isStepSet","getUrl","isPaymentTypeSet","isShippingAddressAndCostCenterSet","isDeliveryModeSet","isPaymentDetailsSet","getSelectedPaymentType","paymentType","getCostCenter","paymentDetails","PaymentTypeService","CheckoutCostCenterService","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","MultiLinePipe","lastIndex","lastIndexOf","CheckoutProgress","CheckoutDetailsLoadedGuard","NotCheckoutAuthGuard","DeliveryModeSetGuard","checkoutStep","PaymentDetailsSetGuard","ShippingAddressSetGuard","CostCenterComponent","userCostCenterService","getActiveCostCenters","costCenters","cartCostCenter","costCenterId","setCostCenter","selectCostCenter","UserCostCenterService","ConfigModule","withConfig","CheckoutCostCenterComponent","DeliveryModeComponent","continueButtonPressed","allowRedirect","backBtnText","deliveryModeId","supportedDeliveryModes$","takeWhile","loadSupportedDeliveryModes","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","CheckoutDeliveryMode","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","cvn","billingAddressForm","line1","line2","town","region","isocodeShort","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","getFullYear","j","toggleDefaultPaymentMethod","toggleSameAsShippingAddress","phone","suggestedAddressModalRef","catch","verifyAddress","countrySelected","PaymentMethodComponent","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","cardLabels","selected","img","actions","header","PaymentFormModule","CheckoutPaymentDetails","PaymentTypeComponent","paymentTypes$","getPaymentTypes","typeSelected$","typeSelected","B2BPaymentTypeEnum","ACCOUNT_PAYMENT","cartPoNumber$","getPoNumber","po","cartPoNumber","changeType","setPaymentType","poNumInput","_poNumberInput","CheckoutPaymentType","defaultPlaceOrderSpinnerLayoutConfig","PLACE_ORDER_SPINNER","CheckoutReplenishmentFormService","defaultFormData","daysOfWeek","DaysOfWeek","MONDAY","nthDayOfMonth","numberOfDays","numberOfWeeks","recurrencePeriod","DAILY","replenishmentStartDate","toISOString","scheduleReplenishmentFormData$","getScheduleReplenishmentFormData","setScheduleReplenishmentFormData","formData","resetScheduleReplenishmentFormData","PlaceOrderComponent","checkoutReplenishmentFormService","daysOfWeekNotChecked$","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","currentOrderType","ORDER_TYPE","PLACE_ORDER","placeOrder","SCHEDULE_REPLENISHMENT_ORDER","scheduleReplenishmentOrder","scheduleReplenishmentFormData","getPlaceOrderLoading","getPlaceOrderSuccess","getPlaceOrderError","orderLoading","orderSuccess","orderError","placedOrder","clearPlaceOrderState","getCurrentOrderType","orderType","WEEKLY","CheckoutPlaceOrder","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","getCountry","loadDeliveryCountries","cc","getShippingAddressCard","countryName","_m","getCostCenterCard","getDeliveryModeCard","getPaymentMethodCard","_o","paragraphs","_h","_j","_l","getPoNumberCard","getPaymentTypeCard","getCheckoutStepUrl","stepType","shippingSteps","paymentSteps","CheckoutReviewOrder","ScheduleReplenishmentOrderComponent","orderTypes","recurrencePeriodType","selectedOrderType$","isMonthly","isWeekly","currentDaysOfWeek","initConfig","changeOrderType","setOrderType","changeNumberOfDays","nDays","changeNumberOfWeeks","nWeeks","changeRecurrencePeriodType","MONTHLY","createNumberStringArray","changeDayOfTheMonth","dayOfMonth","changeReplenishmentStartDate","changeRepeatDays","day","isChecked","foundDay","hasDaysOfWeekChecked","currentDate","fill","CheckoutScheduleReplenishmentOrder","AddressFormComponent","setAsDefaultField","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","subject","addressData","patchValue","regionSelected","addresses$","toggleDefaultAddress","regionsSub","ShippingAddressComponent","addressFormOpened","forceLoader","doneAutoSelect","getAddressesLoading","getSupportedAddresses","selectedAddress$","selectDefaultAddress","textDefault","textShipTo","card","getCardContent","getCostCenterAddresses","selectAddress","textDefaultShippingAddress","textShipToThisAddress","addAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","goPrevious","AddressFormModule","CheckoutShippingAddress","CheckoutOrchestratorModule","CheckoutOrderSummaryModule","CheckoutProgressModule","CheckoutProgressMobileTopModule","CheckoutProgressMobileBottomModule","PaymentTypeModule","DeliveryModeModule","PaymentMethodModule","PlaceOrderModule","ScheduleReplenishmentOrderModule","ReviewSubmitModule","ShippingAddressModule","CostCenterModule","SkipLinkScrollPosition","SkipLinkService","keyboardFocusService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","getSkipLinkIndexInArray","scrollToTarget","parentElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","skipLinkFactory","defaultLayoutConfig","xs","sm","md","lg","xl","defaultDirectionConfig","direction","detect","default","rtlLanguages","DirectionService","configInit","languageService","startsDetecting","setDirection","documentElement","isoCode","getDirection","language","ltrLanguages","initHtmlDirAttribute","directionService","featureConfigService","LanguageService","HamburgerMenuService","isExpanded","events","NavigationStart","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","OutletRefModule","DirectionModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","slot","pendingComponentCount","class","lastPosition","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","slotData","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","pageFoldSlot$","templateName","PageTemplateDirective","useTemplateFromInput","addStyleClass","currentTemplate","classList","PageSlotModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","addEventListener","deferredEvent","enableAddToHomeScreen","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","lang","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","JsonLdScriptFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","_key","SecurityContext","HTML","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","initSeoService","StructuredDataModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","GlobalMessageComponentModule","PwaModule","PageLayoutModule","SeoModule","AnonymousConsentsDialogModule","SkipLinkModule","CmsGuardsService","cmsPageCanActivate","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","childRoutesConfig","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsPageGuardService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","CmsRoutesService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutPaymentType","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","replenishmentConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","replenishmentOrders","replenishmentDetails","defaultRoutingConfig","routing","routes","RoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","CoreRoutingModule","CmsRouteModule","BreadcrumbSchemaBuilder","pageMeta","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","datePublished","getMonth","headline","reviewRating","ProductReviewService","ProductSchemaBuilder","currentProduct","PageSection","provideCmsStructure","componentId","pageSlotPosition","cmsStructure","typeCode","componentIds","buildCmsStructure","pageTemplateSlots","sectionSlots","buildLayoutConfig","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","CarouselModule","RotatingImagesComponent","GenericLinkModule","SimpleResponsiveBannerComponent","BannerComponent","SimpleBannerComponent","CMSLinkComponent","LinkComponent","CMSParagraphComponent","ParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","select","tabNum","scrollTo","offsetTop","history","activeTab","getTitleParams","tabComps","instance","tabTitleParam$","ViewChildren","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AccountAddressBookComponent","CloseAccountModalComponent","translationService","isLoggedIn$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","ForgotPasswordComponent","authConfigService","forgotPasswordForm","userEmail","requestForgotPasswordEmail","getOAuthFlow","OAuthFlow","ResourceOwnerPasswordFlow","AuthConfigService","NotAuthGuard","AmendOrderActionsComponent","styles","continue","amendOrderForm","forwardRoute","AmendOrderType","ValidateQuantityToCancel","cxNoSelectedItemToCancel","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","forChild","ɵ0$1","AmendOrderItemsModule","AmendOrderActionsModule","CancelOrderComponent","CancelOrderModule","CancelOrderConfirmationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderComponent","ReturnOrderModule","ReturnOrderConfirmationModule","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","OrderDetailTotalsComponent","moduleComponents","OrderDetailActionsComponent","ɵ1","OrderOverviewModule","AccountOrderDetailsActionsComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","hasReplenishmentOrder$","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","ListNavigationModule","AccountOrderHistoryComponent","defaultReplenishmentOrderCancellationLayoutConfig","REPLENISHMENT_ORDER","ReplenishmentOrderCancellationLaunchDialogService","ReplenishmentOrderCancellationComponent","replenishmentOrderCancellationLaunchDialogService","replenishmentOrder$","clearReplenishmentOrderDetails","ReplenishmentOrderDetailsService","replenishmentOrderCode$","replenishmentOrderLoad$","loadReplenishmentOrderDetails","ReplenishmentOrderCancellationDialogModule","ReplenishmentDetailItemsComponent","ReplenishmentDetailTotalsComponent","ReplenishmentDetailShippingComponent","ReplenishmentDetailActionsComponent","ReplenishmentDetailOrderHistoryComponent","ReplenishmentOrderHistoryComponent","replenishmentOrders$","getReplenishmentOrderHistoryList","getReplenishmentOrderHistoryListSuccess","fetchReplenishmentOrders","byReplenishmentNumber","byNextOrderDate","loadReplenishmentOrderList","clearReplenishmentOrderList","AccountReplenishmentHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestTotalsComponent","ReturnRequestItemsComponent","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","OrderHistoryModule","OrderDetailsModule","ReplenishmentOrderDetailsModule","OrderCancellationModule","OrderReturnModule","ReplenishmentOrderHistoryModule","ReturnRequestListModule","ReturnRequestDetailModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","UserNotificationPreferenceService","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","UserInterestsService","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","contentPageLabelOrId","node$","NavigationUIComponent","elemRef","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","closest","removeStyle","offsetWidth","setStyle","navs","childNodes","styleClass$","styleClass","NavigationComponent","NavigationModule","CategoryNavigationComponent","FooterNavigationComponent","HAS_SEARCH_RESULT_CLASS","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","isReplenishmentOrderType$","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationThankMessageComponent","ReplenishmentConfirmationMessageComponent","ReplenishmentConfirmationOverviewComponent","ReplenishmentConfirmationItemsComponent","ReplenishmentConfirmationTotalsComponent","ProductCarouselService","loadProduct","convertProduct","displayTitle","displayProductPrices","PRODUCT_SCOPE","productCodes","ProductCarouselComponent","ProductReferencesComponent","cmsComponentData","productReferenceService","productCode$","loadProductReferences","productReferenceTypes","getProductReferences","cleanReferences","referenceType","references","ProductReferenceService","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","StarRatingModule","ViewModes","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","siteContext","routerState","criteria","getCriteriaFromRoute","model$","pluck","routeParams","getQueryFromRouteParams","brandCode","getPageItems","pageNumber","routeCriteria","navigate","queryParamsHandling","relativeTo","setQuery","viewPage","ProductSearchService","CurrencyService","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ViewConfig","FacetGroupCollapsedState","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","window","scroll","isButton","configProductLimit","setConditions","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","increaseVisibleValues","decreaseVisibleValues","topValueCount","topFacets","hasState","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","facetValueName","Default","FacetListComponent","closeList","dialogFocusConfig","_isDialog","expandFacetGroup","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","observeOn","asapScheduler","hasTrigger","launched","isActive$","trigger","FacetListModule","ActiveFacetsModule","ProductRefinementComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","q","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantSizeSelectorComponent","changeSize","SIZE","VariantColorSelectorComponent","changeColor","COLOR","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","ProductVariantGuard","VARIANTS","purchasable","findVariant","variantOptions","_product","VariantStyleSelectorModule","VariantSizeSelectorModule","VariantColorSelectorModule","VariantStyleIconsModule","ProductVariantSelectorComponent","ProductDetailOutlets","InfiniteScrollModule","ProductVariantsModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductListItemComponent","ProductGridItemComponent","outlets","ProductSummaryComponent","ATTRIBUTES","ProductSpecsTabComponent","ProductAttributesComponent","ProductDetailsTabComponent","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","ProductReviewsTabComponent","ProductAttributesModule","ProductDetailsTabModule","ProductReviewsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchConfig","searchQuery","queryText","geolocation","useMyLocation","radius","parseParameters","googleMaps","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderConfig","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","NgbTabsetModule","StoreFinderCoreModule","StoreFinderComponent","StoreFinderPageTemplate","StoreFinderHeaderComponent","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","GuestCheckoutLoginComponent","LoginFormComponent","auth","routeState","prefilledEmail","loginForm","loginUser","authorize","ReturningCustomerLoginComponent","LoginRegisterComponent","loginAsGuest","CheckoutModule","ReturningCustomerRegisterComponent","LoginGuard","cmsPageGuard","reportNotAuthGuard","loginWithRedirect","EMPTY","LoginComponent","LogoutGuard","protectedRoutes","hasPage","getRedirectUrl","shouldProtect","ProtectedRoutesService","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","titleSelected","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","LoginModule","RegisterCustomerComponent","LoginFormModule","LoginRegisterModule","LogoutModule","LoginRouteModule","CheckoutLoginModule","RegisterComponentModule","WishListItemComponent","WishListComponent","wishList$","AnonymousConsentManagementBannerModule","AsmModule","HamburgerMenuModule","CmsParagraphModule","LinkModule","BannerModule","CategoryNavigationModule","FooterNavigationModule","BreadcrumbModule","SearchBoxModule","SiteContextSelectorModule","QualtricsModule","AddressBookModule","ProductListModule","ProductFacetNavigationModule","ProductTabsModule","ProductCarouselModule","ProductReferencesModule","PaymentMethodsModule","UpdateEmailModule","UpdatePasswordModule","UpdateProfileModule","CloseAccountModule","CartComponentModule","TabParagraphContainerModule","OrderConfirmationModule","StoreFinderModule","ProductImagesModule","ProductSummaryModule","ProductIntroModule","CheckoutComponentModule","ForgotPasswordModule","ResetPasswordModule","BannerCarouselModule","UserComponentModule","MyCouponsModule","WishListModule","NotificationPreferenceModule","MyInterestsModule","StockNotificationModule","ReplenishmentOrderConfirmationModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ2","HomePageEvent","PageEvent","CartPageEvent","CartPageEventBuilder","eventService","buildCartPageEvent","pageEvent","semanticRoute","createFrom","ActionsSubject","EventService","_cartPageEventBuilder","PageEventBuilder","buildPageEvent","buildHomePageEvent","getNavigatedEvent","ofType","ROUTER_NAVIGATED","payload","_pageEventBuilder","ProductDetailsPageEvent","CategoryPageResultsEvent","SearchPageResultsEvent","ProductPageEventBuilder","buildSearchPageResultsEvent","buildProductDetailsPageEvent","buildCategoryResultsPageEvent","categories","skip","numberOfResults","categoryName","categoryPage","searchPage","_productPageEventBuilder","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","b2cLayoutConfig","defaultCmsContentProviders","CartPageEventModule","PageEventModule","ProductPageEventModule","StateModule","AuthModule","AnonymousConsentsModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","UserModule","ProductModule","LayoutModule","EventsModule","provideConfigFromMetaTags","StorefrontModule","anchorScrolling","relativeLinkResolution","StoreModule","EffectsModule","StorefrontFoundationModule","MainModule","SmartEditModule","PersonalizationModule","OccModule","ProductDetailsPageModule","ProductListingPageModule","ExternalRoutesModule","B2cStorefrontModule","HttpClientModule","CmsLibModule","FormUtils","deepUpdateValueAndValidity","FormArray","childControl","updateValueAndValidity","onlySelf"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport interface LaunchConfig {\n  [key: string]: LaunchOptions;\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Dialog type is used to apply CSS classes\n   */\n  dialogType?: DIALOG_TYPE;\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  POPOVER_CENTER = 'POPOVER_CENTER',\n  POPOVER_CENTER_BACKDROP = 'POPOVER_CENTER_BACKDROP',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n  ANONYMOUS_CONSENT = 'ANONYMOUS_CONSENT',\n  REPLENISHMENT_ORDER = 'REPLENISHMENT_ORDER',\n  PLACE_ORDER_SPINNER = 'PLACE_ORDER_SPINNER',\n}\n","import { Injectable } from '@angular/core';\nimport { Config, DeferLoadingStrategy } from '@spartacus/core';\nimport { LaunchConfig } from '../launch-dialog/index';\n\n/**\n * The `BREAKPOINT` typing defaults to five default screen names:\n * xs, sm, md, lg, xl.\n *\n * The type can be extended to allow for custom screens, such as XLL or `tablet`.\n *\n * While the screen names are fully configurable, other features might have\n * pre-configured layout settings per screen. Page layouts or table configurations,\n * for example, are driven by screen size. In case you change the screen size or\n * introduce new screen names, you might loose out on these configurations.\n */\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by indication, but keep in mind that\n   * a more precise indication will gain a more positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\nexport interface BreakPoint {\n  /**\n   * The minimum screen width.\n   */\n  min?: number;\n\n  /**\n   * The minimum screen width.\n   */\n  max?: number;\n}\n\n/**\n * The `LayoutBreakPoints` can be used to configure the size of a specific screen. The screen\n * are defined by breakpoints, with a min and/or max value. The breakpoint size is in pixels,\n * hence a numeric value is expected.\n */\nexport type LayoutBreakPoints = {\n  [t in BREAKPOINT]?: number | BreakPoint;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breakpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LayoutConfig {\n  /**\n   * The breakpoint configuration is used to defined various screens. A specific screen name can\n   * be used to further configure certain features, such as the overall layout or specific\n   * component configurations.\n   */\n  breakpoints?: LayoutBreakPoints;\n\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overridden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n\n  launch?: LaunchConfig;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Renderer2,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Applicable, Priority } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  DIALOG_TYPE,\n  LaunchDialog,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config';\n\nexport abstract class LaunchRenderStrategy implements Applicable {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER | string;\n    element?: any;\n    component?: ComponentRef<any>;\n  }> = [];\n\n  /**\n   * Classes to apply to the component when the dialog is a DIALOG\n   */\n  protected dialogClasses = ['d-block', 'fade', 'modal', 'show'];\n  /**\n   * Classes to apply to the component when the dialog is a POPOVER\n   */\n  protected popoverClasses = ['cx-dialog-popover'];\n  /**\n   * Classes to apply to the component when the dialog is a POPOVER_CENTER\n   */\n  protected popoverCenterClasses = ['cx-dialog-popover-center'];\n  /**\n   * Classes to apply to the component when the dialog is a POPOVER_CENTER with a backdrop\n   */\n  protected popoverCenterBackdropClasses = [\n    'cx-dialog-popover-center-backdrop',\n  ];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_END\n   */\n  protected sidebarEndClasses = ['cx-sidebar-end'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_START\n   */\n  protected sidebarStartClasses = ['cx-sidebar-start'];\n\n  protected renderer: Renderer2;\n\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>>;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(\n    caller: LAUNCH_CALLER | string,\n    config: LaunchDialog\n  ): boolean {\n    return (\n      Boolean(config.component) &&\n      (this.renderedCallers.some((el) => el.caller === caller)\n        ? !!config.multi\n        : true)\n    );\n  }\n\n  protected applyClasses(\n    component: ComponentRef<any>,\n    dialogType: DIALOG_TYPE\n  ): void {\n    let classes = [];\n\n    // TODO: make classes configurable\n    switch (dialogType) {\n      case DIALOG_TYPE.DIALOG:\n        classes = this.dialogClasses;\n        this.renderer.addClass(this.document.body, 'modal-open');\n        break;\n      case DIALOG_TYPE.POPOVER:\n        classes = this.popoverClasses;\n        break;\n      case DIALOG_TYPE.POPOVER_CENTER:\n        classes = this.popoverCenterClasses;\n        break;\n      case DIALOG_TYPE.POPOVER_CENTER_BACKDROP:\n        classes = this.popoverCenterBackdropClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_END:\n        classes = this.sidebarEndClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_START:\n        classes = this.sidebarStartClasses;\n        break;\n    }\n\n    for (const newClass of classes) {\n      this.renderer.addClass(component.location.nativeElement, newClass);\n    }\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER | string, config: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller !== caller\n    );\n\n    if ((config as LaunchDialog)?.dialogType === DIALOG_TYPE.DIALOG) {\n      this.renderer.removeClass(this.document.body, 'modal-open');\n    }\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER | string,\n    vcr: ViewContainerRef\n  ): Observable<ComponentRef<any>> {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n\n      const component = vcr.createComponent(template);\n\n      if (config?.dialogType) {\n        this.applyClasses(component, config?.dialogType);\n      }\n\n      this.renderedCallers.push({ caller, element: vcr.element, component });\n\n      return of(component);\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import { Observable } from 'rxjs';\n\nexport enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n\n/**\n * Token for injecting outlet related context to the component rendered in the outlet\n */\nexport abstract class OutletContextData<T = any> {\n  /**\n   * Provides reference of the outlet where component is rendered in\n   */\n  reference: string;\n  /**\n   * Provides position of the outlet\n   */\n  position: OutletPosition;\n  /**\n   * Provides outlet context\n   *\n   * WARNING: Avoid using it if you need to read the latest value of the context. This property\n   *          is only the initial context value and won't be updated when the new context appears.\n   *          Use `context$` observable instead.\n   *\n   * @deprecated since 3.0 - use `context$` observable instead\n   */\n  context: T;\n  /**\n   * Provides outlet context as an observable\n   */\n  context$: Observable<T>;\n}\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { resolveApplicable } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { LayoutConfig } from '../../config/layout-config';\nimport { LaunchOptions, LAUNCH_CALLER } from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  private _dialogClose = new BehaviorSubject<string>(undefined);\n  private _dataSubject = new BehaviorSubject<any>(undefined);\n\n  get data$(): Observable<any> {\n    return this._dataSubject.asObservable();\n  }\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected layoutConfig: LayoutConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef,\n    data?: any\n  ): void | Observable<ComponentRef<any>> {\n    const config = this.findConfiguration(caller);\n    if (config) {\n      const renderer = this.getStrategy(config);\n\n      // Render if the strategy exists\n      if (renderer) {\n        this._dialogClose.next(undefined);\n        this._dataSubject.next(data);\n\n        return renderer.render(config, caller, vcr);\n      }\n    } else if (isDevMode()) {\n      console.warn('No configuration provided for caller ' + caller);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER | string): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  get dialogClose(): Observable<string> {\n    return this._dialogClose.asObservable();\n  }\n\n  closeDialog(reason: string) {\n    this._dialogClose.next(reason);\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER | string): LaunchOptions {\n    if (this.layoutConfig?.launch) {\n      return this.layoutConfig.launch[caller];\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveApplicable(this.renderStrategies, [config]);\n  }\n}\n","import { ComponentFactory, Injectable, TemplateRef } from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any> | ComponentFactory<any>> {\n  /**\n   * @deprecated since 2.1, see #8116\n   */\n  constructor();\n  // tslint:disable-next-line: unified-signatures\n  constructor(features: FeatureConfigService);\n  constructor(protected features?: FeatureConfigService) {}\n\n  private templatesRefs = {\n    [OutletPosition.BEFORE]: new Map<string, T[]>(),\n    [OutletPosition.REPLACE]: new Map<string, T[]>(),\n    [OutletPosition.AFTER]: new Map<string, T[]>(),\n  };\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    const store = this.templatesRefs[position];\n    if (store) {\n      const existing = store.get(outlet) || [];\n      const newValue: T[] = existing.concat([templateOrFactory]);\n      store.set(outlet, newValue);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    const store =\n      this.templatesRefs[position] ||\n      this.templatesRefs[OutletPosition.REPLACE];\n\n    const templateRef: T[] = store.get(outlet);\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    const store =\n      this.templatesRefs[position] ||\n      this.templatesRefs[OutletPosition.REPLACE];\n\n    this.removeValueOrAll(store, outlet, value);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n\n      if (this.features?.isLevel('2.1')) {\n        existing = existing.filter((val) => val !== value);\n      } else {\n        // deprecated since 2.1, see #8116:\n        existing = existing.filter((val) => val === value);\n      }\n\n      store.set(outlet, existing);\n    }\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit, OnDestroy {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  /**\n   * @deprecated since 2.1, see #8201\n   */\n  constructor(tpl: TemplateRef<any>, outletService: OutletService);\n  constructor(\n    tpl: TemplateRef<any>,\n    outletService: OutletService,\n    // tslint:disable-next-line: unified-signatures\n    features: FeatureConfigService\n  );\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService,\n    private features?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n\n  ngOnDestroy() {\n    if (this.features?.isLevel('2.1')) {\n      this.outletService.remove(this.cxOutletRef, this.cxOutletPos, this.tpl);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new BehaviorSubject(new Map<string, OutletDirective>());\n\n  /**\n   * Dynamically render the templates in the specified array\n   *\n   * @param outlet\n   */\n  render(outlet: string): void {\n    if (this.outletRefs.value.size !== 0) {\n      this.outletRefs.value.get(outlet).render();\n    }\n  }\n\n  /**\n   * Register outlet to be available to render dynamically\n   *\n   * @param cxOutlet\n   * @param context\n   */\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.next(this.outletRefs.value.set(cxOutlet, context));\n  }\n  /**\n   * Returns map of outlets\n   *\n   */\n  getOutletRef(outlet: string): Observable<OutletDirective> {\n    return this.outletRefs.asObservable().pipe(\n      map((val) => val.get(outlet)),\n      filter((val) => Boolean(val))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, threshold: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  Injector,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ReplaySubject, Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport {\n  OutletContextData,\n  OutletPosition,\n  USE_STACKED_OUTLETS,\n} from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective<T = any> implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n  public renderedComponents = new Map<\n    OutletPosition,\n    Array<ComponentRef<any> | EmbeddedViewRef<any>>\n  >();\n\n  @Input() cxOutlet: string;\n\n  /**\n   * Context data to be provided to child view of the outlet\n   */\n  @Input() cxOutletContext: T;\n\n  /**\n   * Observable with current outlet context\n   */\n  private readonly outletContext$ = new ReplaySubject<T>(1);\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService: OutletRendererService\n  ) {}\n\n  /**\n   * Renders view for outlet or defers it, depending on the input `cxOutletDefer`\n   */\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.renderedComponents.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n      this.outletRendererService.register(this.cxOutlet, this);\n    }\n    if (changes.cxOutletContext) {\n      this.outletContext$.next(this.cxOutletContext);\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  /**\n   * Renders view for outlet\n   */\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  /**\n   * Renders view in a given position for outlet\n   */\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    const components = [];\n    templates.forEach((obj) => {\n      const component = this.create(obj, position);\n      components.push(component);\n    });\n\n    this.renderedComponents.set(position, components);\n  }\n\n  /**\n   * Renders view based on the given template or component factory\n   */\n  private create(\n    tmplOrFactory: any,\n    position: OutletPosition\n  ): ComponentRef<any> | EmbeddedViewRef<any> {\n    this.renderedTemplate.push(tmplOrFactory);\n\n    if (tmplOrFactory instanceof ComponentFactory) {\n      const component = this.vcr.createComponent(\n        tmplOrFactory,\n        undefined,\n        this.getComponentInjector(position)\n      );\n      return component;\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n      return view;\n    }\n  }\n\n  /**\n   * Returns injector with OutletContextData that can be injected to the component\n   * rendered in the outlet\n   */\n  private getComponentInjector(position: OutletPosition): Injector {\n    const contextData: OutletContextData<T> = {\n      reference: this.cxOutlet,\n      position,\n      context: this.cxOutletContext,\n      context$: this.outletContext$.asObservable(),\n    };\n\n    return Injector.create({\n      providers: [\n        {\n          provide: OutletContextData,\n          useValue: contextData,\n        },\n      ],\n      parent: this.vcr.injector,\n    });\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent nodes of the given element.\n   *\n   * We avoid traversing the parent _elements_, as this is blocking\n   * ie11 implementations. One of the spare exclusions we make to not\n   * supporting ie11.\n   *\n   * @param element\n   */\n  private getHostElement(element: Node): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentNode);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.outletContext$.complete();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  RendererFactory2,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER | string\n  ): Observable<ComponentRef<any>> {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n      this.renderedCallers.push({ caller });\n\n      return this.outletRendererService.getOutletRef(config.outlet).pipe(\n        map((outletDirective) => {\n          const components = outletDirective.renderedComponents.get(\n            config.position ? config.position : OutletPosition.BEFORE\n          ) as ComponentRef<any>[];\n\n          return components\n            .reverse()\n            .find(\n              (component) => component.componentType === template.componentType\n            );\n        }),\n        tap((component) => {\n          if (config?.dialogType) {\n            this.applyClasses(component, config?.dialogType);\n          }\n        })\n      );\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER | string, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n\n    super.remove(caller, config);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, RendererFactory2 } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected routingService: RoutingService\n  ) {\n    super(document, rendererFactory);\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER | string) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { LayoutConfig } from '../config/layout-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [{ provide: LayoutConfig, useExisting: Config }],\n    };\n  }\n}\n","import { ElementRef, Injectable, ViewContainerRef } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport {\n  LaunchDialogService,\n  LAUNCH_CALLER,\n} from '../../layout/launch-dialog/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentLaunchDialogService {\n  constructor(protected launchDialogService: LaunchDialogService) {}\n\n  openDialog(\n    openElement?: ElementRef,\n    vcr?: ViewContainerRef\n  ): Observable<any> | undefined {\n    const component = this.launchDialogService.launch(\n      LAUNCH_CALLER.ANONYMOUS_CONSENT,\n      vcr\n    );\n\n    if (component) {\n      return combineLatest([\n        component,\n        this.launchDialogService.dialogClose,\n      ]).pipe(\n        filter(([, close]) => close && close !== undefined),\n        tap(([comp]) => {\n          openElement?.nativeElement.focus();\n          this.launchDialogService.clear(LAUNCH_CALLER.ANONYMOUS_CONSENT);\n          comp.destroy();\n        }),\n        map(([comp]) => comp)\n      );\n    }\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the `mouse-focus` class is added to the host element,\n   * indicating that the element focus should not be made visible.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\nexport enum TrapFocus {\n  /**\n   * Will trap the focus at the start of the focus group.\n   */\n  start = 'start',\n  /**\n   * Will trap the focus only at the end of the focus group.\n   */\n  end = 'end',\n  /**\n   * Will not trap the focus in both directions. This is actually not are\n   * a great example of focus trap, but it will give the benefit of keyboard\n   * tabbing by arrows.\n   */\n  both = 'both',\n}\n\nexport type TrapFocusType =\n  | boolean\n  | TrapFocus.start\n  | TrapFocus.end\n  | TrapFocus.both;\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: TrapFocusType;\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n *\n * This feature must be explicitly enabled with the `disableMouseFocus` config.\n *\n * The appearance of the visual focus depends on the CSS implementation to\n * begin with. Spartacus styles add a blue border around each focusable element.\n * This can be considered annoying by keyboard users, as they won't need such a\n * strong indication of the selected element.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = {\n    disableMouseFocus: true,\n  };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** Controls a css class to hide focus visible CSS rules */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown', ['$event']) handleKeydown(event: KeyboardEvent) {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = !this.isNavigating(event);\n    }\n  }\n\n  /**\n   * Indicates whether the configurations setup to disable visual focus.\n   */\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n\n  /**\n   * Indicates whether the event is used to navigate the storefront. Some keyboard events\n   * are used by mouse users to fill a form or interact with the OS or browser.\n   */\n  protected isNavigating(event: KeyboardEvent): boolean {\n    // when the cmd or ctrl keys are used, the user doesn't navigate the storefront\n    if (event.metaKey) {\n      return false;\n    }\n    // when the tab key is used, users are for navigating away from the current (form) element\n    if (event.code === 'Tab') {\n      return true;\n    }\n    // If the user fill in a form, we don't considering it part of storefront navigation.\n    if (['INPUT', 'TEXTAREA'].includes((event.target as HTMLElement).tagName)) {\n      return false;\n    }\n    return true;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective\n  extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singleton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective\n  extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistence key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective\n  extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistence\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective\n  extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  MOVE_FOCUS,\n  TrapFocus,\n  TrapFocusConfig,\n  TrapFocusType,\n} from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: TrapFocusType): boolean {\n    return trap === true || trap === TrapFocus.start;\n  }\n\n  protected getTrapEnd(trap: TrapFocusType): boolean {\n    return trap === true || trap === TrapFocus.end;\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focusable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective\n  extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      // we wait a few milliseconds, mainly because firefox will otherwise apply\n      // the mouse event on the new focused child element\n      setTimeout(() => {\n        super.handleFocus(event as KeyboardEvent);\n      }, 100);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elements,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { DirectionMode } from '../../../layout/direction/config/direction.model';\n\nexport enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n  PENCIL = 'PENCIL',\n  CLOCK = 'CLOCK',\n  TRASH = 'TRASH',\n  ACTIVE = 'ACTIVE',\n  SORT_DOWN = 'SORT_DOWN',\n  SORT = 'SORT',\n  ON = 'ON',\n  OFF = 'OFF',\n  LINK_OUT = 'LINK_OUT',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n\n  /**\n   * Lists icons that should be flipped for a specific direction.\n   */\n  flipDirection?: {\n    [ICON_TYPE: string]: DirectionMode;\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automatically loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { Component, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      null,\n      this.vcr\n    );\n    if (dialog) {\n      this.subscriptions.add(dialog.subscribe());\n    }\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/**\n * The ltr and rtl directions can be used to configure the storefront for a certain direction, both statically\n * or dynamically.\n *\n * The HTML5 \"auto\" value is not supported in Spartacus, as it's considered to be too fragile for the global\n * direction.\n */\nexport enum DirectionMode {\n  /**\n   * Indicates Left to Right direction.\n   */\n  LTR = 'ltr',\n  /**\n   * Indicates Right to Left direction.\n   */\n  RTL = 'rtl',\n}\n\n/**\n * Contains the configuration mode for language driven directionality. The detect mode is recommended\n * for a multi-site or multi-lingual setup where the active language should dictate the direction mode.\n */\nexport interface Direction {\n  /**\n   * The default direction mode is used for the direction mode of the overall storefront. The default mode\n   * can be used for all languages, but can be further enhanced dynamically by using the language detect mode.\n   * The default mode will also be used in detect mode for those languages that are not listed in either\n   * `rtlLanguages` or `ltrLanguages`.\n   */\n  default?: DirectionMode;\n\n  /**\n   * If detect is enabled, the direction is driven by the active language. The language is compared to the\n   * list of configured `rtlLanguages` vs `ltrLanguages`. If no language is resolved, the default direction\n   * mode is used.\n   *\n   * If no direction can be resolved, the direction is removed.\n   */\n  detect?: boolean;\n\n  /**\n   * The language isoCodes that are used to detect Right to Left languages.\n   */\n  rtlLanguages?: string[];\n\n  /**\n   * The language isoCodes that are used to detect Left to Right languages.\n   */\n  ltrLanguages?: string[];\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n      PENCIL: 'fas fa-pencil-alt',\n      CLOCK: 'far fa-clock',\n      TRASH: 'fas fa-trash',\n      ACTIVE: 'fas fa-check',\n      ON: 'fas fa-toggle-on',\n      OFF: 'fas fa-toggle-off',\n      LINK_OUT: 'fas fa-external-link-alt',\n      SORT_DOWN: 'fas fa-sort-down',\n      SORT: 'fas fa-sort',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport { DirectionMode } from '../../../layout/direction/config/direction.model';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   * Return the direction for which the icon should mirror (ltr vs rtl). The icon direction\n   * is configurable, but optional, as only a few icons should be flipped for rtl direction.\n   */\n  getFlipDirection(type: ICON_TYPE | string): DirectionMode {\n    return this.config?.flipDirection?.[type];\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { DirectionMode } from '../../../layout/direction/config/direction.model';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * The `flip-at-rtl` class is added to the DOM for the style layer to flip the icon in RTL direction.\n   */\n  @HostBinding('class.flip-at-rtl') flipAtRtl: boolean;\n\n  /**\n   * The `flip-at-ltr` class is added to the DOM for the style layer to flip the icon in LTR direction.\n   */\n  @HostBinding('class.flip-at-ltr') flipAtLtr: boolean;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n    this.flipIcon(type);\n  }\n\n  /**\n   * The icons supports flipping for some icons to support rtl and ltr directions.\n   */\n  protected flipIcon(type: ICON_TYPE) {\n    // TODO: this can be dropped with the next major release.\n    if (!this.iconLoader.getFlipDirection) {\n      return;\n    }\n    const iconDirection = this.iconLoader.getFlipDirection(type);\n    this.flipAtLtr = iconDirection === DirectionMode.LTR;\n    this.flipAtRtl = iconDirection === DirectionMode.RTL;\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    this.styleClasses?.forEach((cls) =>\n      this.renderer.removeClass(this.host, cls)\n    );\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type)?.split(' ');\n    this.styleClasses?.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { DirectionMode } from '../../../layout/direction/config/direction.model';\nimport { IconConfig } from './icon.model';\n\nexport const defaultIconConfig: IconConfig = {\n  icon: {\n    flipDirection: {\n      CARET_RIGHT: DirectionMode.RTL,\n      CARET_LEFT: DirectionMode.RTL,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultIconConfig } from './default-icon.config';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultIconConfig),\n    // TODO: move the opinionated fontawesome config to a recipe\n    provideDefaultConfig(fontawesomeIconConfig),\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { FocusConfig } from '../../../layout/a11y/keyboard-focus/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  @HostBinding('attr.role') role = 'dialog';\n  @HostBinding('attr.aria-modal') modal = true;\n\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: 'input[type=\"checkbox\"]',\n    focusOnEscape: true,\n  };\n\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    // Close on click outside the dialog window\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\n      this.close('Cross click');\n    }\n  }\n\n  constructor(\n    protected config: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected el: ElementRef,\n    protected launchDialogService: LaunchDialogService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  close(reason?: any): void {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { DIALOG_TYPE } from '../../layout/launch-dialog/index';\nimport { AnonymousConsentDialogComponent } from '../../shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component';\n\nexport const defaultAnonymousConsentLayoutConfig: LayoutConfig = {\n  launch: {\n    ANONYMOUS_CONSENT: {\n      inline: true,\n      component: AnonymousConsentDialogComponent,\n      dialogType: DIALOG_TYPE.DIALOG,\n    },\n  },\n};\n","import {\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  @ViewChild('open') openElement: ElementRef;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService\n  ) {}\n\n  openDialog(): void {\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      this.openElement,\n      this.vcr\n    );\n    if (dialog) {\n      dialog.pipe(take(1)).subscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../layout/a11y/keyboard-focus/index';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { defaultAnonymousConsentLayoutConfig } from './default-anonymous-consent-layout.config';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideConfig(defaultAnonymousConsentLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/index';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsDialogModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  paragraphs?: Array<{ title?: string; text?: Array<string> }>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport {\n  BreakPoint,\n  BREAKPOINT,\n  LayoutBreakPoints,\n  LayoutConfig,\n} from '../config/layout-config';\n\n/**\n * The `BreakpointService` resolves the various screen sizes that are used in\n * the storefront. The screen sizes are globally configurable based on your\n * layout requirements. You can adjust the screen sizes by setting the minimum\n * and/or maximum size for a breakpoint, as well as extending the configuration\n * with new screens.\n *\n * By default, the `BreakpointService` is based on the breakpoints from the\n * Bootstrap ui library:\n * - `xs`: < 576px\n * - `sm`: 576px - 767px\n * - `md`: 768px - 991px\n * - `lg`: 992px - 1199px\n * - `xl`: >= 1200px\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  private _breakpoints: BREAKPOINT[];\n\n  breakpoint$: Observable<BREAKPOINT> = isPlatformBrowser(this.platform)\n    ? this.winRef.resize$.pipe(\n        map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n        distinctUntilChanged()\n      )\n    : of(this.fallbackBreakpoint);\n\n  constructor(\n    protected winRef: WindowRef,\n    protected layoutConfig: LayoutConfig,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * Returns the breakpoints for the storefront layout.\n   *\n   * The breakpoints are driven by the `LayoutConfig.breakpoints` and sorted based on\n   * the given screen size.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    if (!this._breakpoints) {\n      this._breakpoints = this.resolveBreakpointsFromConfig();\n    }\n    return this._breakpoints;\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpoint, given by the `LayoutConfig.breakpoints`\n   * configuration.\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return (\n      this.getMaxSize(breakpoint) ??\n      // if there's no direct max value or explicit max value\n      // we must derive the max value from the previous min\n      this.getMinSize(\n        this.breakpoints?.[this.breakpoints.indexOf(breakpoint) + 1]\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the given breakpoint fits in the current screen size.\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  /**\n   * Returns the fallback breakpoint in case no breakpoint can be resolved. This is\n   * typically the case when we're on SSR without an actual window.\n   *\n   * Returns the smallest screen size (mobile first).\n   */\n  protected get fallbackBreakpoint(): BREAKPOINT {\n    return this.breakpoints?.[0];\n  }\n\n  /**\n   * Resolves the breakpoints and sorts them according to the configured size.\n   *\n   * The sort order is by small to large screens.\n   */\n  protected resolveBreakpointsFromConfig(): BREAKPOINT[] {\n    const sortByScreenSize = (next: BREAKPOINT, prev: BREAKPOINT): number => {\n      const maxNext = Math.max(\n        this.getMinSize(next) + 1 || 0,\n        this.getMaxSize(next) || 0\n      );\n      const maxPrev = Math.max(\n        this.getMinSize(prev) + 1 || 0,\n        this.getMaxSize(prev) || 0\n      );\n      return maxNext < maxPrev ? -1 : 0;\n    };\n    return (Object.keys(this.config) as BREAKPOINT[]).sort(sortByScreenSize);\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpoint, given by the\n   * `LayoutConfig.breakpoints` configuration. We will try to resolve the\n   * max size form the current breakpoint, but if this is not available, we\n   * resolve it form the next breakpoint\n   */\n  protected getMaxSize(breakpoint: BREAKPOINT): number {\n    const breakpointConfig = this.config[breakpoint];\n\n    if (!breakpointConfig) {\n      return null;\n    }\n\n    // we treat numbers as the max number by default\n    if (typeof breakpointConfig === 'number') {\n      return breakpointConfig as number;\n    } else if (breakpointConfig.max) {\n      return breakpointConfig.max;\n    } else {\n      return null;\n    }\n  }\n\n  protected getMinSize(breakpoint: BREAKPOINT): number {\n    return (this.config[breakpoint] as BreakPoint)?.min;\n  }\n\n  /**\n   * Returns a `BREAKPOINT` for the given window size.\n   *\n   * This method tries to match the closest breakpoint for the given\n   * window size. We'll fallback to the `largest` size in case the window\n   * is greater than the largest configurable breakpoint.\n   *\n   * The windowWidth should be smaller than the maximum size of any of the\n   * screen sizes defined in the `LayoutConfig.breakpoints`.\n   */\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    return (\n      this.breakpoints.find((br) => windowWidth < this.getSize(br)) ??\n      this.breakpoints?.[this.breakpoints.length - 1]\n    );\n  }\n\n  /**\n   * Helper method to return the breakpoint configuration.\n   */\n  protected get config(): LayoutBreakPoints {\n    return this.layoutConfig?.breakpoints || {};\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media?.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  forwardRef,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  Validator,\n} from '@angular/forms';\nimport { DatePickerFormatterService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-date-picker',\n  templateUrl: './date-picker.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DatePickerComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => DatePickerComponent),\n      multi: true,\n    },\n  ],\n})\nexport class DatePickerComponent implements ControlValueAccessor, Validator {\n  value: string;\n  nativeValue: string = null;\n\n  @ViewChild('inputElement', { static: false, read: ElementRef })\n  input: ElementRef;\n\n  @Input()\n  min?: string;\n\n  @Input()\n  max?: string;\n\n  @Input()\n  endOfDay = false;\n\n  @Input()\n  required?: boolean;\n\n  @Input()\n  invalid?: boolean;\n\n  constructor(protected dateFormatterService: DatePickerFormatterService) {}\n\n  onInput(event) {\n    this.value = this.dateFormatterService.toModel(\n      event.target.value,\n      this.endOfDay\n    );\n    this.nativeValue = event.target.value;\n    this.onChange(this.value);\n  }\n\n  onChange(_event: any) {}\n\n  onTouched() {}\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  writeValue(value: string): void {\n    if (value) {\n      this.value = value;\n      this.nativeValue = this.dateFormatterService.toNative(value);\n    }\n  }\n\n  getMin(): string {\n    return this.dateFormatterService.toNative(this.min);\n  }\n\n  getMax(): string {\n    return this.dateFormatterService.toNative(this.max);\n  }\n\n  validate(): { [key: string]: any } {\n    if (this.input && !this.input.nativeElement.validity.valid) {\n      const validity = this.input.nativeElement.validity;\n      const validators: { [key: string]: boolean } = {};\n      if (validity.rangeOverflow) {\n        validators.cxDateMax = true;\n      }\n      if (validity.rangeUnderflow) {\n        validators.cxDateMin = true;\n      }\n      return validators;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DatePickerComponent } from './date-picker.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [DatePickerComponent],\n  exports: [DatePickerComponent],\n})\nexport class DatePickerModule {}\n","import {\n  Component,\n  ElementRef,\n  forwardRef,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  Validator,\n} from '@angular/forms';\nimport { DateTimePickerFormatterService } from '@spartacus/core';\n\n/**\n * This component serves the browser's native `<input type=\"datetime-local\">` HTML element\n * in whilst projecting the value in the standard date format with regards to timezone offsets.\n */\n@Component({\n  selector: 'cx-date-time-picker',\n  templateUrl: './date-time-picker.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DateTimePickerComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => DateTimePickerComponent),\n      multi: true,\n    },\n  ],\n})\nexport class DateTimePickerComponent\n  implements ControlValueAccessor, Validator {\n  value: string;\n  nativeValue: string = null;\n\n  /**\n   * Reference to input element of type 'datetime-local'.\n   */\n  @ViewChild('inputElement', { static: false, read: ElementRef })\n  input: ElementRef;\n\n  /**\n   * Minimum value allowed for input element.\n   */\n  @Input()\n  min?: string;\n\n  /**\n   * Maximum value allowed for input element.\n   */\n  @Input()\n  max?: string;\n\n  /**\n   * Whether to use `required` validator.\n   */\n  @Input()\n  required?: boolean;\n\n  /**\n   * Condition to display as invalid.\n   */\n  @Input()\n  invalid?: boolean;\n\n  constructor(protected dateFormatterService: DateTimePickerFormatterService) {}\n\n  /**\n   * Handler method for input interactions.\n   * @param event: Input event.\n   */\n  onInput(event) {\n    this.value = this.dateFormatterService.toModel(event.target.value);\n    this.nativeValue = event.target.value;\n    this.onChange(this.value);\n  }\n\n  /**\n   * Handler method for when the value is modified.\n   * @param event: Change event.\n   */\n  onChange(_event: any) {}\n\n  /**\n   * Handler method for when the element is interacted with.\n   */\n  onTouched() {}\n\n  /**\n   * Register the `onChange()` handler method.\n   */\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Register the `onTouched()` handler method.\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Set the value of the input element.\n   * @param value: Date-like string to be set\n   */\n  writeValue(value: string): void {\n    if (value) {\n      this.value = value;\n      this.nativeValue = this.dateFormatterService.toNative(value);\n    }\n  }\n\n  /**\n   * Get the minimum value allowed for the input.\n   */\n  getMin(): string {\n    return this.dateFormatterService.toNative(this.min);\n  }\n\n  /**\n   * Get the maximum value allowed for the input.\n   */\n  getMax(): string {\n    return this.dateFormatterService.toNative(this.max);\n  }\n\n  /**\n   * Returns failing validators if input value is invalid\n   */\n  validate(): { [key: string]: any } {\n    if (this.input && !this.input.nativeElement.validity.valid) {\n      const validity = this.input.nativeElement.validity;\n      const validators: { [key: string]: boolean } = {};\n      if (validity.rangeOverflow) {\n        validators.cxDateMax = true;\n      }\n      if (validity.rangeUnderflow) {\n        validators.cxDateMin = true;\n      }\n      return validators;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DateTimePickerComponent } from './date-time-picker.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [DateTimePickerComponent],\n  exports: [DateTimePickerComponent],\n})\nexport class DateTimePickerModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  translationParams: { [key: string]: string };\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control?.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control?.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control?.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Params, Router } from '@angular/router';\n\n// private\ninterface RouteParts {\n  /** Path in the Angular-like array format */\n  path?: string[];\n\n  /** Query params */\n  queryParams?: Params;\n\n  /** Hash fragment */\n  fragment?: string;\n}\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent implements OnChanges {\n  constructor(protected router: Router) {}\n\n  /**\n   * Pattern matching string starting with `http://` or `https://`.\n   */\n  private readonly PROTOCOL_REGEX: RegExp = /^https?:\\/\\//i;\n\n  /**\n   * Used to split url into 2 parts:\n   * 1. the path\n   * 2. query params + hash fragment\n   */\n  private readonly URL_SPLIT = /(^[^#?]*)(.*)/;\n\n  /**\n   * Parsed parts of the @Input `url`, when it's a local URL.\n   * It should not be used when the `url` is external.\n   * @see `url`\n   */\n  private routeParts: RouteParts = {};\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  /**\n   * Returns true when the @Input `url` is a string starting with `http://` or `https://`.\n   */\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.PROTOCOL_REGEX.test(this.url);\n  }\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['url']) {\n      this.setUrlParts(changes['url'].currentValue);\n    }\n  }\n\n  /**\n   * The part with the path of the local url.\n   */\n  get routerUrl(): any[] {\n    return this.routeParts.path;\n  }\n\n  /**\n   * The part with the query params of the local url.\n   */\n  get queryParams(): Params {\n    return this.routeParts.queryParams;\n  }\n\n  /**\n   * The part with the hash fragment of the local url.\n   */\n  get fragment(): string {\n    return this.routeParts.fragment;\n  }\n\n  /**\n   * Parses the given url and sets the property `urlParts` accordingly.\n   */\n  private setUrlParts(url: string | any[]) {\n    if (typeof url === 'string') {\n      url = this.getAbsoluteUrl(url); // string links in CMS sometimes don't have the leading slash, so fix it here\n      this.routeParts = this.splitUrl(url as string);\n    } else {\n      this.routeParts = { path: url };\n    }\n  }\n\n  /**\n   * Parses the given string into 3 parts:\n   * - string path (wrapped in an array to be compatible with Angular syntax for the `routerLink`)\n   * - query params (as an object)\n   * - hash fragment (string)\n   */\n  private splitUrl(url: string = ''): RouteParts {\n    const { queryParams, fragment } = this.router.parseUrl(url);\n    const [, path] = url.match(this.URL_SPLIT);\n\n    // wrap path in an array, to have the Angular-like path format\n    return { path: [path], queryParams, fragment };\n  }\n\n  /**\n   * Prepends a leading slash to the given URL string, in case it doesn't have it.\n   */\n  private getAbsoluteUrl(url: string): string {\n    return url.startsWith('/') ? url : '/' + url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functionality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent implements OnInit, OnDestroy {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive integer or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Indicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  /**\n   * Subscription responsible for auto-correcting control's value when it's invalid.\n   */\n  private sub: Subscription;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  ngOnInit() {\n    this.sub = this.control.valueChanges\n      .pipe(startWith(this.control.value))\n      .subscribe((value) =>\n        this.control.setValue(this.getValidCount(value), { emitEvent: false })\n      );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behavior of the build. Alternatively, CSS can be used to further customize\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behavior of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (!pageCount || pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstituted =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstituted\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstituted =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstituted\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfterLinks(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  protected getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  protected getAfterLinks(\n    pageCount: number,\n    current: number\n  ): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  protected getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  /**\n   * Returns the pagination configuration. The configuration is driven by the\n   * (default) application configuration.\n   *\n   * The default application is limited to adding the start and end link:\n   * ```ts\n   *   addStart: true,\n   *   addEnd: true\n   * ```\n   *\n   * The application configuration is however merged into the following static configuration:\n   * ```ts\n   * {\n   *   rangeCount: 3,\n   *   dotsLabel: '...',\n   *   startLabel: '«',\n   *   previousLabel: '‹',\n   *   nextLabel: '›',\n   *   endLabel: '»'\n   * }\n   * ```\n   */\n  protected get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  protected render(pagination: PaginationModel): void {\n    if (!pagination) {\n      return;\n    }\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IconModule,\n    PaginationModule,\n  ],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { MediaFormatSize } from './media.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalOptions } from './modal-options';\nimport { ModalRef } from './modal-ref';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n    this.handleModalRemoveEvents(activeModal);\n\n    return activeModal;\n  }\n\n  protected handleModalRemoveEvents(modal: ModalRef): void {\n    modal.result.finally(() => {\n      this.modals = this.modals.filter((m) => m !== modal);\n    });\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Address,\n  CostCenter,\n  DeliveryMode,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../card/card.component';\n\n@Component({\n  selector: 'cx-order-overview',\n  templateUrl: './order-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderOverviewComponent {\n  order: any;\n\n  @Input('order')\n  set setOrder(order: any) {\n    this.order = order;\n  }\n\n  constructor(protected translation: TranslationService) {}\n\n  getReplenishmentCodeCardContent(orderCode: string): Observable<Card> {\n    return this.translation\n      .translate('checkoutOrderConfirmation.replenishmentNumber')\n      .pipe(\n        filter(() => Boolean(orderCode)),\n        map((textTitle) => ({\n          title: textTitle,\n          text: [orderCode],\n        }))\n      );\n  }\n\n  getReplenishmentActiveCardContent(active: boolean): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutOrderConfirmation.status'),\n      this.translation.translate('checkoutOrderConfirmation.active'),\n      this.translation.translate('checkoutOrderConfirmation.cancelled'),\n    ]).pipe(\n      map(([textTitle, textActive, textCancelled]) => ({\n        title: textTitle,\n        text: [active ? textActive : textCancelled],\n      }))\n    );\n  }\n\n  getReplenishmentStartOnCardContent(isoDate: string): Observable<Card> {\n    return this.translation.translate('checkoutReview.startOn').pipe(\n      filter(() => Boolean(isoDate)),\n      map((textTitle) => {\n        const date = this.getDate(new Date(isoDate));\n\n        return {\n          title: textTitle,\n          text: [date],\n        };\n      })\n    );\n  }\n\n  getReplenishmentFrequencyCardContent(frequency: string): Observable<Card> {\n    return this.translation\n      .translate('checkoutOrderConfirmation.frequency')\n      .pipe(\n        filter(() => Boolean(frequency)),\n        map((textTitle) => ({\n          title: textTitle,\n          text: [frequency],\n        }))\n      );\n  }\n\n  getReplenishmentNextDateCardContent(isoDate: string): Observable<Card> {\n    return this.translation\n      .translate('checkoutOrderConfirmation.nextOrderDate')\n      .pipe(\n        filter(() => Boolean(isoDate)),\n        map((textTitle) => {\n          const date = this.getDate(new Date(isoDate));\n\n          return {\n            title: textTitle,\n            text: [date],\n          };\n        })\n      );\n  }\n\n  getOrderCodeCardContent(orderCode: string): Observable<Card> {\n    return this.translation\n      .translate('checkoutOrderConfirmation.orderNumber')\n      .pipe(\n        filter(() => Boolean(orderCode)),\n        map((textTitle) => ({\n          title: textTitle,\n          text: [orderCode],\n        }))\n      );\n  }\n\n  getOrderCurrentDateCardContent(isoDate?: string): Observable<Card> {\n    return this.translation\n      .translate('checkoutOrderConfirmation.placedOn')\n      .pipe(\n        map((textTitle) => {\n          let date: string;\n\n          if (Boolean(isoDate)) {\n            date = this.getDate(new Date(isoDate));\n          } else {\n            date = this.getDate(new Date());\n          }\n\n          return {\n            title: textTitle,\n            text: [date],\n          };\n        })\n      );\n  }\n\n  getOrderStatusCardContent(status: string): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutOrderConfirmation.status'),\n      this.translation.translate('orderDetails.statusDisplay', {\n        context: status,\n      }),\n    ]).pipe(\n      map(([textTitle, textStatus]) => ({\n        title: textTitle,\n        text: [textStatus],\n      }))\n    );\n  }\n\n  getPurchaseOrderNumber(poNumber: string): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutReview.poNumber'),\n      this.translation.translate('checkoutPO.noPoNumber'),\n    ]).pipe(\n      map(([textTitle, noneTextTitle]) => ({\n        title: textTitle,\n        text: [poNumber ? poNumber : noneTextTitle],\n      }))\n    );\n  }\n\n  getMethodOfPaymentCardContent(\n    hasPaymentInfo: PaymentDetails\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutProgress.methodOfPayment'),\n      this.translation.translate('paymentTypes.paymentType_ACCOUNT'),\n      this.translation.translate('paymentTypes.paymentType_CARD'),\n    ]).pipe(\n      map(([textTitle, textAccount, textCard]) => ({\n        title: textTitle,\n        text: [Boolean(hasPaymentInfo) ? textCard : textAccount],\n      }))\n    );\n  }\n\n  getCostCenterCardContent(costCenter: CostCenter): Observable<Card> {\n    return this.translation.translate('checkoutPO.costCenter').pipe(\n      filter(() => Boolean(costCenter)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: costCenter?.name,\n        text: ['(' + costCenter?.unit?.name + ')'],\n      }))\n    );\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [deliveryAddress.formattedAddress, deliveryAddress.country.name],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [\n          deliveryMode.description,\n          deliveryMode.deliveryCost?.formattedValue\n            ? deliveryMode.deliveryCost?.formattedValue\n            : '',\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('paymentForm.billingAddress').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [billingAddress.formattedAddress, billingAddress.country.name],\n      }))\n    );\n  }\n\n  private getDate(givenDate: Date): string {\n    const date = givenDate.toDateString().split(' ');\n\n    const month = date[1];\n    const day = date[2];\n    const year = date[3];\n\n    return month + ' ' + day + ' ' + year;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../card/card.module';\nimport { OrderOverviewComponent } from './order-overview.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CardModule],\n  declarations: [OrderOverviewComponent],\n  exports: [OrderOverviewComponent],\n})\nexport class OrderOverviewModule {}\n","import {\n  Component,\n  ElementRef,\n  HostListener,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  UserReplenishmentOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { FocusConfig } from '../../../layout/a11y/keyboard-focus/keyboard-focus.model';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\n\n@Component({\n  selector: 'cx-replenishment-order-cancellation-dialog',\n  templateUrl: './replenishment-order-cancellation-dialog.component.html',\n})\nexport class ReplenishmentOrderCancellationDialogComponent\n  implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  replenishmentOrderCode: string;\n\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: 'button',\n    focusOnEscape: true,\n  };\n\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    // Close on click outside the dialog window\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\n      this.close('Cross click');\n    }\n  }\n\n  constructor(\n    protected userReplenishmentOrderService: UserReplenishmentOrderService,\n    protected globalMessageService: GlobalMessageService,\n    protected launchDialogService: LaunchDialogService,\n    protected el: ElementRef\n  ) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      combineLatest([\n        this.userReplenishmentOrderService\n          .getReplenishmentOrderDetails()\n          .pipe(startWith(null)),\n        this.launchDialogService.data$,\n      ]).subscribe(([replenishmentOrder, code]) => {\n        this.replenishmentOrderCode =\n          code || replenishmentOrder.replenishmentOrderCode;\n      })\n    );\n\n    this.subscription.add(\n      this.userReplenishmentOrderService\n        .getCancelReplenishmentOrderSuccess()\n        .subscribe((value) => this.onSuccess(value))\n    );\n  }\n\n  onSuccess(value: boolean): void {\n    if (value) {\n      this.launchDialogService.closeDialog(\n        'Successffully cancelled replenishment'\n      );\n\n      this.globalMessageService.add(\n        {\n          key: 'orderDetails.cancelReplenishment.cancelSuccess',\n          params: {\n            replenishmentOrderCode: this.replenishmentOrderCode,\n          },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n    this.userReplenishmentOrderService.clearCancelReplenishmentOrderProcessState();\n  }\n\n  close(reason: string): void {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  cancelReplenishment(): void {\n    this.userReplenishmentOrderService.cancelReplenishmentOrder(\n      this.replenishmentOrderCode\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ReplenishmentOrderCancellationDialogComponent } from './replenishment-order-cancellation-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, KeyboardFocusModule],\n  declarations: [ReplenishmentOrderCancellationDialogComponent],\n  entryComponents: [ReplenishmentOrderCancellationDialogComponent],\n  exports: [ReplenishmentOrderCancellationDialogComponent],\n})\nexport class ReplenishmentOrderCancellationDialogModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { SplitViewState } from './split/split-view.model';\n\n/**\n * Supposed to be injected in the split view component, so that the split view state\n * is maintained for a single split view.\n */\n@Injectable()\nexport class SplitViewService {\n  /**\n   * Newly added views are hidden by default, unless it is the first view of the split view.\n   * The default hide mode can be overridden.\n   */\n  defaultHideMode = true;\n\n  protected splitViewCount = 1;\n\n  protected _views$: BehaviorSubject<any[]> = new BehaviorSubject([]);\n\n  /**\n   * Adds a view to the list of views. The view is initialized with the `SplitViewState`\n   * state. If no state is provided, the state is created with the hidden property. The hidden\n   * property is provided by the `defaultHideMode`, unless it's the first view (position: 0).\n   */\n  add(position: number, initialState?: SplitViewState) {\n    const state: SplitViewState = {\n      ...{ hidden: position === 0 ? false : this.defaultHideMode },\n      ...initialState,\n    };\n    if (!this.views[position]) {\n      this.views[position] = state;\n      this.updateState(position, state.hidden);\n      this._views$.next(this.views);\n    }\n  }\n\n  /**\n   * The split view is based on a number of views that can be used next to each other.\n   * When the number changes (i.e. if the screen goes from wide to small), the visibility state\n   * of the views should be updated.\n   */\n  updateSplitView(splitViewCount: number) {\n    if (splitViewCount !== this.splitViewCount) {\n      this.splitViewCount = splitViewCount;\n      this.updateState();\n    }\n  }\n\n  /**\n   * Returns an observable with the active view number. The active view number\n   * represents the last visible view.\n   */\n  getActiveView(): Observable<number> {\n    return this._views$.pipe(\n      map((views) => this.getActive(views)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns an observable with the SplitViewState for the given view position.\n   */\n  getViewState(position: number): Observable<SplitViewState> {\n    return this._views$.pipe(\n      map((views) => views[position]),\n      // we must filter here, since outlet driven views will destroyed the view\n      filter((view) => Boolean(view))\n    );\n  }\n\n  /**\n   * Removes a view from the list of views.\n   *\n   * Removing a view is different from hiding a view. Removing a view is typically done\n   * when a component is destroyed.\n   *\n   * When the view is removed, the SplitViewState is updated to reflect that new organization\n   * of views.\n   */\n  remove(position: number) {\n    const activePosition = this.getActive(this.views);\n    this._views$.next(this.views.splice(0, position));\n    if (activePosition >= position) {\n      this.updateState(position);\n    }\n  }\n\n  /**\n   * Returns the next view position. This is useful for views that do not want to be bothered\n   * with controlling view numbers.\n   */\n  get nextPosition(): number {\n    return this.views.length || 0;\n  }\n\n  /**\n   * Toggles the visibility of the views based on the given view position. If the view\n   * is already visible, we close the view and active the former view. Unless the hide flag\n   * is used, to force the view.\n   *\n   * The view state of other views in the split view are updated as well.\n   *\n   * @param position The zero-based position number of the view.\n   * @param forceHide The (optional) hide state for the view position.\n   */\n  toggle(position: number, forceHide?: boolean) {\n    // add the view if it hasn't been added before.\n    if (!this.views[position]) {\n      this.add(position, { hidden: forceHide ?? false });\n    }\n\n    // If the position is already visible, we move to a previous position. Only if the hide\n    // state is forced, we keep the current position.\n    if (\n      this.views[position] &&\n      forceHide === undefined &&\n      !this.views[position].hidden\n    ) {\n      position--;\n    }\n\n    this.updateState(position, forceHide === true);\n  }\n\n  /**\n   * Updates the hidden state of all the views.\n   */\n  protected updateState(position?: number, hide?: boolean) {\n    const views = [...this.views];\n    if (hide !== undefined && views[position]) {\n      views[position].hidden = hide;\n    }\n    let lastVisible =\n      views.length - [...views].reverse().findIndex((view) => !view.hidden) - 1;\n\n    if (lastVisible === views.length) {\n      if (position) {\n        // When there's only 1 view (mobile), we might not find any active\n        // if the user navigates back.\n        lastVisible = position - 1;\n      } else {\n        lastVisible = views.length - 1;\n      }\n    }\n\n    views.forEach((view, pos) => {\n      if (view && pos !== position) {\n        // hide other views that are outside the split view\n        view.hidden =\n          pos > lastVisible || pos < lastVisible - (this.splitViewCount - 1);\n      }\n    });\n\n    this._views$.next(views);\n  }\n\n  /**\n   * Returns the active view count for the list of views.\n   */\n  protected getActive(views: SplitViewState[]): number {\n    // we reverse the list to find the last visible view\n    const l = [...views]\n      .reverse()\n      .findIndex((view: SplitViewState) => !view.hidden);\n    const last = l === -1 ? 0 : views.length - l - 1;\n    return last;\n  }\n\n  /**\n   * Utility method that resolves all views from the subject.\n   */\n  protected get views(): SplitViewState[] {\n    return this._views$.value;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\nimport { SplitViewService } from '../split-view.service';\n\n/**\n * The split-view component supports an unlimited number of nested views. The component\n * is a host to those view components and doesn't add any restrictions to it's content;\n * content is projected as-is.\n *\n * ```html\n * <cx-split-view>\n *   <cx-view></cx-view>\n *   <cx-view></cx-view>\n *   <any-wrapper>\n *     <cx-view></cx-view>\n *   </any-wrapper>\n * </cx-split-view>\n * ```\n *\n * The split view component is only concerned with tracking the underlying _visible_\n * view components, so that the `lastVisibleView` can be updated accordingly. The actual\n * visibility of views is controlled by CSS. To allow for maximum flexibility, the CSS\n * implementation is using CSS variables. The `lastVisibleView` is bind to the\n * `--cx-active-view` on the host, so that all descendants views will inherit the\n * property conveniently.\n */\n@Component({\n  selector: 'cx-split-view',\n  templateUrl: './split-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [SplitViewService],\n})\nexport class SplitViewComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  /**\n   * Sets the default hide mode for views. This mode is useful in case views are dynamically being created,\n   * for example when they are created by router components.\n   *\n   * The mode defaults to true, unless this is the first view; the first view is never hidden.\n   */\n  @Input()\n  set hideMode(mode: boolean) {\n    this.splitService.defaultHideMode = mode;\n  }\n\n  /**\n   * Indicates the last visible view in the range of views that is visible. This\n   * is bind to a css variable `--cx-active-view` so that the experience\n   * can be fully controlled by css.\n   */\n  @HostBinding('style.--cx-active-view')\n  @HostBinding('attr.active-view')\n  lastVisibleView = 1;\n\n  constructor(\n    protected splitService: SplitViewService,\n    protected breakpointService: BreakpointService,\n    protected elementRef: ElementRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.splitService\n        .getActiveView()\n        .subscribe(\n          (lastVisible: number) => (this.lastVisibleView = lastVisible + 1)\n        )\n    );\n    this.subscription.add(\n      this.breakpointService.breakpoint$.subscribe(() => {\n        this.splitService.updateSplitView(this.splitViewCount);\n      })\n    );\n  }\n\n  /**\n   * Returns the maximum number of views per split-view. The number is based on the\n   * CSS custom property `--cx-max-views`.\n   */\n  protected get splitViewCount(): number {\n    return Number(\n      getComputedStyle(this.elementRef.nativeElement).getPropertyValue(\n        '--cx-max-views'\n      )\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { delayWhen } from 'rxjs/operators';\nimport { SplitViewService } from '../split-view.service';\n\n/**\n * The view component is part of the `SplitViewComponent`. The view\n * contains the navigable content that should be split up. It maintains\n * a view position and allows to show or hide the view.\n *\n * The ViewComponent interacts with the `SplitViewService` for handing over the\n * view state, so that the overarching `SplitViewComponent` can manage the\n * overall experience.\n */\n@Component({\n  selector: 'cx-view',\n  templateUrl: './view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewComponent implements OnInit, OnDestroy {\n  protected _hidden;\n\n  @Input()\n  @HostBinding('attr.position')\n  @HostBinding('style.--cx-view-position')\n  position: string;\n\n  /**\n   * The disappeared flag is added to the\n   */\n  @HostBinding('attr.disappeared') disappeared = true;\n\n  /**\n   * The hidden input is used to set the initial visible state of the view.\n   * The hidden state defaults to false.\n   *\n   * The hidden input supports 2-way binding, see `hiddenChange` property.\n   */\n  @Input()\n  set hidden(hidden: boolean) {\n    this._hidden = hidden;\n    this.splitService.toggle(this.viewPosition, hidden);\n  }\n\n  /**\n   * An update of the view visibility is emitted to the hiddenChange output.\n   */\n  @Output()\n  hiddenChange = new EventEmitter();\n\n  protected subscription: Subscription;\n\n  constructor(\n    protected splitService: SplitViewService,\n    protected elementRef: ElementRef,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    const hidden = this._hidden ? { hidden: this._hidden } : {};\n    this.splitService.add(this.viewPosition, hidden);\n\n    this.subscription = this.splitService\n      .getViewState(this.viewPosition)\n      // delay the disappeared state, so that the (CSS driven) animation has time to finish\n      .pipe(delayWhen((view) => timer(view.hidden ? this.duration * 1.25 : 0)))\n      .subscribe((view) => {\n        this.hiddenChange.emit(view.hidden);\n        this._hidden = view.hidden;\n\n        this.disappeared = view.hidden;\n        this.cd.markForCheck();\n      });\n  }\n\n  /**\n   * Toggles the visibility of the view.\n   *\n   * An optional force flag can be used to explicitly show or hide view component.\n   */\n  toggle(force?: boolean) {\n    this.splitService.toggle(this.viewPosition, force);\n  }\n\n  /**\n   * Returns the position for the view.\n   *\n   * The position is either taken from the input `position` or generated by the `SplitService`.\n   */\n  protected get viewPosition(): number {\n    if (!(Number(this.position) >= 0)) {\n      this.position = this.splitService.nextPosition.toString();\n    }\n    return Number(this.position);\n  }\n\n  /**\n   * Returns the duration in milliseconds. The duration is based on the CSS custom property\n   * `--cx-transition-duration`. Defaults to 300 milliseconds.\n   */\n  protected get duration(): number {\n    const duration: string = getComputedStyle(this.elementRef.nativeElement)\n      .getPropertyValue('--cx-transition-duration')\n      .trim();\n\n    if (duration.indexOf('ms') > -1) {\n      return Number(duration.split('ms')[0]);\n    } else if (duration.indexOf('s') > -1) {\n      return Number(duration.split('s')[0]) * 1000;\n    } else {\n      return 300;\n    }\n  }\n\n  /**\n   * The view is removed from the `SplitService` so that the view no longer\n   * plays a role in the overall split view.\n   */\n  ngOnDestroy() {\n    this.splitService.remove(this.viewPosition);\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SplitViewComponent } from './split/split-view.component';\nimport { ViewComponent } from './view/view.component';\n\n/**\n * The split-view component supports an unlimited number of nested views. Nested views are rendered\n * next to each other. The views can be rendered next to each other, but the max number of visible\n * views can be limisted as well. This is configurable in the CSS layer, so that the max number of views\n * per split-view can be different for each component.\n *\n * The basic structure of the split-view component is shown below:\n *\n *\n * ```\n * <cx-split-view>\n * </cx-split-view>\n * ```\n *\n * The UX pattern used for the split-view is driven by an initial view, which gets splitted into\n * more views as soon as the user starts interacting with the initial and subsequantial views.\n * The views can be driven by routes, which means that you can navigate through the splitted views\n * by using the browser history as well as share or bookmark splitted views.\n *\n * The UI is implemented in the style layer, with only a few generic style rules. Most of the split\n * view style is driven by CSS properties, so that alternative split-view styles can be introduced\n * per page or component.\n *\n * The max number of views per split-view on mobile is limited to 1 by default, where as on tablet\n * (and higher) it is set to 2. Spartacus has a pretty narrow layout, which is why 2 is maximum,\n * but customers could alter the layout to bring in more views in the same split-view at the time.\n *\n */\n\n@NgModule({\n  declarations: [SplitViewComponent, ViewComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [SplitViewComponent, ViewComponent],\n})\nexport class SplitViewModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Configuration options for the Qualtrics integration, which allows you to\n * specify the qualtrics project and deployment script.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QualtricsConfig {\n  /**\n   * Holds the qualtrics integration options.\n   */\n  qualtrics?: {\n    /**\n     * Deployment script, loaded from a resource, to integrate the deployment of the qualtrics project.\n     * You would typically store the file in the local assets folder.\n     *\n     * Defaults to `assets/qualtricsIntegration.js`\n     */\n    scriptSource?: string;\n  };\n}\n","import {\n  Injectable,\n  isDevMode,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\n\nexport const QUALTRICS_EVENT_NAME = 'qsi_js_loaded';\n\n/**\n * Service to integration Qualtrics.\n *\n * The integration observes the Qualtrics API, and when available, it runs the QSI API\n * to let Qualtrics evaluate the application.\n *\n * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application\n * data before pulling the QSI API. This is beneficial in a single page application when additional\n * data is required before the Qualtrics _creatives_ run.\n *\n * This service also supports the creation of the Qualtrics deployment script. This is optional, as\n * the script can be added in alternatives ways.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  /**\n   * Reference to the QSI API.\n   */\n  protected qsiApi: any;\n\n  /**\n   * QSI load event that happens when the QSI JS file is loaded.\n   */\n  private qsiLoaded$: Observable<any> = this.winRef?.nativeWindow\n    ? fromEvent(this.winRef.nativeWindow, QUALTRICS_EVENT_NAME)\n    : of();\n\n  /**\n   * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.\n   *\n   * The API is emitted when the JavaScript resource holding this API is fully loaded.\n   * The API is also stored locally in the service, in case it's required later on.\n   */\n  protected qsi$: Observable<any> = this.qsiLoaded$.pipe(\n    switchMap(() => this.isDataLoaded()),\n    map(() => this.winRef?.nativeWindow['QSI']),\n    filter((api) => Boolean(api)),\n    tap((qsi) => (this.qsiApi = qsi))\n  );\n\n  constructor(\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.initialize();\n  }\n\n  /**\n   * Starts observing the Qualtrics integration. The integration is based on a\n   * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,\n   * we run the API.\n   */\n  protected initialize() {\n    this.qsi$.subscribe(() => this.run());\n  }\n\n  /**\n   * Evaluates the Qualtrics project code for the application.\n   *\n   * In order to reload the evaluation in Qualtrics, the API requires to unload the API before\n   * running it again. We don't do this by default, but offer a flag to conditionally unload the API.\n   */\n  protected run(reload = false): void {\n    if (!this.qsiApi?.API) {\n      if (isDevMode()) {\n        console.log('The QSI api is not available');\n      }\n      return;\n    }\n\n    if (reload) {\n      // Removes any currently displaying creatives\n      this.qsiApi.API.unload();\n    }\n\n    // Starts the intercept code evaluation right after loading the Site Intercept\n    // code for any defined intercepts or creatives\n    this.qsiApi.API.load().done(this.qsiApi.API.run());\n  }\n\n  /**\n   * Adds the deployment script to the DOM.\n   *\n   * The script will not be added twice if it was loaded before. In that case, we use\n   * the Qualtrics API directly to _unload_ and _run_ the project.\n   */\n  addScript(scriptSource: string): void {\n    if (this.hasScript(scriptSource)) {\n      this.run(true);\n    } else {\n      const script: HTMLScriptElement = this.renderer.createElement('script');\n      script.type = 'text/javascript';\n      script.defer = true;\n      script.src = scriptSource;\n      this.renderer.appendChild(this.winRef.document.body, script);\n    }\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.\n   * You can observe any data in this method.\n   *\n   * Defaults to true.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n\n  /**\n   * Indicates if the script is already added to the DOM.\n   */\n  protected hasScript(source?: string): boolean {\n    return !!this.winRef.document.querySelector(`script[src=\"${source}\"]`);\n  }\n\n  protected get renderer(): Renderer2 {\n    return this.rendererFactory.createRenderer(null, null);\n  }\n}\n","import { Component, isDevMode } from '@angular/core';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n/**\n * Adds the Qualtrics deployment script whenever the component is loaded. The\n * deployment script is loaded from the global configuration (`qualtrics.scriptSource`).\n */\n@Component({\n  selector: 'cx-qualtrics',\n  template: ``,\n})\nexport class QualtricsComponent {\n  constructor(\n    protected qualtricsLoader: QualtricsLoaderService,\n    protected config: QualtricsConfig\n  ) {\n    if (this.config.qualtrics?.scriptSource) {\n      this.qualtricsLoader.addScript(this.config.qualtrics.scriptSource);\n    } else if (isDevMode()) {\n      console.warn(\n        `We're unable to add the Qualtrics deployment code as there is no script source defined in config.qualtrics.scriptSource.`\n      );\n    }\n  }\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => (ctx ? this.getInjectedService(ctx) : undefined)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data?.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport { OutletContextData } from '../../../../cms-structure/outlet/outlet.model';\nimport { TableHeaderOutletContext } from '../table.model';\n\n@Component({\n  template: `{{ value }}`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableDataCellComponent {\n  @HostBinding('class.content-wrapper') cls = true;\n\n  constructor(protected outlet: OutletContextData<TableHeaderOutletContext>) {}\n\n  @HostBinding('attr.title')\n  get value(): string {\n    return this.model[this.field];\n  }\n\n  protected get model(): any {\n    return this.outlet?.context;\n  }\n\n  protected get field(): string {\n    return this.outlet?.context?._field;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OutletContextData } from '../../../../cms-structure/outlet/outlet.model';\nimport {\n  TableFieldOptions,\n  TableHeader,\n  TableHeaderOutletContext,\n} from '../table.model';\n\n@Component({\n  template: `{{ header || (localizedHeader | cxTranslate) }}`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableHeaderCellComponent {\n  constructor(protected outlet: OutletContextData<TableHeaderOutletContext>) {}\n\n  /**\n   * Returns the static label for the given field, if available.\n   */\n  get header(): string {\n    if (typeof this.fieldOptions?.label === 'string') {\n      return <string>this.fieldOptions.label;\n    }\n  }\n\n  /**\n   * Returns the localized label for the given field.\n   *\n   * The localized label is either driven by the configured `label.i18nKey`\n   * or concatenated by the table `type` and field `key`:\n   *\n   * `[tableType].[fieldKey]`\n   *\n   * The localized header can be translated with the `cxTranslate` pipe or `TranslationService`.\n   */\n  get localizedHeader(): string {\n    return (\n      (this.fieldOptions?.label as TableHeader)?.i18nKey ||\n      `${this.i18nRoot}.${this.field}`\n    );\n  }\n\n  protected get fieldOptions(): TableFieldOptions {\n    return this.outlet?.context._options?.cells?.[this.field];\n  }\n\n  protected get field(): string {\n    return this.outlet?.context?._field;\n  }\n\n  protected get type(): string {\n    return this.outlet?.context?._type;\n  }\n\n  protected get i18nRoot(): string {\n    return this.outlet?.context?._i18nRoot;\n  }\n}\n","import { TableDataCellComponent } from '../table-data-cell/table-data-cell.component';\nimport { TableHeaderCellComponent } from '../table-header-cell/table-header-cell.component';\nimport { TableConfig } from './table.config';\n\nexport const defaultTableConfig: TableConfig = {\n  tableOptions: {\n    headerComponent: TableHeaderCellComponent,\n    dataComponent: TableDataCellComponent,\n  },\n};\n","import { Injectable, Type } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { BREAKPOINT } from '../../../../layout/config/layout-config';\nimport { TableStructureConfiguration } from '../table.model';\n\n/**\n * The `TableConfig` provides a table configurations for specific table types. You can define\n * an all-screen table structure as well as a breakpoint specific table structure. The various\n * table structures are merged from small to large screen configurations, depending on the users\n * screen size.\n *\n * The `table.type` is used as a key to distinguish the various table configurations in the application.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class TableConfig {\n  table?: {\n    [tableType: string]: ResponsiveTableConfiguration;\n  };\n  tableOptions?: {\n    /**\n     * Global component to render table header _content_ (`<th>...</th>`). A specific component\n     * can be configured alternatively per table or table field.\n     */\n    headerComponent?: Type<any>;\n\n    /**\n     * Global component to render table cell _content_ (`<td>...</td>`). A specific component per\n     * field can be configured alternatively.\n     *\n     * If no component is available, the table content will render as-is.\n     */\n    dataComponent?: Type<any>;\n  };\n}\n\n/**\n * Helper configuration to introduce breakpoint specific table configuration.\n */\nexport interface ResponsiveTableConfiguration\n  extends TableStructureConfiguration {\n  /** The table configurations for all screens */\n  [BREAKPOINT.xl]?: TableStructureConfiguration;\n  /** The table configurations for large screens and smaller */\n  [BREAKPOINT.lg]?: TableStructureConfiguration;\n  /** The table configurations for medium screens and smaller */\n  [BREAKPOINT.md]?: TableStructureConfiguration;\n  /** The table configurations for small screens and smaller */\n  [BREAKPOINT.sm]?: TableStructureConfiguration;\n  /** The table configurations for extra small screens */\n  [BREAKPOINT.xs]?: TableStructureConfiguration;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TableDataCellComponent } from './table-data-cell.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TableDataCellComponent],\n})\nexport class TableDataCellModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { TableHeaderCellComponent } from './table-header-cell.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [TableHeaderCellComponent],\n})\nexport class TableHeaderCellModule {}\n","import { Type } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n/**\n * Contains the table data and structure for the `TableComponent`.\n */\nexport interface Table<T = any> {\n  /**\n   * The table structure provides details about the headers of the table.\n   */\n  structure: TableStructure;\n\n  /**\n   * The data that is listed in the table component.\n   */\n  data: T[];\n\n  /**\n   * The pagination component is used to paginate through the data.\n   */\n  pagination?: PaginationModel;\n\n  /**\n   * The sort options for the table.\n   */\n  sorts?: any[];\n}\n\nexport interface TableStructureConfiguration {\n  /**\n   * Provide the bare structure of the table.\n   */\n  cells?: string[];\n\n  /**\n   * Global table structure options.\n   */\n  options?: TableOptions;\n}\n\nexport interface TableOptions {\n  /**\n   * Default pagination for the table that is used for the initial load of the table data.\n   */\n  pagination?: PaginationModel;\n\n  /**\n   * The layout for the table component can be used for horizontal, vertical and vertical stacked\n   * table layouts.\n   */\n  layout?: TableLayout;\n\n  /**\n   * Global component to render table header _content_ (`<th>...</th>`). A specific component per\n   * field can be configured alternatively.\n   *\n   * If no component is available, the table component will render a static label or use the\n   * configured i18n label.\n   */\n  headerComponent?: Type<any>;\n\n  /**\n   * Global component to render table cell _content_ (`<td>...</td>`). A specific component per\n   * field can be configured alternatively.\n   *\n   * If no component is available, the table content will render as-is.\n   */\n  dataComponent?: Type<any>;\n\n  // field specific options\n  cells?: {\n    [fieldKey: string]: TableFieldOptions;\n  };\n}\n\n/**\n * Layout orientation for the table configuration.\n */\nexport enum TableLayout {\n  /**\n   * Renders the table vertically, with a heading on top of the table.\n   *\n   * Vertical layout is most common and the default layout.\n   */\n  VERTICAL = 1,\n\n  /**\n   * Stacks items in a tables by generating a `tbody` for each item.\n   */\n  VERTICAL_STACKED,\n\n  /**\n   * Horizontal oriented table layout renders the table headers in the first column of the table.\n   */\n  HORIZONTAL,\n}\n\nexport interface TableFieldOptions {\n  /**\n   * Optional label to add static or localized headers. If the label is not present, the\n   * field key is mapped to a i18n property.\n   */\n  label?: string | TableHeader;\n\n  /**\n   * Indicates wether the cell is linkable.\n   *\n   * If the cells is linkable, an anchor link can be generated in the table data element.\n   */\n  linkable?: boolean;\n\n  /**\n   * Component to render table header _content_ (`<th>...</th>`) for the table field.\n   *\n   * If no component is configured, the global table component for the header will be used\n   * instead.\n   */\n  headerComponent?: Type<any>;\n\n  /**\n   * Component to render table data _content_ (`<td>...</td>`) for the table field.\n   *\n   * If no component is configured, the global table component for the cell data will be used\n   * instead.\n   */\n  dataComponent?: Type<any>;\n}\n\n/**\n * The TableStructure holds the header structure of the table.\n */\nexport interface TableStructure extends TableStructureConfiguration {\n  /**\n   * The table type is a mandatory property. The type is used to identify the table\n   * configuration and is used to generate a unique outlet reference.\n   */\n  type: string;\n}\n\n/**\n * Provides the core table structure, typically being used to render table columns.\n */\nexport interface TableHeader {\n  /**\n   * The header key is used to:\n   * - generate a unique class on each table row\n   * - generate a template for each table header cell and data cell\n   * - translate the key using the translate module\n   *   (fallback in case there is no label available)\n   */\n  i18nKey?: string;\n\n  // deprecated\n  sortCode?: string;\n}\n\nexport interface TableHeaderOutletContext {\n  _type: string;\n  _field: string;\n  _options?: TableOptions;\n  /**\n   * The i18nRoot is used to build localized table headers. The i18nRoot\n   * is used as a prefix for the `_field`. Table header labels wil use the\n   * following locales:\n   *\n   * `[i18nRoot].[_field]`\n   */\n  _i18nRoot?: string;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface TableDataOutletContext extends TableHeaderOutletContext {\n  [property: string]: any;\n}\n","import { ComponentFactoryResolver, Injectable, Type } from '@angular/core';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { TableConfig } from './config/table.config';\nimport {\n  TableDataOutletContext,\n  TableHeaderOutletContext,\n  TableOptions,\n  TableStructure,\n} from './table.model';\n\n/**\n * The table renderer service adds a component for each table cells (th and td)\n * based on a fine grained configuration. Each table type can configure both global\n * components for headers and cells as well as individual components for field\n * specific cells.\n *\n * The components are added to the outlet slots for the corresponding cells. The table\n * structure and data is added to the outlet context.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TableRendererService {\n  // keep a list of outletRefs to avoid recreation\n  protected outletRefs = new Map();\n\n  constructor(\n    protected outletService: OutletService,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: TableConfig\n  ) {}\n\n  /**\n   * Adds the configured table component for the header and data.\n   */\n  add(structure: TableStructure): void {\n    structure?.cells?.forEach((field) => {\n      const thRenderer = this.getHeaderRenderer(structure, field);\n      if (thRenderer) {\n        const ref = this.getHeaderOutletRef(structure.type, field);\n        this.render(ref, thRenderer);\n      }\n      const tdRenderer = this.getDataRenderer(structure, field);\n      if (tdRenderer) {\n        const ref = this.getDataOutletRef(structure.type, field);\n        this.render(ref, tdRenderer);\n      }\n    });\n  }\n\n  protected render(outletRef: string, renderer: Type<any>) {\n    if (this.outletRefs.has(outletRef)) {\n      return;\n    }\n    this.outletRefs.set(outletRef, true);\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      renderer\n    );\n    this.outletService.add(outletRef, <any>template);\n  }\n\n  /**\n   * Returns the header render component for the given field.\n   */\n  protected getHeaderRenderer(\n    structure: TableStructure,\n    field: string\n  ): Type<any> {\n    return (\n      structure.options?.cells?.[field]?.headerComponent ||\n      structure.options?.headerComponent ||\n      this.config.tableOptions?.headerComponent\n    );\n  }\n\n  /**\n   * Returns the data render component for the given field.\n   */\n  protected getDataRenderer(\n    structure: TableStructure,\n    field: string\n  ): Type<any> {\n    return (\n      structure.options?.cells?.[field]?.dataComponent ||\n      structure.options?.dataComponent ||\n      this.config.tableOptions?.dataComponent\n    );\n  }\n\n  /**\n   * Returns the header (th) outlet reference for the given field.\n   *\n   * The outlet reference is generated as:\n   * `table.[tableType].header.[field]`\n   */\n  getHeaderOutletRef(type: string, field: string): string {\n    return `table.${type}.header.${field}`;\n  }\n\n  /**\n   * Returns the header (th) outlet context for the given field.\n   */\n  getHeaderOutletContext(\n    type: string,\n    options: TableOptions,\n    i18nRoot: string,\n    field: string\n  ): TableHeaderOutletContext {\n    return {\n      _type: type,\n      _options: options,\n      _field: field,\n      _i18nRoot: i18nRoot,\n    };\n  }\n\n  /**\n   * Returns the data (td) outlet reference for the given field.\n   *\n   * The field is generated as:\n   * `table.[tableType].data.[tableField]`\n   */\n  getDataOutletRef(type: string, field: string): string {\n    return `table.${type}.data.${field}`;\n  }\n\n  /**\n   * Returns the data (td) outlet context for the given field.\n   */\n  getDataOutletContext(\n    type: string,\n    options: TableOptions,\n    i18nRoot: string,\n    field: string,\n    data: any\n  ): TableDataOutletContext {\n    return {\n      ...data,\n      _type: type,\n      _options: options,\n      _field: field,\n      _i18nRoot: i18nRoot,\n    };\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  isDevMode,\n  Output,\n} from '@angular/core';\nimport { TableRendererService } from './table-renderer.service';\nimport {\n  TableDataOutletContext,\n  TableHeaderOutletContext,\n  TableLayout,\n  TableStructure,\n} from './table.model';\n\n/**\n * The table component provides a generic table DOM structure, with 3 layout types:\n * horizontal, vertical and _stacked vertical_ layout. The layout is driven by the\n * table structure.\n *\n * The implementation is fairly \"dumb\" and only renders string based content for TH\n * and TD elements. The actual cell rendering is delegated to a (configurable) cell\n * component. Additionally, each cell is registered as an outlet, so that customizations\n * can be done by both outlet templates and components.\n *\n * The outlet references are concatenated from the table `type` and header `key`. The\n * following snippet shows an outlet generated for a table header, for the table type\n * \"cost-center\" with a header key \"name\":\n *\n * ```\n * <th>\n *   <template cxOutlet=\"table.cost-center.header.name\">\n *   </template>\n * </th>\n * ```\n *\n * Similarly, the data cells (`<td>`) are generated with the outlet template reference\n * `table.cost-center.data.name`.\n */\n@Component({\n  selector: 'cx-table',\n  templateUrl: './table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableComponent<T> {\n  @HostBinding('attr.__cx-table-type') tableType: string;\n  @HostBinding('class.horizontal') horizontalLayout: boolean;\n  @HostBinding('class.vertical') verticalLayout: boolean;\n  @HostBinding('class.vertical-stacked') verticalStackedLayout: boolean;\n\n  private _structure: TableStructure;\n  @Input() set structure(structure: TableStructure) {\n    this._structure = structure;\n    this.init();\n  }\n  get structure(): TableStructure {\n    return this._structure;\n  }\n\n  @Input() data: T[];\n\n  /**\n   * The i18nRoot is passed into the table cell context, so that\n   * cell components can concatenate the i18n root and label.\n   */\n  @Input() i18nRoot: string;\n\n  /**\n   * Provides a mechanism to compare a matching value for each item.\n   *\n   * The `property` refers to the dataset.value property, and the value tot the\n   * matching property value.\n   */\n  @Input() currentItem: { value: any; property: string };\n\n  @Output() launch = new EventEmitter();\n\n  constructor(protected rendererService: TableRendererService) {}\n\n  init() {\n    this.verticalLayout = !this.layout || this.layout === TableLayout.VERTICAL;\n    this.verticalStackedLayout = this.layout === TableLayout.VERTICAL_STACKED;\n    this.horizontalLayout = this.layout === TableLayout.HORIZONTAL;\n\n    this.rendererService.add(this.structure);\n\n    this.addTableDebugInfo();\n  }\n\n  launchItem(item: any): void {\n    this.launch.emit(item);\n  }\n\n  /**\n   * Indicates whether the given item is the current item.\n   *\n   * The current item is driven by the `currentItem`, that holds a\n   * property and value to compare.\n   */\n  isCurrentItem(item: any): boolean {\n    if (!this.currentItem || !this.currentItem.value) {\n      return false;\n    }\n    return this.currentItem?.value === item?.[this.currentItem?.property];\n  }\n\n  /**\n   * Returns the header (th) outlet reference for the given field.\n   */\n  getHeaderOutletRef(field: string): string {\n    return this.rendererService.getHeaderOutletRef(this.type, field);\n  }\n\n  /**\n   * Returns the header (th) outlet context for the given field.\n   */\n  getHeaderOutletContext(field: string): TableHeaderOutletContext {\n    return this.rendererService.getHeaderOutletContext(\n      this.type,\n      this.options,\n      this.i18nRoot,\n      field\n    );\n  }\n\n  /**\n   * Returns the data (td) outlet reference for the given field.\n   */\n  getDataOutletRef(field: string): string {\n    return this.rendererService.getDataOutletRef(this.type, field);\n  }\n\n  /**\n   * Returns the data (td) outlet context for the given field.\n   */\n  getDataOutletContext(field: string, data: any): TableDataOutletContext {\n    return this.rendererService.getDataOutletContext(\n      this.type,\n      this.options,\n      this.i18nRoot,\n      field,\n      data\n    );\n  }\n\n  trackData(_i: number, item: any): any {\n    return JSON.stringify(item);\n  }\n\n  /**\n   * Generates the table type into the UI in devMode, so that developers\n   * can easily get the notion of the table type.\n   */\n  protected addTableDebugInfo() {\n    if (isDevMode() && this.type) {\n      this.tableType = this.type;\n    }\n  }\n\n  /**\n   * Helper method to return the deeply nested orientation configuration.\n   */\n  private get layout() {\n    return this.structure?.options?.layout;\n  }\n\n  /**\n   * Helper method to return the deeply nested type.\n   */\n  private get type() {\n    return this.structure?.type;\n  }\n\n  private get options() {\n    return this.structure?.options;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { defaultTableConfig } from './config/default-table.config';\nimport { TableDataCellModule } from './table-data-cell/table-data-cell.module';\nimport { TableHeaderCellModule } from './table-header-cell/table-header-cell.module';\nimport { TableComponent } from './table.component';\n\n/**\n * The TableModule provides a table component that is driven by (responsible) configuration.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    TableHeaderCellModule,\n    TableDataCellModule,\n  ],\n  declarations: [TableComponent],\n  exports: [TableComponent],\n  providers: [provideConfig(defaultTableConfig)],\n})\nexport class TableModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport {\n  ResponsiveTableConfiguration,\n  TableConfig,\n} from './config/table.config';\nimport { TableStructure, TableStructureConfiguration } from './table.model';\n\n/**\n * Responsive table service.\n *\n * The `TableService` is used to build a `TableStructure` by configuration. The configuration\n * allows for breakpoint specific configuration, so that the table can differentiate for\n * various screen sizes.\n *\n * While there are some global options, the configuration is mainly driven by the table _type_.\n *\n * If there is no table configuration for the given type found, a table header structure\n * is generated based on the actual data (if available) or randomly by generating 5 random headers.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TableService {\n  constructor(\n    protected breakpointService: BreakpointService,\n    protected config: TableConfig\n  ) {}\n\n  /**\n   * Builds the table structure.\n   *\n   * @param tableType The table type is used  to find the specific table configuration.\n   * @param defaultStructure (optional) Default table structure that contains fallback options. More specific options are merged with the default structure.\n   * @param data$ (optional) The actual data can be passed in to generate the table structure based on actual data.\n   */\n  buildStructure(\n    tableType: string,\n    defaultStructure?: ResponsiveTableConfiguration\n  ): Observable<TableStructure> {\n    if (this.hasTableConfig(tableType)) {\n      return this.buildStructureFromConfig(tableType, defaultStructure);\n    } else {\n      return this.buildRandomStructure(tableType);\n    }\n  }\n\n  /**\n   * Returns the table structure by configuration. The configuration can be\n   * breakpoint-driven, which means that an alternative header structure can\n   * be created per screen size.\n   *\n   * The breakpoint is resolved by teh `BreakpointService`.\n   */\n  protected buildStructureFromConfig(\n    type: string,\n    defaultStructure?: ResponsiveTableConfiguration\n  ): Observable<TableStructure> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => ({\n        ...this.getTableConfig(type, breakpoint, defaultStructure),\n        type,\n      }))\n    );\n  }\n\n  /**\n   * Finds all applicable table configuration for the given type and breakpoint.\n   * The default table configuration is merged with all relevant breakpoint\n   * configurations.\n   *\n   * This allows to have some default configurations that apply to all screens, and\n   * add configuration options for some screens.\n   */\n  protected getTableConfig(\n    type: string,\n    breakpoint: BREAKPOINT,\n    defaultStructure?: ResponsiveTableConfiguration\n  ): TableStructureConfiguration {\n    if (!this.config.table?.[type]) {\n      return null;\n    }\n\n    const relevant = this.findRelevantBreakpoints(breakpoint);\n\n    const closestBreakpoint = [...relevant]\n      .reverse()\n      .find((br) => !!this.config.table[type][br]?.cells);\n    const cells =\n      this.config.table[type][closestBreakpoint]?.cells ||\n      this.config.table[type].cells ||\n      defaultStructure?.cells;\n\n    // add all default table configurations\n    let options = {\n      ...defaultStructure?.options,\n      ...this.config.table[type].options,\n    };\n\n    // We merge all table options for smaller breakpoints into the global\n    // options, so we inherit options.\n    relevant.forEach((br) => {\n      options = {\n        ...options,\n        ...defaultStructure?.[br]?.options,\n        ...this.config.table[type]?.[br]?.options,\n      };\n    });\n\n    return { cells, options };\n  }\n\n  /**\n   * Generates the table structure by the help of the first data row.\n   */\n  protected buildStructureFromData(\n    type: string,\n    data$: Observable<any>\n  ): Observable<TableStructure> {\n    this.logWarning(\n      `No table configuration found to render table with type \"${type}\". The table header for \"${type}\" is generated by the help of the first data item`\n    );\n    return data$.pipe(\n      map((data: any[]) => {\n        const cells = Object.keys(data?.[0]).map((key) => key);\n        return { type, cells } as TableStructure;\n      })\n    );\n  }\n\n  /**\n   * As a last resort, the table structure is randomly created. The random structure\n   * contains 5 headers, so that some of the unknown data is visualized.\n   */\n  protected buildRandomStructure(type: string): Observable<TableStructure> {\n    this.logWarning(\n      `No data available for \"${type}\", a random structure is generated (with hidden table headers).`\n    );\n    return of({\n      type,\n      cells: ['unknown', 'unknown', 'unknown', 'unknown', 'unknown'],\n    });\n  }\n\n  /**\n   * Finds all the breakpoints can contribute to the table configuration, from small\n   * to current.\n   *\n   * For example, if the current breakpoint is `MD`, this returns `[XS, SM, MD]`.\n   */\n  protected findRelevantBreakpoints(breakpoint: BREAKPOINT): BREAKPOINT[] {\n    const current = this.breakpointService.breakpoints.indexOf(breakpoint);\n    return this.breakpointService.breakpoints.slice(0, current + 1);\n  }\n\n  /**\n   * Indicates if the there is a configuration for the table available.\n   */\n  protected hasTableConfig(tableType: string): boolean {\n    return !!this.config.table?.[tableType];\n  }\n\n  /**\n   * Logs a message in the console to increase developer experience.\n   *\n   * The message is only logged in dev mode.\n   */\n  private logWarning(message) {\n    if (isDevMode()) {\n      console.warn(message);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService.getRouterState().pipe(\n      map((routingData) => routingData.state.params.orderCode),\n      distinctUntilChanged()\n    );\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, FormGroup, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email && (!email.length || email.match(EMAIL_PATTERN))\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return password && (!password.length || password.match(PASSWORD_PATTERN))\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if control's value is euqal or greater than 0\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxNegativeAmount' validator error\n   * @memberof CustomFormValidators\n   */\n  static mustBePositive(control: AbstractControl): ValidationErrors | null {\n    const amount = control.value as number;\n\n    return amount >= 0 ? null : { cxNegativeAmount: true };\n  }\n\n  /**\n   * Checks if control's value does not contain any special characters\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxContainsSpecialCharacters' validator error\n   * @memberof CustomFormValidators\n   */\n  static noSpecialCharacters(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const forbiddenChars = ['/'];\n    const str = String(control.value);\n    const containsSpecialChars = forbiddenChars.some((char) =>\n      str.includes(char)\n    );\n\n    return !containsSpecialChars ? null : { cxContainsSpecialCharacters: true };\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import {\n  Injectable,\n  InjectFlags,\n  Injector,\n  NgModuleRef,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CMSComponentConfig,\n  CmsComponentMapping,\n  CmsConfig,\n  ConfigChunk,\n  ConfigInitializerService,\n  deepMerge,\n  DefaultConfigChunk,\n  FeatureModuleConfig,\n  LazyModulesService,\n} from '@spartacus/core';\nimport { defer, forkJoin, merge, Observable, of } from 'rxjs';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\n\ninterface FeatureInstance extends FeatureModuleConfig {\n  moduleRef?: NgModuleRef<any>;\n  dependencyModuleRefs?: NgModuleRef<any>[];\n  componentsMappings?: CMSComponentConfig;\n}\n\n/**\n * Service responsible for resolving cms config based feature modules.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureModulesService implements OnDestroy {\n  // feature modules configuration\n  private featureModulesConfig?: {\n    [featureName: string]: FeatureModuleConfig;\n  };\n\n  // maps componentType to feature\n  private componentFeatureMap: Map<string, string> = new Map();\n\n  /*\n   * Contains either FeatureInstance or FeatureInstance resolver for not yet\n   * resolved feature modules\n   */\n  private features: Map<string, Observable<FeatureInstance>> = new Map();\n\n  constructor(\n    protected configInitializer: ConfigInitializerService,\n    protected lazyModules: LazyModulesService\n  ) {\n    this.initFeatureMap();\n  }\n\n  private async initFeatureMap(): Promise<void> {\n    const config: CmsConfig = await this.configInitializer.getStableConfig(\n      'featureModules'\n    );\n\n    this.featureModulesConfig = config.featureModules ?? {};\n\n    for (const [featureName, featureConfig] of Object.entries(\n      this.featureModulesConfig\n    )) {\n      if (featureConfig?.module && featureConfig?.cmsComponents?.length) {\n        for (const component of featureConfig.cmsComponents) {\n          this.componentFeatureMap.set(component, featureName);\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if there is feature module configuration that covers specified\n   * component type\n   */\n  hasFeatureFor(componentType: string): boolean {\n    return this.componentFeatureMap.has(componentType);\n  }\n\n  /**\n   * Return full CmsComponent mapping defined in feature module\n   */\n  getCmsMapping(componentType: string): Observable<CmsComponentMapping> {\n    const feature = this.componentFeatureMap.get(componentType);\n\n    return this.resolveFeature(feature).pipe(\n      map(\n        (featureInstance) => featureInstance.componentsMappings[componentType]\n      )\n    );\n  }\n\n  /**\n   * Get all injectors for feature and its dependencies\n   *\n   * As it's a synchronous method, it works only for already resolved features,\n   * returning undefined otherwise\n   */\n  getInjectors(componentType: string): Injector[] | undefined {\n    const feature = this.componentFeatureMap.get(componentType);\n    let injectors;\n\n    // we are returning injectors only for already resolved features\n    this.features\n      .get(feature)\n      ?.subscribe((featureInstance) => {\n        injectors = [\n          // feature module injector\n          featureInstance.moduleRef.injector,\n          // injectors from dependency modules\n          ...featureInstance.dependencyModuleRefs.map(\n            (moduleRef) => moduleRef.injector\n          ),\n        ];\n      })\n      .unsubscribe();\n    return injectors;\n  }\n\n  /**\n   * Resolve feature based on feature name, if feature was not yet resolved\n   *\n   * It will first resolve all module dependencies if defined\n   */\n  private resolveFeature(featureName: string): Observable<FeatureInstance> {\n    return defer(() => {\n      if (!this.features.has(featureName)) {\n        const featureConfig = this.featureModulesConfig[featureName];\n\n        if (!featureConfig?.module) {\n          throw new Error(\n            'No module defined for Feature Module ' + featureName\n          );\n        }\n\n        // resolve dependencies first (if any)\n        const depsResolve = featureConfig.dependencies?.length\n          ? forkJoin(\n              featureConfig.dependencies.map((depModuleFunc) =>\n                this.lazyModules.resolveDependencyModuleInstance(depModuleFunc)\n              )\n            )\n          : of(undefined);\n\n        this.features.set(\n          featureName,\n          depsResolve.pipe(\n            switchMap((deps) =>\n              this.resolveFeatureModule(featureConfig, deps, featureName)\n            ),\n            shareReplay()\n          )\n        );\n      }\n\n      return this.features.get(featureName);\n    });\n  }\n\n  /**\n   * Initialize feature module by returning feature instance\n   */\n  private resolveFeatureModule(\n    featureConfig: FeatureModuleConfig,\n    dependencyModuleRefs: NgModuleRef<any>[] = [],\n    feature: string\n  ): Observable<FeatureInstance> {\n    return this.lazyModules\n      .resolveModuleInstance(featureConfig?.module, feature)\n      .pipe(\n        map((moduleRef) => {\n          const featureInstance: FeatureInstance = {\n            ...featureConfig,\n            moduleRef,\n            dependencyModuleRefs,\n            componentsMappings: {},\n          };\n\n          // resolve configuration for feature module\n          const resolvedConfiguration = this.resolveFeatureConfiguration(\n            moduleRef.injector\n          );\n\n          // extract cms components configuration from feature config\n          for (const componentType of featureInstance.cmsComponents) {\n            featureInstance.componentsMappings[componentType] =\n              resolvedConfiguration.cmsComponents[componentType];\n          }\n          return featureInstance;\n        })\n      );\n  }\n\n  /**\n   * Returns configuration provided in feature module\n   */\n  private resolveFeatureConfiguration(featureInjector: Injector): CmsConfig {\n    // get config chunks from feature lib\n    const featureConfigChunks = featureInjector.get<any[]>(\n      ConfigChunk,\n      [],\n      InjectFlags.Self\n    );\n    // get default config chunks from feature lib\n    const featureDefaultConfigChunks = featureInjector.get<any[]>(\n      DefaultConfigChunk,\n      [],\n      InjectFlags.Self\n    );\n\n    return deepMerge(\n      {},\n      ...(featureDefaultConfigChunks ?? []),\n      ...(featureConfigChunks ?? [])\n    ) as CmsConfig;\n  }\n\n  ngOnDestroy(): void {\n    // clean up all initialized features\n    merge(...Array.from(this.features.values())).subscribe((featureInstance) =>\n      featureInstance.moduleRef?.destroy()\n    );\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, Injector, PLATFORM_ID } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  CmsComponentChildRoutesConfig,\n  CmsComponentMapping,\n  CmsConfig,\n  deepMerge,\n  DeferLoadingStrategy,\n} from '@spartacus/core';\nimport { defer, forkJoin, Observable, of } from 'rxjs';\nimport { mapTo, share, tap } from 'rxjs/operators';\nimport { FeatureModulesService } from './feature-modules.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentsService {\n  private missingComponents: string[] = [];\n  private mappings: { [componentType: string]: CmsComponentMapping } = {};\n\n  // contains\n  private mappingResolvers: Map<\n    string,\n    Observable<CmsComponentMapping>\n  > = new Map();\n\n  /**\n   * @deprecated since 2.1\n   * constructor(config: CmsConfig, platformId: Object);\n   */\n  constructor(\n    protected config: CmsConfig,\n    @Inject(PLATFORM_ID) protected platformId: Object,\n    protected featureModules?: FeatureModulesService\n  ) {}\n\n  /**\n   * Should be called to make sure all component mappings are determined,\n   * especially lazy loaded ones.\n   *\n   * It's recommended way to make sure all other methods of CmsComponentService\n   * will be able to work synchronously for asked component types and avoid risk\n   * of potential errors that could be thrown otherwise.\n   */\n  determineMappings(componentTypes: string[]): Observable<string[]> {\n    return defer(() => {\n      // we use defer, to be sure the logic below used to compose final observable\n      // will be executed at subscription time (with up to date state at the time,\n      // when it will be needed)\n      const featureResolvers = [];\n\n      for (const componentType of componentTypes) {\n        if (!this.mappings[componentType]) {\n          const staticConfig = this.config.cmsComponents[componentType];\n\n          // check if this component type is managed by feature module\n          if (this.featureModules.hasFeatureFor(componentType)) {\n            featureResolvers.push(\n              // we delegate populating this.mappings to feature resolver\n              this.getFeatureMappingResolver(componentType, staticConfig)\n            );\n          } else {\n            // simply use only static config\n            this.mappings[componentType] = staticConfig;\n          }\n        }\n      }\n\n      if (featureResolvers.length) {\n        return forkJoin(featureResolvers).pipe(mapTo(componentTypes));\n      } else {\n        return of(componentTypes);\n      }\n    });\n  }\n\n  private getFeatureMappingResolver(\n    componentType: string,\n    staticConfig?: CmsComponentMapping\n  ): Observable<CmsComponentMapping> {\n    if (!this.mappingResolvers.has(componentType)) {\n      const mappingResolver$ = this.featureModules\n        .getCmsMapping(componentType)\n        .pipe(\n          tap((featureComponentMapping) => {\n            // We treat cms mapping configuration from a feature as a default,\n            // that can be overridden by app/static configuration\n            this.mappings[componentType] = deepMerge(\n              {},\n              featureComponentMapping,\n              staticConfig\n            );\n            this.mappingResolvers.delete(componentType);\n          }),\n          share()\n        );\n      this.mappingResolvers.set(componentType, mappingResolver$);\n    }\n    return this.mappingResolvers.get(componentType);\n  }\n\n  getInjectors(componentType: string): Injector[] {\n    return (\n      (this.featureModules.hasFeatureFor(componentType) &&\n        this.featureModules.getInjectors(componentType)) ??\n      []\n    );\n  }\n\n  /**\n   * Return collection of component mapping configuration for specified list of\n   * component types.\n   *\n   * If component mapping can't be determined synchronously, for example, lazy\n   * loaded one, it will throw an error.\n   *\n   * To make sure component mapping is available, determineMappings()\n   * should be called and completed first.\n   */\n  getMapping(componentType: string): CmsComponentMapping {\n    const componentConfig =\n      this.mappings[componentType] ??\n      this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  /**\n   * Checks, if component should be rendered as some components\n   * could be disabled for server side renderings\n   */\n  shouldRender(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getMapping(componentType)?.disableSSR);\n  }\n\n  /**\n   * Return DeferLoadingStrategy for component type.\n   */\n  getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    return this.config.cmsComponents?.[componentType]?.deferLoading;\n  }\n\n  /**\n   * Get cms driven child routes for components\n   */\n  getChildRoutes(componentTypes: string[]): CmsComponentChildRoutesConfig {\n    const configs = [];\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        configs.push(this.getMapping(componentType)?.childRoutes ?? []);\n      }\n    }\n\n    return this.standardizeChildRoutes(configs);\n  }\n\n  /**\n   * Standardizes the format of `childRoutes` config.\n   *\n   * Some `childRoutes` configs are simple arrays of Routes (without the notion of the parent route).\n   * But some configs can be an object with children routes and their parent defined in separate property.\n   */\n  protected standardizeChildRoutes(\n    childRoutesConfigs: (Route[] | CmsComponentChildRoutesConfig)[]\n  ): CmsComponentChildRoutesConfig {\n    const result: CmsComponentChildRoutesConfig = { children: [] };\n\n    (childRoutesConfigs || []).forEach((config) => {\n      if (Array.isArray(config)) {\n        result.children.push(...config);\n      } else {\n        result.children.push(...(config.children || []));\n        if (config.parent) {\n          result.parent = config.parent;\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Get cms driven guards for components\n   */\n  getGuards(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getMapping(componentType)?.guards?.forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  /**\n   * Get i18n keys associated with components\n   */\n  getI18nKeys(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        this.getMapping(componentType)?.i18nKeys?.forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n}\n","import {\n  AbstractType,\n  InjectFlags,\n  InjectionToken,\n  Injector,\n  Type,\n} from '@angular/core';\n\nconst NOT_FOUND_SYMBOL = {};\n\n/**\n * CombinedInjector is able to combine more than one injector together in a way\n * that main injector is supported by complementary injectors.\n *\n * Should be used as a parent injector for components, when we want to have access\n * to both providers from component hierarchical injectors and providers from any\n * number of additional injectors (lazy loaded modules for example).\n */\nexport class CombinedInjector implements Injector {\n  /**\n   * @param mainInjector Component hierarchical injector\n   * @param complementaryInjectors Additional injector that will be taken into an account when resolving dependencies\n   */\n  constructor(\n    private mainInjector: Injector,\n    private complementaryInjectors: Injector[]\n  ) {}\n\n  get<T>(\n    token: Type<T> | InjectionToken<T> | AbstractType<T>,\n    notFoundValue?: T,\n    flags?: InjectFlags\n  ): T;\n  get(token: any, notFoundValue?: any): any;\n  get(token, notFoundValue?: any, flags?: InjectFlags): any {\n    // tslint:disable-next-line:no-bitwise\n    if (flags & InjectFlags.Self) {\n      if (notFoundValue !== undefined) {\n        return notFoundValue;\n      }\n      throw new Error(\n        \"CombinedInjector should be used as a parent injector / doesn't support self dependencies\"\n      );\n    }\n\n    for (const injector of [\n      this.mainInjector,\n      ...this.complementaryInjectors,\n    ]) {\n      // First we are resolving providers provided at Self level in all injectors,\n      // starting with main injector and going through complementary ones...\n      const service = injector.get(token, NOT_FOUND_SYMBOL, InjectFlags.Self);\n      if (service !== NOT_FOUND_SYMBOL) {\n        return service;\n      }\n    }\n    // ...and then fallback to main injector passing the flag\n    return this.mainInjector.get(token, notFoundValue, flags);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model/cms-component-data';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsComponentsService } from '../../../services/cms-components.service';\nimport { CombinedInjector } from '../../../../shared/utils/combined-injector';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsComponentsService.getMapping(type)?.providers ?? [];\n\n    const complementaryInjectors = this.cmsComponentsService.getInjectors(type);\n\n    if (complementaryInjectors?.length) {\n      parentInjector = new CombinedInjector(\n        parentInjector ?? this.injector,\n        complementaryInjectors\n      );\n    }\n\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Applicable {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsComponentsService } from '../../services/cms-components.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService\n  ) {}\n\n  ngOnInit() {\n    this.cmsComponentsService\n      .determineMappings([this.cxComponentWrapper.flexType])\n      .subscribe(() => {\n        if (\n          this.cmsComponentsService.shouldRender(\n            this.cxComponentWrapper.flexType\n          )\n        ) {\n          this.launchComponent();\n        }\n      });\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsComponentsService.getMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n        this.injector.get(ChangeDetectorRef).markForCheck();\n      });\n  }\n\n  private decorate(elementRef: ElementRef): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      elementRef.nativeElement,\n      this.renderer,\n      { componentData: this.cxComponentWrapper }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return typeof componentMapping.component === 'function';\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { DefaultComponentHandler } from './default-component.handler';\nimport { switchMap } from 'rxjs/operators';\nimport { ComponentHandler } from './component-handler';\n\n/**\n * Lazy component handler used for launching lazy loaded cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LazyComponentHandler implements ComponentHandler {\n  constructor(protected defaultHandler: DefaultComponentHandler) {}\n\n  /**\n   * We want to mach dynamic import signature () => import('')\n   */\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      this.isNotClass(componentMapping.component)\n    );\n  }\n\n  private isNotClass(symbol: any): boolean {\n    const signature = symbol.toString().substr(0, 20).replace(' ', '');\n    return signature.startsWith('function()') || signature.startsWith('()=>');\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return from(componentMapping.component()).pipe(\n      switchMap((component) =>\n        this.defaultHandler.launcher(\n          { ...componentMapping, component },\n          viewContainerRef,\n          elementInjector\n        )\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { LazyComponentHandler } from './handlers/lazy-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: LazyComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { AuthService, CsAgentAuthService, WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected csAgentAuthService: CsAgentAuthService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.csAgentAuthService.logoutCustomerSupportAgent();\n  }\n\n  logoutCustomer(): void {\n    this.authService.initLogout();\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.csAgentAuthService.isCustomerEmulated();\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimizations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmService,\n  AuthService,\n  CsAgentAuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  customerSupportAgentLoggedIn$: Observable<boolean>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  isCollapsed$: Observable<boolean>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected csAgentAuthService: CsAgentAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected asmService: AsmService\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSupportAgentLoggedIn$ = this.csAgentAuthService.isCustomerSupportAgentLoggedIn();\n    this.csAgentTokenLoading$ = this.csAgentAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.isUserLoggedIn().pipe(\n      switchMap((isLoggedIn) => {\n        if (isLoggedIn) {\n          this.handleCustomerSessionStartRedirection();\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n    this.isCollapsed$ = this.asmService\n      .getAsmUiState()\n      .pipe(map((uiState) => uiState.collapsed));\n  }\n\n  private handleCustomerSessionStartRedirection(): void {\n    this.asmComponentService\n      .isCustomerEmulationSessionInProgress()\n      .pipe(take(1))\n      .subscribe((isCustomerEmulated) => {\n        if (this.startingCustomerSession && isCustomerEmulated) {\n          this.startingCustomerSession = false;\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.routingService.go('/');\n        }\n      });\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.csAgentAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.csAgentAuthService.startCustomerEmulationSession(customerId);\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, RoutingService, UserIdService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef,\n    private userIdService: UserIdService\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.userIdService\n        .getUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AsmService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm-toggle-ui',\n  templateUrl: './asm-toggle-ui.component.html',\n  styleUrls: ['./asm-toggle-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmToggleUiComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  isCollapsed: boolean;\n\n  constructor(protected asmService: AsmService) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      this.asmService.getAsmUiState().subscribe((uiState) => {\n        this.isCollapsed = uiState.collapsed;\n      })\n    );\n  }\n\n  toggleUi(): void {\n    this.asmService.updateAsmUiState({ collapsed: !this.isCollapsed });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\n\nexport const defaultAsmLayoutConfig: LayoutConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AsmModule as AsmCoreModule,\n  I18nModule,\n  provideConfig,\n} from '@spartacus/core';\nimport { FormErrorsModule } from '../../shared/index';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { AsmToggleUiComponent } from './asm-toggle-ui/asm-toggle-ui.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { defaultAsmLayoutConfig } from './default-asm-layout.config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n    AsmToggleUiComponent,\n  ],\n  providers: [provideConfig(defaultAsmLayoutConfig)],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Returns an observable for the current product\n   * @returns Product\n   * @returns null if product can't be found\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      distinctUntilChanged(),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((product) => product !== undefined)\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  addedEntryWasMerged$: Observable<boolean>;\n  /**\n   * @deprecated since 3.0, set numberOfEntriesBeforeAdd instead\n   */\n  increment: boolean;\n  numberOfEntriesBeforeAdd: number;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.addedEntryWasMerged$ = this.loaded$.pipe(\n      filter((loaded) => loaded),\n      switchMapTo(this.cartService.getEntries()),\n      map((entries) => entries.length === this.numberOfEntriesBeforeAdd)\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, Product } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  protected numberOfEntriesBeforeAdd = 0;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    this.activeCartService\n      .getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        this.numberOfEntriesBeforeAdd = entries.length;\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n      });\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    // Display last entry for new product code. This always corresponds to\n    // our new item, independently of whether merging occured or not\n    modalInstance.entry$ = this.activeCartService.getLastEntry(\n      this.productCode\n    );\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.numberOfEntriesBeforeAdd = this.numberOfEntriesBeforeAdd;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n\n    this.cart$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getActiveCartId(),\n      this.customerCouponService.getCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      ),\n    ]).pipe(\n      tap(\n        ([cart, activeCardId, customerCoupons]: [\n          Cart,\n          string,\n          CustomerCouponSearchResult\n        ]) => {\n          this.cartId = activeCardId;\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n        }\n      ),\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n    );\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  OrderEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { CartItemComponentOptions } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: OrderEntry[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: OrderEntry[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): OrderEntry[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: OrderEntry[]): void {\n    if (!items) {\n      this._items = [];\n      return;\n    }\n\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const controlName = this.getControlName(item);\n      const group = new FormGroup({\n        entryNumber: new FormControl(item.entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(controlName, group);\n    });\n  }\n\n  protected getControlName(item: OrderEntry): string {\n    return item.entryNumber.toString();\n  }\n\n  removeEntry(item: OrderEntry): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[this.getControlName(item)];\n  }\n\n  getControl(item: OrderEntry): Observable<FormGroup> {\n    return this.form.get(this.getControlName(item)).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(this.getControlName(item)))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n/**\n * @deprecated since 3.0 - use `OrderEntry` instead\n */\nexport interface Item {\n  entryNumber?: number;\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: OrderEntry;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n  selectiveCartEnabled: boolean;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.selectiveCartEnabled = this.selectiveCartService.isEnabled();\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartEnabled\n        ? this.selectiveCartService.getLoaded()\n        : of(false),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn && this.selectiveCartEnabled\n          ? cartLoaded && sflLoaded\n          : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: OrderEntry) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, Cart, SemanticPathService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          return this.router.parseUrl(this.semanticPathService.get('home'));\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, Cart, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.isEnabled()\n          ? this.selectiveCartService.getCart()\n          : of({} as Cart),\n        this.activeCartService.getLoading(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart, loadingCart]) => {\n          const exclude = (arr, args) =>\n            arr.filter((item) => args.every((arg) => arg !== item));\n          return Object.keys(cart).length === 0 && loadingCart\n            ? exclude(slots, [\n                'TopContent',\n                'CenterRightContentSlot',\n                'EmptyCartMiddleContent',\n              ])\n            : cart.totalItems\n            ? exclude(slots, ['EmptyCartMiddleContent'])\n            : selectiveCart.totalItems\n            ? exclude(slots, [\n                'EmptyCartMiddleContent',\n                'CenterRightContentSlot',\n              ])\n            : exclude(slots, ['TopContent', 'CenterRightContentSlot']);\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: OrderEntry) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { SaveForLaterComponent } from './save-for-later.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n  PAYMENT_TYPE = 'paymentType',\n}\n\nexport const checkoutShippingSteps = [\n  CheckoutStepType.SHIPPING_ADDRESS,\n  CheckoutStepType.DELIVERY_MODE,\n];\n\nexport const checkoutPaymentSteps = [\n  CheckoutStepType.PAYMENT_DETAILS,\n  CheckoutStepType.PAYMENT_TYPE,\n  CheckoutStepType.SHIPPING_ADDRESS,\n];\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n  disabled?: boolean;\n}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DeliveryMode } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(private checkoutConfig: CheckoutConfig) {}\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  B2BUser,\n  B2BUserGroup,\n  GlobalMessageService,\n  GlobalMessageType,\n  SemanticPathService,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return combineLatest([\n      this.authService.isUserLoggedIn(),\n      this.activeCartService.getAssignedUser(),\n      this.userService.get(),\n    ]).pipe(\n      map(([isLoggedIn, cartUser, user]: [boolean, User, User | B2BUser]) => {\n        if (!isLoggedIn) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(cartUser);\n          }\n          this.authRedirectService.reportAuthGuard();\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            return this.router.createUrlTree(\n              [this.semanticPathService.get('login')],\n              { queryParams: { forced: true } }\n            );\n          } else {\n            return this.router.parseUrl(this.semanticPathService.get('login'));\n          }\n        } else if ('roles' in user) {\n          const roles = (<B2BUser>user).roles;\n          if (roles.includes(B2BUserGroup.B2B_CUSTOMER_GROUP)) {\n            return true;\n          } else {\n            this.globalMessageService.add(\n              { key: 'checkout.invalid.accountType' },\n              GlobalMessageType.MSG_TYPE_WARNING\n            );\n            return false;\n          }\n        }\n        return isLoggedIn;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingConfigService, RoutingService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutStepService {\n  // initial enabled steps\n  allSteps: CheckoutStep[];\n\n  readonly steps$: BehaviorSubject<CheckoutStep[]> = new BehaviorSubject<\n    CheckoutStep[]\n  >(undefined);\n\n  readonly activeStepIndex$: Observable<\n    number\n  > = this.routingService.getRouterState().pipe(\n    switchMap((router) => {\n      const activeStepUrl = router.state.context.id;\n      return this.steps$.pipe(\n        map((steps) => {\n          let activeIndex;\n          steps.forEach((step, index) => {\n            const routeUrl = `/${\n              this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n            }`;\n            if (routeUrl === activeStepUrl) {\n              activeIndex = index;\n            }\n          });\n          return activeIndex;\n        })\n      );\n    })\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected checkoutConfig: CheckoutConfig,\n    protected routingConfigService: RoutingConfigService\n  ) {\n    this.resetSteps();\n  }\n\n  back(activatedRoute: ActivatedRoute): void {\n    const previousUrl = this.getPreviousCheckoutStepUrl(activatedRoute);\n    this.routingService.go(previousUrl === null ? 'cart' : previousUrl);\n  }\n\n  next(activatedRoute: ActivatedRoute): void {\n    const nextUrl = this.getNextCheckoutStepUrl(activatedRoute);\n    this.routingService.go(nextUrl);\n  }\n\n  goToStepWithIndex(stepIndex: number): void {\n    this.routingService.go(\n      this.getStepUrlFromStepRoute(this.allSteps[stepIndex].routeName)\n    );\n  }\n\n  getBackBntText(activatedRoute: ActivatedRoute): string {\n    if (this.getPreviousCheckoutStepUrl(activatedRoute) === null) {\n      return 'checkout.backToCart';\n    }\n    return 'common.back';\n  }\n\n  resetSteps(): void {\n    this.allSteps = this.checkoutConfig.checkout.steps\n      .filter((step) => !step.disabled)\n      .map((x) => Object.assign({}, x));\n    this.steps$.next(this.allSteps);\n  }\n\n  disableEnableStep(\n    currentStepType: CheckoutStepType,\n    disabled: boolean\n  ): void {\n    const currentStep = this.allSteps.find((step) =>\n      step.type.includes(currentStepType)\n    );\n    if (currentStep && currentStep.disabled !== disabled) {\n      currentStep.disabled = disabled;\n      this.steps$.next(this.allSteps.filter((step) => !step.disabled));\n    }\n  }\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.allSteps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.allSteps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    if (stepIndex >= 0) {\n      let i = 1;\n      while (\n        this.allSteps[stepIndex + i] &&\n        this.allSteps[stepIndex + i].disabled\n      ) {\n        i++;\n      }\n      const nextStep = this.allSteps[stepIndex + i];\n      if (nextStep) {\n        return this.getStepUrlFromStepRoute(nextStep.routeName);\n      }\n    }\n    return null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    if (stepIndex >= 0) {\n      let i = 1;\n      while (\n        this.allSteps[stepIndex - i] &&\n        this.allSteps[stepIndex - i].disabled\n      ) {\n        i++;\n      }\n      const previousStep = this.allSteps[stepIndex - i];\n      if (previousStep) {\n        return this.getStepUrlFromStepRoute(previousStep.routeName);\n      }\n    }\n    return null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    const stepIndex = this.allSteps.findIndex(\n      (step) =>\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n    );\n    return stepIndex === -1 ? null : stepIndex;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.allSteps.findIndex((step: CheckoutStep) =>\n          step[key].includes(value)\n        )\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutStepService } from '../services/checkout-step.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected checkoutStepService: CheckoutStepService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutStepService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutStepService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\nimport { CheckoutStepService } from '../../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressMobileBottomComponent {\n  private _steps$: BehaviorSubject<CheckoutStep[]> = this.checkoutStepService\n    .steps$;\n\n  constructor(protected checkoutStepService: CheckoutStepService) {}\n\n  activeStepIndex: number;\n  activeStepIndex$: Observable<\n    number\n  > = this.checkoutStepService.activeStepIndex$.pipe(\n    tap((index) => (this.activeStepIndex = index))\n  );\n\n  get steps$(): Observable<CheckoutStep[]> {\n    return this._steps$.asObservable();\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport {\n  CheckoutCostCenterService,\n  PaymentTypeService,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStepService } from '../services/checkout-step.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutStepsSetGuard implements CanActivate {\n  constructor(\n    protected paymentTypeService: PaymentTypeService,\n    protected checkoutStepService: CheckoutStepService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutCostCenterService: CheckoutCostCenterService,\n    protected router: Router\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    _: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    let currentIndex = -1;\n    const currentRouteUrl = '/' + route.url.join('/');\n\n    // check whether the previous step is set\n    return combineLatest([\n      this.checkoutStepService.steps$,\n      this.paymentTypeService.isAccountPayment(),\n    ]).pipe(\n      tap(([, isAccount]) => {\n        this.checkoutStepService.disableEnableStep(\n          CheckoutStepType.PAYMENT_DETAILS,\n          isAccount\n        );\n      }),\n      take(1),\n      switchMap(([steps, isAccount]) => {\n        currentIndex = steps.findIndex((step) => {\n          const stepRouteUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          return stepRouteUrl === currentRouteUrl;\n        });\n        // get current step\n        let currentStep: CheckoutStep;\n        if (currentIndex >= 0) {\n          currentStep = steps[currentIndex];\n        }\n        if (Boolean(currentStep)) {\n          return this.isStepSet(steps[currentIndex - 1], isAccount);\n        } else {\n          if (isDevMode()) {\n            console.warn(\n              `Missing step with route '${currentRouteUrl}' in checkout configuration or this step is disabled.`\n            );\n          }\n          return of(this.getUrl('checkout'));\n        }\n      })\n    );\n  }\n\n  protected isStepSet(\n    step: CheckoutStep,\n    isAccountPayment\n  ): Observable<boolean | UrlTree> {\n    if (step && !step.disabled) {\n      switch (step.type[0]) {\n        case CheckoutStepType.PAYMENT_TYPE: {\n          return this.isPaymentTypeSet(step);\n        }\n        case CheckoutStepType.SHIPPING_ADDRESS: {\n          return this.isShippingAddressAndCostCenterSet(step, isAccountPayment);\n        }\n        case CheckoutStepType.DELIVERY_MODE: {\n          return this.isDeliveryModeSet(step);\n        }\n        case CheckoutStepType.PAYMENT_DETAILS: {\n          return this.isPaymentDetailsSet(step);\n        }\n        case CheckoutStepType.REVIEW_ORDER: {\n          break;\n        }\n      }\n    }\n    return of(true);\n  }\n\n  protected isPaymentTypeSet(\n    step: CheckoutStep\n  ): Observable<boolean | UrlTree> {\n    return this.paymentTypeService.getSelectedPaymentType().pipe(\n      map((paymentType: string) => {\n        if (Boolean(paymentType)) {\n          return true;\n        } else {\n          return this.getUrl(step.routeName);\n        }\n      })\n    );\n  }\n\n  protected isShippingAddressAndCostCenterSet(\n    step: CheckoutStep,\n    isAccountPayment: boolean\n  ): Observable<boolean | UrlTree> {\n    return combineLatest([\n      this.checkoutDetailsService.getDeliveryAddress(),\n      this.checkoutCostCenterService.getCostCenter(),\n    ]).pipe(\n      map(([deliveryAddress, costCenter]) => {\n        if (isAccountPayment) {\n          if (\n            deliveryAddress &&\n            Object.keys(deliveryAddress).length &&\n            Boolean(costCenter)\n          ) {\n            return true;\n          } else {\n            return this.getUrl(step.routeName);\n          }\n        } else {\n          if (\n            deliveryAddress &&\n            Object.keys(deliveryAddress).length &&\n            costCenter === undefined\n          ) {\n            return true;\n          } else {\n            return this.getUrl(step.routeName);\n          }\n        }\n      })\n    );\n  }\n\n  protected isDeliveryModeSet(\n    step: CheckoutStep\n  ): Observable<boolean | UrlTree> {\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length ? true : this.getUrl(step.routeName)\n        )\n      );\n  }\n\n  protected isPaymentDetailsSet(\n    step: CheckoutStep\n  ): Observable<boolean | UrlTree> {\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.getUrl(step.routeName)\n        )\n      );\n  }\n\n  private getUrl(routeName: string): UrlTree {\n    return this.router.parseUrl(\n      this.routingConfigService.getRouteConfig(routeName).paths[0]\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\nimport { CheckoutStepsSetGuard } from '../../../guards/checkout-steps-set.guard';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\nimport { CheckoutStepService } from '../../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  private _steps$: BehaviorSubject<CheckoutStep[]> = this.checkoutStepService\n    .steps$;\n\n  constructor(\n    protected checkoutStepService: CheckoutStepService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  cart$: Observable<Cart>;\n\n  activeStepIndex: number;\n  activeStepIndex$: Observable<\n    number\n  > = this.checkoutStepService.activeStepIndex$.pipe(\n    tap((index) => (this.activeStepIndex = index))\n  );\n\n  get steps$(): Observable<CheckoutStep[]> {\n    return this._steps$.asObservable();\n  }\n\n  ngOnInit(): void {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\nimport { CheckoutStepsSetGuard } from '../../../guards/checkout-steps-set.guard';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent {\n  private _steps$: BehaviorSubject<CheckoutStep[]> = this.checkoutStepService\n    .steps$;\n\n  constructor(protected checkoutStepService: CheckoutStepService) {}\n\n  activeStepIndex: number;\n  activeStepIndex$: Observable<\n    number\n  > = this.checkoutStepService.activeStepIndex$.pipe(\n    tap((index) => (this.activeStepIndex = index))\n  );\n\n  get steps$(): Observable<CheckoutStep[]> {\n    return this._steps$.asObservable();\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'cxMultiLine',\n})\nexport class MultiLinePipe implements PipeTransform {\n  transform(value: string): string {\n    const lastIndex = value.lastIndexOf(' ');\n\n    if (lastIndex === -1) return value;\n\n    return (\n      value.substring(0, lastIndex) +\n      '<br />' +\n      value.substring(lastIndex, value.length).trim()\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutStepsSetGuard } from '../../guards/checkout-steps-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\nimport { MultiLinePipe } from './multiline-titles.pipe';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent, MultiLinePipe],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.authService.isUserLoggedIn().pipe(\n      map((isLoggedIn) => {\n        if (isLoggedIn) {\n          return this.router.parseUrl(this.semanticPathService.get('home'));\n        } else if (this.activeCartService.isGuestCart()) {\n          return this.router.parseUrl(this.semanticPathService.get('cart'));\n        }\n        return !isLoggedIn;\n      })\n    );\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutStepService } from '../services/checkout-step.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutStepService: CheckoutStepService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutStepService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    if (checkoutStep && checkoutStep.disabled) {\n      return of(true);\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutStepService } from '../services/checkout-step.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutStepService: CheckoutStepService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutStepService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutStepService } from '../services/checkout-step.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutStepService: CheckoutStepService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutStepService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    if (checkoutStep && checkoutStep.disabled) {\n      return of(true);\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CheckoutCostCenterService,\n  CostCenter,\n  PaymentTypeService,\n  UserCostCenterService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cost-center',\n  templateUrl: 'cost-center.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CostCenterComponent {\n  costCenterId: string;\n\n  constructor(\n    protected userCostCenterService: UserCostCenterService,\n    protected checkoutCostCenterService: CheckoutCostCenterService,\n    protected paymentTypeService: PaymentTypeService\n  ) {}\n\n  get isAccountPayment$(): Observable<boolean> {\n    return this.paymentTypeService.isAccountPayment();\n  }\n\n  get costCenters$(): Observable<CostCenter[]> {\n    return this.userCostCenterService.getActiveCostCenters().pipe(\n      withLatestFrom(this.checkoutCostCenterService.getCostCenter()),\n      filter(([costCenters]) => Boolean(costCenters)),\n      tap(([costCenters, cartCostCenter]) => {\n        if (!Boolean(cartCostCenter)) {\n          this.setCostCenter(costCenters[0].code);\n        } else {\n          this.costCenterId = cartCostCenter;\n        }\n      }),\n      map(([costCenters]) => costCenters)\n    );\n  }\n\n  setCostCenter(selectCostCenter: string): void {\n    this.costCenterId = selectCostCenter;\n    this.checkoutCostCenterService.setCostCenter(this.costCenterId);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart';\nimport { CheckoutAuthGuard } from '../../guards';\nimport { CostCenterComponent } from './cost-center.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutCostCenterComponent: {\n          component: CostCenterComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CostCenterComponent],\n  entryComponents: [CostCenterComponent],\n})\nexport class CostCenterModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutDeliveryService, DeliveryMode } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, takeWhile, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  continueButtonPressed = false;\n  private allowRedirect = false;\n\n  backBtnText = this.checkoutStepService.getBackBntText(this.activatedRoute);\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    protected checkoutStepService: CheckoutStepService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    // Reload delivery modes on error\n    this.checkoutDeliveryService\n      .getLoadSupportedDeliveryModeProcess()\n      .pipe(takeWhile((state) => state?.success === false))\n      .subscribe((state) => {\n        if (state.error && !state.loading) {\n          this.checkoutDeliveryService.loadSupportedDeliveryModes();\n        }\n      });\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.checkoutStepService.next(this.activatedRoute);\n        }\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          if (code !== this.currentDeliveryModeId) {\n            this.checkoutDeliveryService.setDeliveryMode(code);\n          }\n        }\n        this.currentDeliveryModeId = code;\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.checkoutDeliveryService.setDeliveryMode(code);\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    this.continueButtonPressed = true;\n\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n  }\n\n  back(): void {\n    this.checkoutStepService.back(this.activatedRoute);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          // TODO(#8880): Shouldn't we keep ShippingAddressSetGuard here?\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  backBtnText = this.checkoutStepService.getBackBntText(this.activatedRoute);\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService,\n    protected checkoutStepService: CheckoutStepService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.next();\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  next(): void {\n    this.checkoutStepService.next(this.activatedRoute);\n  }\n\n  back(): void {\n    this.checkoutStepService.back(this.activatedRoute);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          // TODO(#8880): Shouldn't we keep ShippingAddressSetGuard and others here?\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  B2BPaymentTypeEnum,\n  PaymentType,\n  PaymentTypeService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, tap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../../model/checkout-step.model';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-payment-type',\n  templateUrl: './payment-type.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentTypeComponent {\n  @ViewChild('poNumber', { static: false })\n  private _poNumberInput: ElementRef;\n\n  typeSelected: string;\n  cartPoNumber: string;\n\n  paymentTypes$: Observable<\n    PaymentType[]\n  > = this.paymentTypeService.getPaymentTypes();\n\n  typeSelected$: Observable<\n    string\n  > = this.paymentTypeService.getSelectedPaymentType().pipe(\n    filter((selected) => selected !== undefined),\n    distinctUntilChanged(),\n    tap((selected) => {\n      this.typeSelected = selected;\n      this.checkoutStepService.resetSteps();\n      this.checkoutStepService.disableEnableStep(\n        CheckoutStepType.PAYMENT_DETAILS,\n        selected === B2BPaymentTypeEnum.ACCOUNT_PAYMENT\n      );\n    })\n  );\n\n  cartPoNumber$: Observable<\n    string\n  > = this.paymentTypeService.getPoNumber().pipe(\n    filter((po) => po !== undefined),\n    tap((po) => {\n      return (this.cartPoNumber = po);\n    })\n  );\n\n  constructor(\n    protected paymentTypeService: PaymentTypeService,\n    protected checkoutStepService: CheckoutStepService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  changeType(code: string): void {\n    this.paymentTypeService.setPaymentType(code);\n    this.typeSelected = code;\n  }\n\n  next(): void {\n    // set po number to cart\n    const poNumInput = this._poNumberInput.nativeElement.value;\n    if (this.typeSelected && poNumInput !== this.cartPoNumber) {\n      this.paymentTypeService.setPaymentType(this.typeSelected, poNumInput);\n    }\n\n    this.checkoutStepService.next(this.activatedRoute);\n  }\n\n  back(): void {\n    this.checkoutStepService.back(this.activatedRoute);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentTypeComponent } from './payment-type.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentType: {\n          component: PaymentTypeComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentTypeComponent],\n  entryComponents: [PaymentTypeComponent],\n  exports: [PaymentTypeComponent],\n})\nexport class PaymentTypeModule {}\n","import { LayoutConfig } from '../../../../layout/config/layout-config';\nimport { DIALOG_TYPE } from '../../../../layout/launch-dialog/index';\nimport { SpinnerComponent } from '../../../../shared/components/spinner/spinner.component';\n\nexport const defaultPlaceOrderSpinnerLayoutConfig: LayoutConfig = {\n  launch: {\n    PLACE_ORDER_SPINNER: {\n      inline: true,\n      component: SpinnerComponent,\n      dialogType: DIALOG_TYPE.POPOVER_CENTER_BACKDROP,\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  DaysOfWeek,\n  recurrencePeriod,\n  ScheduleReplenishmentForm,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutReplenishmentFormService {\n  /**\n   * Default form data\n   */\n  readonly defaultFormData: ScheduleReplenishmentForm = {\n    daysOfWeek: [DaysOfWeek.MONDAY],\n    nthDayOfMonth: '1',\n    numberOfDays: '14',\n    numberOfWeeks: '1',\n    recurrencePeriod: recurrencePeriod.DAILY,\n    replenishmentStartDate: new Date().toISOString().split('T')[0],\n  };\n\n  private scheduleReplenishmentFormData$: BehaviorSubject<\n    ScheduleReplenishmentForm\n  > = new BehaviorSubject<ScheduleReplenishmentForm>(this.defaultFormData);\n\n  constructor() {}\n\n  getScheduleReplenishmentFormData(): Observable<ScheduleReplenishmentForm> {\n    return this.scheduleReplenishmentFormData$.asObservable();\n  }\n\n  setScheduleReplenishmentFormData(formData: ScheduleReplenishmentForm): void {\n    this.scheduleReplenishmentFormData$.next(formData);\n  }\n\n  resetScheduleReplenishmentFormData(): void {\n    this.scheduleReplenishmentFormData$.next(this.defaultFormData);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  OnDestroy,\n  OnInit,\n  ViewContainerRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  CheckoutService,\n  ORDER_TYPE,\n  recurrencePeriod,\n  RoutingService,\n  ScheduleReplenishmentForm,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  LaunchDialogService,\n  LAUNCH_CALLER,\n} from '../../../../layout/launch-dialog/index';\nimport { CheckoutReplenishmentFormService } from '../../services/checkout-replenishment-form-service';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  private subscription: Subscription = new Subscription();\n\n  currentOrderType: ORDER_TYPE;\n  scheduleReplenishmentFormData: ScheduleReplenishmentForm;\n  placedOrder: void | Observable<ComponentRef<any>>;\n\n  daysOfWeekNotChecked$ = new BehaviorSubject<boolean>(false);\n\n  checkoutSubmitForm: FormGroup = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  get termsAndConditionInvalid(): Boolean {\n    return this.checkoutSubmitForm.invalid;\n  }\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutReplenishmentFormService: CheckoutReplenishmentFormService,\n    protected routingService: RoutingService,\n    protected launchDialogService: LaunchDialogService,\n    protected fb: FormBuilder,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid && Boolean(this.currentOrderType)) {\n      switch (this.currentOrderType) {\n        case ORDER_TYPE.PLACE_ORDER: {\n          this.checkoutService.placeOrder(this.checkoutSubmitForm.valid);\n          break;\n        }\n\n        case ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER: {\n          this.checkoutService.scheduleReplenishmentOrder(\n            this.scheduleReplenishmentFormData,\n            this.checkoutSubmitForm.valid\n          );\n          break;\n        }\n      }\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.subscription.add(\n      combineLatest([\n        this.checkoutService.getPlaceOrderLoading(),\n        this.checkoutService.getPlaceOrderSuccess(),\n        this.checkoutService.getPlaceOrderError(),\n      ]).subscribe(([orderLoading, orderSuccess, orderError]) => {\n        if (orderLoading) {\n          this.placedOrder = this.launchDialogService.launch(\n            LAUNCH_CALLER.PLACE_ORDER_SPINNER,\n            this.vcr\n          );\n        }\n\n        if (orderError) {\n          if (this.placedOrder) {\n            this.placedOrder\n              .subscribe((component) => {\n                this.launchDialogService.clear(\n                  LAUNCH_CALLER.PLACE_ORDER_SPINNER\n                );\n                component.destroy();\n              })\n              .unsubscribe();\n            this.checkoutService.clearPlaceOrderState();\n          }\n        }\n\n        if (orderSuccess) {\n          this.onSuccess(orderSuccess);\n        }\n      })\n    );\n\n    this.subscription.add(\n      this.checkoutService\n        .getCurrentOrderType()\n        .subscribe((orderType) => (this.currentOrderType = orderType))\n    );\n\n    this.subscription.add(\n      this.checkoutReplenishmentFormService\n        .getScheduleReplenishmentFormData()\n        .subscribe((data) => {\n          this.scheduleReplenishmentFormData = data;\n\n          this.daysOfWeekNotChecked$.next(\n            data.daysOfWeek.length === 0 &&\n              data.recurrencePeriod === recurrencePeriod.WEEKLY\n          );\n        })\n    );\n  }\n\n  onSuccess(data: boolean): void {\n    if (data) {\n      switch (this.currentOrderType) {\n        case ORDER_TYPE.PLACE_ORDER: {\n          this.routingService.go({ cxRoute: 'orderConfirmation' });\n          break;\n        }\n\n        case ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER: {\n          this.routingService.go({ cxRoute: 'replenishmentConfirmation' });\n          break;\n        }\n      }\n      this.checkoutReplenishmentFormService.resetScheduleReplenishmentFormData();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.launchDialogService.clear(LAUNCH_CALLER.PLACE_ORDER_SPINNER);\n    this.checkoutService.clearPlaceOrderState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { defaultPlaceOrderSpinnerLayoutConfig } from './default-place-order-spinner-layout.config';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n  ],\n  providers: [\n    provideConfig(defaultPlaceOrderSpinnerLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  Cart,\n  CheckoutCostCenterService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CostCenter,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  PaymentTypeService,\n  PromotionLocation,\n  PromotionResult,\n  TranslationService,\n  UserAddressService,\n  UserCostCenterService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\nimport {\n  checkoutPaymentSteps,\n  checkoutShippingSteps,\n  CheckoutStep,\n} from '../../model/checkout-step.model';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutStepService } from '../../services/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent {\n  iconTypes = ICON_TYPE;\n  checkoutStepType = CheckoutStepType;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutStepService: CheckoutStepService,\n    protected promotionService: PromotionService,\n    protected paymentTypeService: PaymentTypeService,\n    protected checkoutCostCenterService: CheckoutCostCenterService,\n    protected userCostCenterService: UserCostCenterService\n  ) {}\n\n  get cart$(): Observable<Cart> {\n    return this.activeCartService.getActive();\n  }\n\n  get entries$(): Observable<OrderEntry[]> {\n    return this.activeCartService.getEntries();\n  }\n\n  get steps$(): Observable<CheckoutStep[]> {\n    return this.checkoutStepService.steps$;\n  }\n\n  get deliveryAddress$(): Observable<Address> {\n    return this.checkoutDeliveryService.getDeliveryAddress();\n  }\n\n  get deliveryMode$(): Observable<DeliveryMode> {\n    return this.checkoutDeliveryService.getSelectedDeliveryMode().pipe(\n      tap((selected: DeliveryMode) => {\n        if (selected === null) {\n          this.checkoutDeliveryService.loadSupportedDeliveryModes();\n        }\n      })\n    );\n  }\n\n  get paymentDetails$(): Observable<PaymentDetails> {\n    return this.checkoutPaymentService.getPaymentDetails();\n  }\n\n  get orderPromotions$(): Observable<PromotionResult[]> {\n    return this.promotionService.getOrderPromotions(this.promotionLocation);\n  }\n\n  get countryName$(): Observable<string> {\n    return this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address?.country?.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  get poNumber$(): Observable<string> {\n    return this.paymentTypeService.getPoNumber();\n  }\n\n  get paymentType$(): Observable<string> {\n    return this.paymentTypeService.getSelectedPaymentType();\n  }\n\n  get isAccountPayment$(): Observable<boolean> {\n    return this.paymentTypeService.isAccountPayment();\n  }\n\n  get costCenter$(): Observable<CostCenter> {\n    return this.userCostCenterService.getActiveCostCenters().pipe(\n      filter((costCenters) => Boolean(costCenters)),\n      switchMap((costCenters) => {\n        return this.checkoutCostCenterService.getCostCenter().pipe(\n          map((code) => {\n            return costCenters.find((cc) => cc.code === code);\n          })\n        );\n      })\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress?.country?.isocode;\n        }\n\n        let region = '';\n        if (\n          deliveryAddress &&\n          deliveryAddress.region &&\n          deliveryAddress.region.isocode\n        ) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getCostCenterCard(costCenter: CostCenter): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutPO.costCenter'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: costCenter?.name,\n          text: ['(' + costCenter?.unit.name + ')'],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [\n            deliveryMode.description,\n            deliveryMode.deliveryCost?.formattedValue\n              ? deliveryMode.deliveryCost?.formattedValue\n              : '',\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n      this.translation.translate('paymentForm.billingAddress'),\n    ]).pipe(\n      map(([textTitle, textExpires, billingAddress]) => {\n        const region = paymentDetails.billingAddress?.region?.isocode\n          ? paymentDetails.billingAddress?.region?.isocode + ', '\n          : '';\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n          paragraphs: [\n            {\n              title: billingAddress + ':',\n              text: [\n                paymentDetails.billingAddress?.firstName +\n                  ' ' +\n                  paymentDetails.billingAddress?.lastName,\n                paymentDetails.billingAddress?.line1,\n                paymentDetails.billingAddress?.town +\n                  ', ' +\n                  region +\n                  paymentDetails.billingAddress?.country?.isocode,\n                paymentDetails.billingAddress?.postalCode,\n              ],\n            },\n          ],\n        };\n      })\n    );\n  }\n\n  getPoNumberCard(poNumber: string): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutReview.poNumber'),\n      this.translation.translate('checkoutPO.noPoNumber'),\n    ]).pipe(\n      map(([textTitle, noneTextTitle]) => {\n        return {\n          title: textTitle,\n          textBold: poNumber ? poNumber : noneTextTitle,\n        };\n      })\n    );\n  }\n\n  getPaymentTypeCard(paymentType: string): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutProgress.methodOfPayment'),\n      this.translation.translate('paymentTypes.paymentType', {\n        context: paymentType,\n      }),\n    ]).pipe(\n      map(([textTitle, paymentTypeTranslation]) => {\n        return {\n          title: textTitle,\n          textBold: paymentTypeTranslation,\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutStepService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n\n  shippingSteps(steps: CheckoutStep[]): CheckoutStep[] {\n    return steps.filter((step) => checkoutShippingSteps.includes(step.type[0]));\n  }\n\n  paymentSteps(steps: CheckoutStep[]): CheckoutStep[] {\n    return steps.filter((step) => checkoutPaymentSteps.includes(step.type[0]));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PromotionsModule } from '../promotions/promotions.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          // TODO(#8880): Shouldn't we keep ShippingAddressSetGuard and others here?\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  DaysOfWeek,\n  ORDER_TYPE,\n  recurrencePeriod,\n  ScheduleReplenishmentForm,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\nimport { CheckoutReplenishmentFormService } from '../../services/checkout-replenishment-form-service';\n\n@Component({\n  selector: 'cx-schedule-replenishment-order',\n  templateUrl: './schedule-replenishment-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScheduleReplenishmentOrderComponent implements OnInit, OnDestroy {\n  private subscription: Subscription = new Subscription();\n\n  iconTypes = ICON_TYPE;\n  orderTypes = ORDER_TYPE;\n  daysOfWeek = Object.keys(DaysOfWeek).map((key) => DaysOfWeek[key]);\n  recurrencePeriodType = Object.keys(recurrencePeriod).map(\n    (key) => recurrencePeriod[key]\n  );\n\n  selectedOrderType$: Observable<\n    ORDER_TYPE\n  > = this.checkoutService.getCurrentOrderType();\n\n  isMonthly: Boolean = false;\n  isWeekly: Boolean = false;\n  currentDaysOfWeek: DaysOfWeek[] = [];\n  numberOfDays: string[];\n  numberOfWeeks: string[];\n  currentDate: string;\n  scheduleReplenishmentFormData: ScheduleReplenishmentForm;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutReplenishmentFormService: CheckoutReplenishmentFormService\n  ) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      this.checkoutReplenishmentFormService\n        .getScheduleReplenishmentFormData()\n        .subscribe((data) => {\n          this.scheduleReplenishmentFormData = data;\n        })\n    );\n\n    this.initConfig();\n  }\n\n  changeOrderType(orderType: ORDER_TYPE): void {\n    this.checkoutService.setOrderType(orderType);\n  }\n\n  changeNumberOfDays(nDays: string): void {\n    this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n      ...this.scheduleReplenishmentFormData,\n      numberOfDays: nDays,\n    });\n  }\n\n  changeNumberOfWeeks(nWeeks: string): void {\n    this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n      ...this.scheduleReplenishmentFormData,\n      numberOfWeeks: nWeeks,\n    });\n  }\n\n  changeRecurrencePeriodType(type: string): void {\n    this.isWeekly = type === recurrencePeriod.WEEKLY;\n    this.isMonthly = type === recurrencePeriod.MONTHLY;\n\n    this.numberOfDays = this.isMonthly\n      ? this.createNumberStringArray(31)\n      : this.createNumberStringArray(30);\n\n    this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n      ...this.scheduleReplenishmentFormData,\n      recurrencePeriod: type,\n    });\n  }\n\n  changeDayOfTheMonth(dayOfMonth: string): void {\n    this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n      ...this.scheduleReplenishmentFormData,\n      nthDayOfMonth: dayOfMonth,\n    });\n  }\n\n  changeReplenishmentStartDate(date: string): void {\n    if (Boolean(date)) {\n      this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n        ...this.scheduleReplenishmentFormData,\n        replenishmentStartDate: date,\n      });\n    }\n  }\n\n  changeRepeatDays(day: DaysOfWeek, isChecked: boolean): void {\n    if (isChecked) {\n      this.currentDaysOfWeek = [...this.currentDaysOfWeek];\n\n      this.currentDaysOfWeek.push(day);\n\n      this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n        ...this.scheduleReplenishmentFormData,\n        daysOfWeek: this.currentDaysOfWeek,\n      });\n    } else {\n      const foundDay = this.currentDaysOfWeek.find((data) => day === data);\n\n      if (!foundDay) return;\n\n      const index = this.currentDaysOfWeek.indexOf(foundDay);\n      this.currentDaysOfWeek.splice(index, 1);\n\n      this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n        ...this.scheduleReplenishmentFormData,\n        daysOfWeek: this.currentDaysOfWeek,\n      });\n    }\n  }\n\n  hasDaysOfWeekChecked(day: DaysOfWeek): boolean {\n    return this.currentDaysOfWeek.includes(day);\n  }\n\n  private initConfig(): void {\n    this.isMonthly =\n      this.scheduleReplenishmentFormData.recurrencePeriod ===\n      recurrencePeriod.MONTHLY;\n\n    this.isWeekly =\n      this.scheduleReplenishmentFormData.recurrencePeriod ===\n      recurrencePeriod.WEEKLY;\n\n    this.currentDaysOfWeek = [...this.scheduleReplenishmentFormData.daysOfWeek];\n\n    this.numberOfDays = this.isMonthly\n      ? this.createNumberStringArray(31)\n      : this.createNumberStringArray(30);\n\n    this.numberOfWeeks = this.createNumberStringArray(12);\n\n    this.currentDate = this.scheduleReplenishmentFormData.replenishmentStartDate;\n  }\n\n  private createNumberStringArray(n: number): string[] {\n    return Array(n)\n      .fill(0)\n      .map((_, y) => (y + 1).toString());\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ScheduleReplenishmentOrderComponent } from './schedule-replenishment-order.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, I18nModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutScheduleReplenishmentOrder: {\n          component: ScheduleReplenishmentOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ScheduleReplenishmentOrderComponent],\n  entryComponents: [ScheduleReplenishmentOrderComponent],\n  exports: [ScheduleReplenishmentOrderComponent],\n})\nexport class ScheduleReplenishmentOrderModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  ErrorModel,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  addresses$: Observable<Address[]>;\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField = true;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries: Country[]) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions: Region[]) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(\n              (error: ErrorModel) => error.subject === 'titleCode'\n            )\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n\n    this.addresses$ = this.userAddressService.getAddresses();\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutCostCenterService,\n  CheckoutDeliveryService,\n  PaymentTypeService,\n  TranslationService,\n  UserAddressService,\n  UserCostCenterService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  map,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  addressFormOpened = false;\n  forceLoader = false; // this helps with smoother steps transition\n  selectedAddress: Address;\n  doneAutoSelect = false;\n  isAccountPayment = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService,\n    protected checkoutStepService: CheckoutStepService,\n    protected paymentTypeService?: PaymentTypeService,\n    protected userCostCenterService?: UserCostCenterService,\n    protected checkoutCostCenterService?: CheckoutCostCenterService\n  ) {}\n\n  get isGuestCheckout(): boolean {\n    return this.activeCartService.isGuestCart();\n  }\n\n  get backBtnText(): string {\n    return this.checkoutStepService.getBackBntText(this.activatedRoute);\n  }\n\n  get isLoading$(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  get selectedAddress$(): Observable<Address> {\n    return this.checkoutDeliveryService.getDeliveryAddress().pipe(\n      tap((address) => {\n        if (\n          address &&\n          (this.selectedAddress === undefined ||\n            this.selectedAddress.id !== address.id)\n        ) {\n          this.selectedAddress = address;\n          if (this.forceLoader) {\n            this.next();\n          }\n        }\n      })\n    );\n  }\n\n  get cards$(): Observable<CardWithAddress[]> {\n    return combineLatest([\n      this.getSupportedAddresses(),\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      tap(([addresses, selected]) =>\n        this.selectDefaultAddress(addresses, selected)\n      ),\n      map(([addresses, selected, textDefault, textShipTo, textSelected]) =>\n        (<any>addresses).map((address) => ({\n          address,\n          card: this.getCardContent(\n            address,\n            selected,\n            textDefault,\n            textShipTo,\n            textSelected\n          ),\n        }))\n      )\n    );\n  }\n\n  getSupportedAddresses(): Observable<Address[]> {\n    if (this.isAccountPayment) {\n      return this.checkoutCostCenterService.getCostCenter().pipe(\n        distinctUntilChanged(),\n        switchMap((selected) => {\n          this.doneAutoSelect = false;\n          return this.userCostCenterService.getCostCenterAddresses(selected);\n        })\n      );\n    }\n    return this.userAddressService.getAddresses();\n  }\n\n  selectDefaultAddress(addresses: Address[], selected: Address) {\n    if (\n      !this.doneAutoSelect &&\n      addresses &&\n      addresses.length &&\n      (!selected || Object.keys(selected).length === 0)\n    ) {\n      if (this.isAccountPayment) {\n        if (addresses.length === 1) {\n          this.selectAddress(addresses[0]);\n        }\n      } else {\n        selected = addresses.find((address) => address.defaultAddress);\n        if (selected) {\n          this.selectAddress(selected);\n        }\n      }\n      this.doneAutoSelect = true;\n    }\n  }\n\n  ngOnInit(): void {\n    if (\n      this.paymentTypeService &&\n      this.userCostCenterService &&\n      this.checkoutCostCenterService\n    ) {\n      this.paymentTypeService\n        .isAccountPayment()\n        .pipe(take(1))\n        .subscribe((isAccount) => (this.isAccountPayment = isAccount));\n    }\n\n    if (!this.isGuestCheckout && !this.isAccountPayment) {\n      this.userAddressService.loadAddresses();\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    this.forceLoader = true;\n    this.checkoutDeliveryService.createAndSetAddress(address);\n  }\n\n  showNewAddressForm(): void {\n    this.addressFormOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.addressFormOpened = false;\n    if (goPrevious) {\n      this.back();\n    }\n  }\n\n  next(): void {\n    this.checkoutStepService.next(this.activatedRoute);\n  }\n\n  back(): void {\n    this.checkoutStepService.back(this.activatedRoute);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { CostCenterModule } from './components/cost-center/cost-center.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PaymentTypeModule } from './components/payment-type/payment-type.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ScheduleReplenishmentOrderModule } from './components/schedule-replenishment-order/schedule-replenishment-order.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    PaymentTypeModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    ScheduleReplenishmentOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n    CostCenterModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { LayoutConfig } from './layout-config';\n\nexport const defaultLayoutConfig: LayoutConfig = {\n  breakpoints: {\n    xs: 576,\n    sm: 768,\n    md: 992,\n    lg: 1200,\n    xl: {\n      min: 1200,\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { Direction } from './direction.model';\n\n/**\n * The direction config provides an easy way to configure \"ltr\" versus \"rtl\" direction\n * for the storefront. The direction can be configured to detect the direction by language.\n *\n * The following configuration detects rtl languages by isoCode for Arabic and Hebrew:\n *\n * ```typescript\n * direction: {\n *   detect: true,\n *   default: DirectionMode.LTR,\n *   rtlLanguages: ['ar', 'he']\n * }\n * ```\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class DirectionConfig {\n  direction?: Direction;\n}\n","import { DirectionConfig } from './direction.config';\nimport { DirectionMode } from './direction.model';\n\nexport const defaultDirectionConfig: DirectionConfig = {\n  direction: {\n    detect: true,\n    default: DirectionMode.LTR,\n    // we're not polluting the system with all defaults for ltr, but add 2 common used\n    // languages (hebrew and arabic) to easily demo directionality\n    // see https://meta.wikimedia.org/wiki/Template:List_of_language_names_ordered_by_code\n    rtlLanguages: ['he', 'ar'],\n  },\n};\n","import { Injectable, OnDestroy } from '@angular/core';\nimport {\n  ConfigInitializerService,\n  LanguageService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { DirectionConfig } from './config/direction.config';\nimport { Direction, DirectionMode } from './config/direction.model';\n\n/**\n * The `DirectionService` can be used to add the direction to the overall storefront or individual elements.\n * By default, the direction is added to the `html` element (i.e. `<html dir=\"ltr\">`). The API of this service\n * does however provide methods to add direction to individual elements if needed.\n *\n * The direction is configurable and allows for language driven direction configuration.\n *\n * To react to the active language, the service subscribes to the active language in the initialize method. This\n * is called from an APP_INITIALIZER method and should only happen once.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DirectionService implements OnDestroy {\n  protected config: Direction;\n  protected startsDetecting = false;\n\n  protected subscription = new Subscription();\n\n  constructor(\n    protected configInit: ConfigInitializerService,\n    protected languageService: LanguageService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Initializes the layout direction for the storefront.\n   */\n  initialize(): Promise<void> {\n    return this.configInit\n      .getStableConfig('direction')\n      .then((config: DirectionConfig) => {\n        this.config = config?.direction;\n        if (this.config?.detect) {\n          this.detect();\n        } else {\n          this.setDirection(\n            this.winRef.document.documentElement,\n            this.config?.default\n          );\n        }\n      });\n  }\n\n  /**\n   * Observes the _active_ language and set the required direction for the given language.\n   * The method is guarded to ensure that the active language is observed only once.\n   */\n  protected detect() {\n    if (this.startsDetecting) {\n      return;\n    }\n    this.subscription.add(\n      this.languageService\n        .getActive()\n        .subscribe((isoCode: string) =>\n          this.setDirection(\n            this.winRef.document.documentElement,\n            this.getDirection(isoCode)\n          )\n        )\n    );\n    this.startsDetecting = true;\n  }\n\n  /**\n   * Sets the direction attribute for the given element. If the direction is undefined, the `dir`\n   * attribute is removed.\n   */\n  setDirection(el: HTMLElement, direction: DirectionMode): void {\n    if (direction) {\n      el.setAttribute('dir', direction);\n    } else {\n      el.removeAttribute('dir');\n    }\n  }\n\n  /**\n   * Gets the `DirectionMode` for the given language isoCode. The language isoCode is compared\n   * to the configured list of languages(`direction.rtlLanguages` vs `direction.ltrLanguages`).\n   *\n   * If no language is given, or no language mapping could be found, we fallback to the default\n   * `direction.mode`.\n   */\n  getDirection(language?: string): DirectionMode {\n    if (language && this.config?.rtlLanguages?.includes(language)) {\n      return DirectionMode.RTL;\n    }\n    if (language && this.config?.ltrLanguages?.includes(language)) {\n      return DirectionMode.LTR;\n    }\n    return this.config?.default;\n  }\n\n  ngOnDestroy(): void {\n    // Cleans up the subscription, to avoid memory leaks in SSR.\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { FeatureConfigService, provideDefaultConfig } from '@spartacus/core';\nimport { defaultDirectionConfig } from './config/default-direction.config';\nimport { DirectionService } from './direction.service';\n\nexport function initHtmlDirAttribute(\n  directionService: DirectionService,\n  featureConfigService: FeatureConfigService\n) {\n  const result = () => {\n    if (featureConfigService.isLevel('2.1')) {\n      return directionService.initialize();\n    }\n  };\n  return result;\n}\n\n/**\n * Provides a configuration and APP_INITIALIZER to add the correct (language drive) html direction.\n */\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: initHtmlDirAttribute,\n      deps: [DirectionService, FeatureConfigService],\n    },\n    provideDefaultConfig(defaultDirectionConfig),\n  ],\n})\nexport class DirectionModule {}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { provideConfig } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { defaultLayoutConfig } from './config/default-layout.config';\nimport { DirectionModule } from './direction/direction.module';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot(), DirectionModule],\n  providers: [provideConfig(defaultLayoutConfig)],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nimport { CmsComponentsService } from '../../services/cms-components.service';\n\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position represents the unique key for a page slot on a single page, but can\n   * be reused cross pages.\n   *\n   * The position is used to find the CMS components for the page slot. It is also\n   * added as an additional CSS class so that layout can be applied.\n   */\n  @Input() set position(value: string) {\n    this.position$.next(value);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  /**\n   * Maintains css classes introduced by the host and adds additional classes.\n   */\n  @Input() @HostBinding() class: string;\n\n  /**\n   * Indicates that the page slot is the last page slot above the fold.\n   */\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  /**\n   * Indicates that the components of the page slot haven't been loaded as long\n   * as the isPending state is true.\n   */\n  @HostBinding('class.cx-pending') isPending = true;\n\n  /**\n   * Indicates that the page slot doesn't contain any components. This is no\n   * longer used in spartacus, but kept for backwards compatibility.\n   */\n  @HostBinding('class.has-components') @Input() hasComponents = false;\n\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  components: ContentSlotComponentData[];\n\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    distinctUntilChanged(this.isDistinct)\n  );\n\n  /** Observes the components for the given page slot. */\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\n    map((slot) => slot?.components ?? [])\n  );\n\n  protected subscription: Subscription = new Subscription();\n\n  /** Keeps track of the pending components that must be loaded for the page slot */\n  private pendingComponentCount = 0;\n\n  /** Tracks the last used position, in case the page slot is used dynamically */\n  private lastPosition: string;\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\n        this.components = value?.components || [];\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  protected decorate(slot: ContentSlotData): void {\n    let cls = this.class || '';\n\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\n      cls = cls.replace(this.lastPosition, '');\n    }\n    if (this.position$.value) {\n      cls += ` ${this.position$.value}`;\n      this.lastPosition = this.position$.value;\n    }\n\n    // host bindings\n    this.pending = slot?.components?.length || 0;\n    this.hasComponents = slot?.components?.length > 0;\n    if (cls && cls !== this.class) {\n      this.class = cls;\n    }\n\n    this.addSmartEditSlotClass(slot);\n  }\n\n  /**\n   * Sets the pending count for the page slot components. Once all pending components are\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\n   */\n  protected set pending(count: number) {\n    this.pendingComponentCount = count;\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  protected get pending(): number {\n    return this.pendingComponentCount;\n  }\n\n  /*\n   * Is triggered when a component is added to the view. This is used to\n   * update the pending count\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pending--;\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether the component should be\n   * rendered instantly or whether it should be deferred.\n   */\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(\n      componentType\n    );\n    return { deferLoading };\n  }\n\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\n    return (\n      current.components &&\n      old.components?.length === current.components.length &&\n      !old.components.find(\n        (el, index) => el.uid !== current.components[index].uid\n      )\n    );\n  }\n\n  private addSmartEditSlotClass(slot: ContentSlotData): void {\n    if (slot) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.elementRef.nativeElement,\n        this.renderer,\n        { slotData: slot }\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuration\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.slice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$))\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  constructor(protected pageLayoutService: PageLayoutService) {}\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { PageLayoutService } from './page-layout.service';\n\n/**\n * Directive that Adds a style class to the host element based on the cms page\n * template. The CMS page template is driven by the CMS structure, which is configurable\n * in the backend.\n *\n * The style class is added to the host element of the directive. The host element is resolved\n * from the `elementRef`, or, in case the directive is used in an `ng-template`, by the\n * `TemplateRef`.\n *\n * An example of the usage is given below:\n *\n * ```html\n * <cx-storefront class=\"LandingPageTemplate\">\n *   <ng-template cxPageTemplateStyle>...</ng-template>\n * <cx-storefront>\n * ```\n *\n * The style class can also be provided by an input:\n *\n * ```html\n * <ng-template [cxPageTemplateStyle]=\"pageTemplateName\">\n * ```\n *\n */\n@Directive({\n  selector: '[cxPageTemplateStyle]',\n})\nexport class PageTemplateDirective implements OnInit, OnDestroy {\n  /**\n   * Indicates whether this component is driven by an input template or should\n   * observe the CMS driven page layout template.\n   */\n  protected useTemplateFromInput: boolean;\n\n  /**\n   * Adds a style class to the host element based on the cms page template, unless\n   * the class is given as an input.\n   *\n   * The host element is either the actual host, or the parent element in case this\n   * is used inside an `ng-template`.\n   */\n  @Input('cxPageTemplateStyle') set setTemplate(template: string) {\n    if (template && template !== '') {\n      this.useTemplateFromInput = true;\n      this.addStyleClass(template);\n    } else if (this.useTemplateFromInput) {\n      // we only clear the template if it has been provided by the input before\n      this.clear();\n    }\n  }\n\n  // Maintains the page template subscription\n  protected subscription: Subscription = new Subscription();\n\n  /**\n   * Holds the current page template, so we can remove previous page templates\n   * from the element classList.\n   */\n  protected currentTemplate: string;\n\n  constructor(\n    protected pageLayoutService: PageLayoutService,\n    protected elementRef: ElementRef,\n    @Optional() protected templateRef: TemplateRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    if (!this.useTemplateFromInput) {\n      this.subscription.add(\n        this.pageLayoutService.templateName$.subscribe((template) =>\n          this.addStyleClass(template)\n        )\n      );\n    }\n  }\n\n  /**\n   * Adds the page template as a style class to the given element. If any\n   * page template was added before, we clean it up.\n   *\n   * We'll not use hostBinding for the style class, as it will potential drop\n   * an existing class name on the host. This is why we need to work with\n   * the lower level change detection api.\n   */\n  protected addStyleClass(template: string, el?: HTMLElement): void {\n    this.clear(el);\n    if (template) {\n      this.currentTemplate = template;\n      (el ?? this.host).classList.add(this.currentTemplate);\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * Cleans up the class host binding, if a template class was assigned before.\n   */\n  protected clear(el?: HTMLElement) {\n    if (this.currentTemplate) {\n      (el ?? this.host).classList?.remove(this.currentTemplate);\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * Returns the host element (`HTMLElement`).\n   *\n   * If the directive is used on an `ng-template`, we take the parent element,\n   * to ensure that we're not ending up with a comment.\n   */\n  protected get host(): HTMLElement {\n    return !!this.templateRef\n      ? this.templateRef.elementRef.nativeElement.parentElement\n      : this.elementRef.nativeElement;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageTemplateDirective } from './page-template.directive';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent, PageTemplateDirective],\n  exports: [PageLayoutComponent, PageTemplateDirective],\n})\nexport class PageLayoutModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddToHomeScreenService {\n  protected deferredEvent: any;\n\n  protected canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    protected config: PWAModuleConfig,\n    protected globalMessageService: GlobalMessageService,\n    protected winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit, Directive } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\n@Directive()\n// tslint:disable-next-line:directive-class-suffix\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService implements OnDestroy {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  private subscription: Subscription;\n\n  init() {\n    this.subscription = this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory implements OnDestroy {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  private subscription: Subscription;\n\n  build() {\n    this.subscription = this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsDialogModule } from '../../shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsDialogModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsComponentsService.getGuards(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected translation: TranslationService,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsComponentsService.getI18nKeys(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  CmsComponentChildRoutesConfig,\n  CmsRoute,\n  deepMerge,\n  PageContext,\n  PageType,\n} from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsComponentsService } from './cms-components.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(\n    private router: Router,\n    private cmsComponentsService: CmsComponentsService\n  ) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const childRoutesConfig = this.cmsComponentsService.getChildRoutes(\n      componentTypes\n    );\n\n    if (childRoutesConfig?.children?.length) {\n      if (\n        this.updateRouting(pageContext, currentPageLabel, childRoutesConfig)\n      ) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    childRoutesConfig: CmsComponentChildRoutesConfig\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: childRoutesConfig.children,\n        data: deepMerge({}, childRoutesConfig?.parent?.data ?? {}, {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        }),\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsComponentsService } from '../services/cms-components.service';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    protected cmsService: CmsService,\n    protected cmsRoutes: CmsRoutesService,\n    protected cmsI18n: CmsI18nService,\n    protected cmsGuards: CmsGuardsService,\n    protected cmsComponentsService: CmsComponentsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsComponentsService.determineMappings(componentTypes)\n      ),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate === true\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(canActivate)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutPaymentType: { paths: ['checkout/payment-type'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n  replenishmentConfirmation: { paths: ['replenishment/confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n  replenishmentOrders: {\n    paths: ['my-account/my-replenishments'],\n  },\n  replenishmentDetails: {\n    paths: ['my-account/my-replenishment/:replenishmentOrderCode'],\n    paramsMapping: { replenishmentOrderCode: 'replenishmentOrderCode' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { BREAKPOINT } from '../../layout/config/layout-config';\n\nexport enum PageSection {\n  HEADER = 'header',\n  FOOTER = 'footer',\n  NAVIGATION = 'navigation',\n}\n\nexport interface CmsStructureOptions {\n  /**\n   * The componentId is used to provide a static configuration of (cms) components.\n   */\n  componentId?: string;\n  /**\n   * Page slot position is used to provide the slot configuration.\n   */\n  pageSlotPosition?: string;\n  /**\n   * The page template is used to provide the page slot to the given page template.\n   */\n  pageTemplate?: string;\n  /**\n   * The section is used to provide the page slot to the given section.\n   */\n  section?: PageSection | string;\n  /**\n   * The breakpoint is used to provide the page slot for a specific breakpoint.\n   */\n  breakpoint?: BREAKPOINT;\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ValueProvider } from '@angular/core';\nimport { CmsStructureConfig, provideConfig } from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { CmsStructureOptions } from './cms-structure.model';\n\n/**\n * Helper function to simplify the creation of static CMS structure (`CmsStructureConfig`).\n * The helper function leverage the `provideConfig`, and is only providing an easy way to\n * generate the cms structure. The function creates a configuration structure for components,\n * page slot and page template. The following example adds a component to a page slot:\n *\n * ```ts\n * provideCmsStructure({\n *   componentId: 'LoginComponent',\n *   pageSlotPosition: 'SiteLogin'\n * })\n * ```\n *\n * @param options.componentId component identifier is used to provide component structure\n * @param options.pageSlotPosition page slot position is used to provide the slot configuration\n * @param options.pageTemplate the page template is used to provide the page slot to the given page template\n * @param options.section the section is used to provide the page slot to the given section\n * @param options.breakpoint the breakpoint is used to provide the page slot for a specific breakpoint\n */\nexport function provideCmsStructure(\n  options: CmsStructureOptions\n): ValueProvider {\n  return provideConfig({\n    ...buildCmsStructure(options),\n    ...buildLayoutConfig(options),\n  });\n}\n\n/**\n * @private\n */\nfunction buildCmsStructure({\n  componentId,\n  pageSlotPosition,\n}: CmsStructureOptions = {}): CmsStructureConfig {\n  const config: CmsStructureConfig = { cmsStructure: {} };\n\n  if (componentId) {\n    config.cmsStructure = {\n      components: {\n        [componentId]: {\n          typeCode: componentId,\n          flexType: componentId,\n        },\n      },\n    };\n  }\n\n  if (componentId && pageSlotPosition) {\n    config.cmsStructure.slots = {\n      [pageSlotPosition]: { componentIds: [componentId] },\n    };\n  }\n  return config;\n}\n\n/**\n * @private\n */\nfunction buildLayoutConfig({\n  pageTemplate,\n  pageSlotPosition,\n  breakpoint,\n  section,\n}: CmsStructureOptions = {}): LayoutConfig {\n  const layoutConfig: LayoutConfig = {};\n  if (pageTemplate && pageSlotPosition) {\n    const pageTemplateSlots: any = {};\n    if (breakpoint) {\n      pageTemplateSlots[breakpoint] = {\n        slots: [pageSlotPosition],\n      };\n    } else {\n      pageTemplateSlots.slots = [pageSlotPosition];\n    }\n    layoutConfig.layoutSlots = {\n      [pageTemplate]: pageTemplateSlots,\n    };\n  }\n\n  if (section && pageSlotPosition) {\n    const sectionSlots: any = {};\n    if (breakpoint) {\n      sectionSlots[breakpoint] = { slots: [pageSlotPosition] };\n    } else {\n      sectionSlots.slots = [pageSlotPosition];\n    }\n    if (layoutConfig.layoutSlots) {\n      layoutConfig.layoutSlots[section] = sectionSlots;\n    } else {\n      layoutConfig.layoutSlots = {\n        [section]: sectionSlots,\n      };\n    }\n  }\n  return layoutConfig;\n}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, take, switchMap } from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    winRef?: WindowRef,\n    // tslint:disable-next-line:unified-signatures\n    breakpointService?: BreakpointService\n  );\n  /**\n   * @deprecated since 2.1\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    winRef?: WindowRef\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    protected cmsService: CmsService,\n    protected winRef?: WindowRef,\n    protected breakpointService?: BreakpointService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilChanged((x, y) => x?.components === y?.components),\n    switchMap((data) =>\n      combineLatest(\n        (data?.components ?? '').split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab) {\n                return undefined;\n              }\n\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number, event?: MouseEvent): void {\n    this.breakpointService\n      ?.isDown(BREAKPOINT.sm)\n      .pipe(take(1))\n      .subscribe((res) => {\n        if (res) {\n          this.activeTabNum = this.activeTabNum === tabNum ? -1 : tabNum;\n          if (event && event?.target) {\n            const target = event.target as HTMLElement;\n            const parentNode = target.parentNode as HTMLElement;\n            this.winRef?.nativeWindow?.scrollTo(0, parentNode.offsetTop);\n          }\n        } else {\n          this.activeTabNum = tabNum;\n        }\n      });\n  }\n\n  ngOnInit(): void {\n    this.activeTabNum =\n      this.winRef?.nativeWindow?.history?.state?.activeTab ?? this.activeTabNum;\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  isLoggedIn$: Observable<boolean>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.isLoggedIn$ = this.authService.isUserLoggedIn();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthConfigService,\n  OAuthFlow,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    protected fb: FormBuilder,\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authConfigService: AuthConfigService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      if (\n        this.authConfigService.getOAuthFlow() ===\n        OAuthFlow.ResourceOwnerPasswordFlow\n      ) {\n        this.routingService.go({ cxRoute: 'login' });\n      }\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() amendOrderForm: FormGroup;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n\n  constructor(protected routingService: RoutingService) {}\n\n  continue(event: Event): void {\n    if (this.amendOrderForm.valid) {\n      this.routingService.go({\n        cxRoute: this.forwardRoute,\n        params: { code: this.orderCode },\n      });\n    } else {\n      this.amendOrderForm.markAllAsTouched();\n      event.stopPropagation();\n    }\n  }\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantityToCancel(control: FormControl) {\n  if (!control.value) {\n    return null;\n  }\n  const quantity = Object.values(control.value).reduce(\n    (acc: number, val: number) => acc + val,\n    0\n  );\n  return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup(\n      {},\n      { validators: [ValidateQuantityToCancel] }\n    );\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  ItemCounterModule,\n  MediaModule,\n} from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup) {\n    if (form.valid) {\n      this.orderAmendService.save();\n    } else {\n      form.markAllAsTouched();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order?.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { SemanticPathService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected orderAmendService: OrderCancellationService,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\nimport { FormErrorsModule } from '../../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { SemanticPathService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected orderAmendService: OrderReturnService,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<any> = this.orderDetailsService.getOrderDetails();\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<any> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<any>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<any>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport {\n  CardModule,\n  OrderOverviewModule,\n  SpinnerModule,\n} from '../../../../shared/index';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    OrderOverviewModule,\n    UrlModule,\n    SpinnerModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n  UserReplenishmentOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    protected routing: RoutingService,\n    protected userOrderService: UserOrderService,\n    protected translation: TranslationService,\n    protected userReplenishmentOrderService: UserReplenishmentOrderService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  hasReplenishmentOrder$: Observable<\n    boolean\n  > = this.userReplenishmentOrderService\n    .getReplenishmentOrderDetails()\n    .pipe(map((order) => order && Object.keys(order).length !== 0));\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { LayoutConfig } from '../../../../layout/config/layout-config';\nimport { DIALOG_TYPE } from '../../../../layout/launch-dialog/index';\nimport { ReplenishmentOrderCancellationDialogComponent } from '../../../../shared/components/replenishment-order-cancellation-dialog/replenishment-order-cancellation-dialog.component';\n\nexport const defaultReplenishmentOrderCancellationLayoutConfig: LayoutConfig = {\n  launch: {\n    REPLENISHMENT_ORDER: {\n      inline: true,\n      component: ReplenishmentOrderCancellationDialogComponent,\n      dialogType: DIALOG_TYPE.DIALOG,\n    },\n  },\n};\n","import { ElementRef, Injectable, ViewContainerRef } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport {\n  LaunchDialogService,\n  LAUNCH_CALLER,\n} from '../../../../../layout/launch-dialog/index';\n\n@Injectable({ providedIn: 'root' })\nexport class ReplenishmentOrderCancellationLaunchDialogService {\n  constructor(protected launchDialogService: LaunchDialogService) {}\n\n  openDialog(\n    openElement?: ElementRef,\n    vcr?: ViewContainerRef,\n    data?: any\n  ): Observable<any> | undefined {\n    const component = this.launchDialogService.launch(\n      LAUNCH_CALLER.REPLENISHMENT_ORDER,\n      vcr,\n      data\n    );\n\n    if (component) {\n      return combineLatest([\n        component,\n        this.launchDialogService.dialogClose,\n      ]).pipe(\n        filter(([, close]) => close && close !== undefined),\n        tap(([comp]) => {\n          openElement?.nativeElement.focus();\n          this.launchDialogService.clear(LAUNCH_CALLER.REPLENISHMENT_ORDER);\n          comp.destroy();\n        }),\n        map(([comp]) => comp)\n      );\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ReplenishmentOrder,\n  UserReplenishmentOrderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ReplenishmentOrderCancellationLaunchDialogService } from './replenishment-order-cancellation-launch-dialog.service';\n\n@Component({\n  selector: 'cx-replenishment-order-cancellation',\n  templateUrl: './replenishment-order-cancellation.component.html',\n})\nexport class ReplenishmentOrderCancellationComponent implements OnDestroy {\n  @ViewChild('element') element: ElementRef;\n\n  private subscription = new Subscription();\n\n  replenishmentOrder$: Observable<\n    ReplenishmentOrder\n  > = this.userReplenishmentOrderService.getReplenishmentOrderDetails();\n\n  constructor(\n    protected userReplenishmentOrderService: UserReplenishmentOrderService,\n    protected replenishmentOrderCancellationLaunchDialogService: ReplenishmentOrderCancellationLaunchDialogService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  openDialog() {\n    const dialog = this.replenishmentOrderCancellationLaunchDialogService.openDialog(\n      this.element,\n      this.vcr\n    );\n\n    if (dialog) {\n      this.subscription.add(dialog.pipe(take(1)).subscribe());\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.userReplenishmentOrderService.clearReplenishmentOrderDetails();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ReplenishmentOrder,\n  RoutingService,\n  UserReplenishmentOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReplenishmentOrderDetailsService {\n  protected replenishmentOrderCode$ = this.routingService.getRouterState().pipe(\n    map((routingData) => routingData.state.params.replenishmentOrderCode),\n    distinctUntilChanged()\n  );\n\n  protected replenishmentOrderLoad$ = this.replenishmentOrderCode$.pipe(\n    tap((replenishmentOrderCode: string) => {\n      if (Boolean(replenishmentOrderCode)) {\n        this.userReplenishmentOrderService.loadReplenishmentOrderDetails(\n          replenishmentOrderCode\n        );\n      } else {\n        this.userReplenishmentOrderService.clearReplenishmentOrderDetails();\n      }\n    }),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected userReplenishmentOrderService: UserReplenishmentOrderService\n  ) {}\n\n  getOrderDetails(): Observable<ReplenishmentOrder> {\n    return this.replenishmentOrderLoad$.pipe(\n      switchMap((_) =>\n        this.userReplenishmentOrderService.getReplenishmentOrderDetails()\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport {\n  CardModule,\n  ListNavigationModule,\n  ReplenishmentOrderCancellationDialogModule,\n  SpinnerModule,\n} from '../../../../shared/index';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\nimport { OrderDetailItemsComponent } from '../order-details/order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from '../order-details/order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from '../order-details/order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { OrderHistoryComponent } from '../order-history/order-history.component';\nimport { defaultReplenishmentOrderCancellationLayoutConfig } from './default-replenishment-order-cancellation-layout.config';\nimport { ReplenishmentOrderCancellationComponent } from './replenishment-order-cancellation/replenishment-order-cancellation.component';\nimport { ReplenishmentOrderDetailsService } from './replenishment-order-details.service';\n\nconst moduleComponents = [ReplenishmentOrderCancellationComponent];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    PromotionsModule,\n    UrlModule,\n    ReplenishmentOrderCancellationDialogModule,\n    SpinnerModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'replenishmentDetails' },\n      },\n    ]),\n  ],\n  providers: [\n    provideConfig(defaultReplenishmentOrderCancellationLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReplenishmentDetailItemsComponent: {\n          component: OrderDetailItemsComponent,\n          providers: [\n            {\n              provide: OrderDetailsService,\n              useExisting: ReplenishmentOrderDetailsService,\n            },\n          ],\n        },\n        ReplenishmentDetailTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n          providers: [\n            {\n              provide: OrderDetailsService,\n              useExisting: ReplenishmentOrderDetailsService,\n            },\n          ],\n        },\n        ReplenishmentDetailShippingComponent: {\n          component: OrderDetailShippingComponent,\n          providers: [\n            {\n              provide: OrderDetailsService,\n              useExisting: ReplenishmentOrderDetailsService,\n            },\n          ],\n        },\n        ReplenishmentDetailActionsComponent: {\n          component: ReplenishmentOrderCancellationComponent,\n        },\n        ReplenishmentDetailOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class ReplenishmentOrderDetailsModule {}\n","import {\n  Component,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ElementRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n  RoutingService,\n  TranslationService,\n  UserReplenishmentOrderService,\n} from '@spartacus/core';\nimport { ReplenishmentOrderCancellationLaunchDialogService } from '../replenishment-order-details/replenishment-order-cancellation/replenishment-order-cancellation-launch-dialog.service';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-replenishment-order-history',\n  templateUrl: './replenishment-order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReplenishmentOrderHistoryComponent implements OnDestroy {\n  @ViewChild('element') element: ElementRef;\n\n  private subscription = new Subscription();\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  replenishmentOrders$: Observable<\n    ReplenishmentOrderList\n  > = this.userReplenishmentOrderService\n    .getReplenishmentOrderHistoryList(this.PAGE_SIZE)\n    .pipe(\n      tap((replenishmentOrders: ReplenishmentOrderList) => {\n        if (replenishmentOrders.pagination) {\n          this.sortType = replenishmentOrders.pagination.sort;\n        }\n      })\n    );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userReplenishmentOrderService.getReplenishmentOrderHistoryListSuccess();\n\n  constructor(\n    protected routing: RoutingService,\n    protected userReplenishmentOrderService: UserReplenishmentOrderService,\n    protected replenishmentOrderCancellationLaunchDialogService: ReplenishmentOrderCancellationLaunchDialogService,\n    protected translation: TranslationService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReplenishmentOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReplenishmentOrders(event);\n  }\n\n  goToOrderDetail(order: ReplenishmentOrder): void {\n    this.routing.go({\n      cxRoute: 'replenishmentDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{\n    byDate: string;\n    byReplenishmentNumber: string;\n    byNextOrderDate: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.replenishmentNumber'),\n      this.translation.translate('sorting.nextOrderDate'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber, textbyNextOrderDate]) => {\n        return {\n          byDate: textByDate,\n          byReplenishmentNumber: textByOrderNumber,\n          byNextOrderDate: textbyNextOrderDate,\n        };\n      })\n    );\n  }\n\n  openDialog(event: Event, replenishmentOrderCode: string): void {\n    const dialog = this.replenishmentOrderCancellationLaunchDialogService.openDialog(\n      this.element,\n      this.vcr,\n      replenishmentOrderCode\n    );\n\n    if (dialog) {\n      this.subscription.add(dialog.pipe(take(1)).subscribe());\n    }\n    event.stopPropagation();\n  }\n\n  private fetchReplenishmentOrders(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.userReplenishmentOrderService.loadReplenishmentOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.userReplenishmentOrderService.clearReplenishmentOrderList();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReplenishmentOrderHistoryComponent } from './replenishment-order-history.component';\nimport { defaultReplenishmentOrderCancellationLayoutConfig } from '../replenishment-order-details/default-replenishment-order-cancellation-layout.config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'replenishmentOrders' },\n      },\n    ]),\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideConfig(defaultReplenishmentOrderCancellationLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountReplenishmentHistoryComponent: {\n          component: ReplenishmentOrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ReplenishmentOrderHistoryComponent],\n  exports: [ReplenishmentOrderHistoryComponent],\n  entryComponents: [ReplenishmentOrderHistoryComponent],\n})\nexport class ReplenishmentOrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReplenishmentOrderDetailsModule } from './replenishment-order-details/replenishment-order-details.module';\nimport { ReplenishmentOrderHistoryModule } from './replenishment-order-history/replenishment-order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    ReplenishmentOrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReplenishmentOrderHistoryModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  async onSuccess(success: boolean): Promise<void> {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      await this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm: FormGroup = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    customerId: [''],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles();\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return data\n          ? {\n              title: data.name,\n              children: [nav],\n            }\n          : undefined;\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category),\n   * also taking into account content pages (contentPageLabelOrId)\n   * and product pages (productCode)\n   */\n  protected getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.contentPageLabelOrId) {\n      return item.contentPageLabelOrId;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    } else if (item.productCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'product',\n        params: {\n          code: item.productCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    const wrapper = <HTMLElement>node.querySelector('.wrapper');\n    const body = <HTMLElement>node.closest('body');\n    if (wrapper) {\n      this.renderer.removeStyle(wrapper, 'margin-left');\n      if (\n        wrapper.offsetLeft + wrapper.offsetWidth >\n        body.offsetLeft + body.offsetWidth\n      ) {\n        this.renderer.setStyle(\n          wrapper,\n          'margin-left',\n          `${node.offsetWidth - wrapper.offsetWidth}px`\n        );\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  /**\n   * For search results model, it returns true when:\n   * * there is any product OR\n   * * the is any search suggestion OR\n   * * there is a message.\n   *\n   * Otherwise it returns false.\n   */\n  protected hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  /**\n   * Emits product search results in case when the config property `displayProducts` is true.\n   * Otherwise it emits an empty object.\n   */\n  protected getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  protected getProductSuggestions(\n    config: SearchBoxConfig\n  ): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * Whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  protected getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  /**\n   * Emits a 'no match' message, in case the product search results and search suggestions are empty.\n   * Otherwise it emits null.\n   */\n  protected getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c?.displayProducts === 'true' || c?.displayProducts === true,\n            displayProductImages:\n              <any>c?.displayProductImages === 'true' ||\n              c?.displayProductImages === true,\n            displaySuggestions:\n              <any>c?.displaySuggestions === 'true' ||\n              c?.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n\n    // Use Timeout to run after blur event to prevent the searchbox from closing on mobile\n    setTimeout(() => {\n      // Retain focus on input lost by clicking on icon\n      el.focus();\n      this.ignoreCloseEvent = false;\n    });\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<any>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, ORDER_TYPE } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<any>;\n  isReplenishmentOrderType$: Observable<boolean>;\n\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n\n    this.isReplenishmentOrderType$ = this.checkoutService\n      .getCurrentOrderType()\n      .pipe(\n        map(\n          (orderType) => ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER === orderType\n        )\n      );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .isUserLoggedIn()\n          .subscribe((isLoggedIn) => {\n            if (isLoggedIn) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport {\n  CardModule,\n  FormErrorsModule,\n  OrderOverviewModule,\n} from '../../shared/index';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n    OrderOverviewModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { FormErrorsModule } from '../../shared/index';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReplenishmentConfirmationMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        ReplenishmentConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        ReplenishmentConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        ReplenishmentConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class ReplenishmentOrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, SemanticPathService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  constructor(\n    protected cmsComponentData: CmsComponentData<CmsProductReferencesComponent>,\n    protected currentProductService: CurrentProductService,\n    protected productReferenceService: ProductReferenceService\n  ) {}\n\n  protected get componentData$(): Observable<CmsProductReferencesComponent> {\n    return this.cmsComponentData.data$.pipe(filter(Boolean));\n  }\n\n  /**\n   * Returns an Observable String for the product code\n   */\n  protected get productCode$(): Observable<string> {\n    return this.currentProductService.getProduct().pipe(\n      filter(Boolean),\n      map((product: Product) => product.code),\n      tap((_) => this.productReferenceService.cleanReferences())\n    );\n  }\n\n  /**\n   * Returns an Observable String for the title\n   */\n  get title$(): Observable<string> {\n    return this.componentData$.pipe(map((data) => data?.title));\n  }\n\n  /**\n   * Observable with an Array of Observables. This is done so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.productCode$.pipe(\n    withLatestFrom(this.componentData$),\n    tap(([productCode, data]) =>\n      this.productReferenceService.loadProductReferences(\n        productCode,\n        data?.productReferenceTypes\n      )\n    ),\n    switchMap(([productCode, data]) =>\n      this.getProductReferences(productCode, data?.productReferenceTypes)\n    )\n  );\n\n  /**\n   * Returns an observable for product references\n   */\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.productReferenceService\n      .getProductReferences(code, referenceType)\n      .pipe(\n        filter(Boolean),\n        map((references: ProductReference[]) =>\n          references.map((reference) => of(reference.target))\n        )\n      );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) => {\n      this.mainMediaContainer.next(p.images?.PRIMARY ? p.images.PRIMARY : {});\n    })\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RouterState,\n  RoutingService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\nimport { ProductListRouteParams, SearchCriteria } from './product-list.model';\n\n/**\n * The `ProductListComponentService` is used to search products. The service is used\n * on the Product Listing Page, for listing products and the facet navigation.\n *\n * The service exposes the product search results based on the category and search\n * route parameters. The route parameters are used to query products by the help of\n * the `ProductSearchService`.\n */\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  /**\n   * @deprecated will be removed in version 3.0 as this is the\n   *   subscription is longer used\n   */\n  protected sub: Subscription;\n\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  /**\n   * Emits the search results for the current search query.\n   *\n   * The `searchResults$` is _not_ concerned with querying, it only observes the\n   * `productSearchService.getResults()`\n   */\n  protected searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  /**\n   * Observes the route and performs a search on each route change.\n   *\n   * Context changes, such as language and currencies are also taken\n   * into account, so that the search is performed again.\n   */\n  protected searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    ...this.siteContext,\n  ]).pipe(\n    map(([routerState, ..._context]) => (routerState as RouterState).state),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream is used for the Product Listing and Product Facets.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  /**\n   * Expose the `SearchCriteria`. The search criteria are driven by the route parameters.\n   *\n   * This search route configuration is not yet configurable\n   * (see https://github.com/SAP/spartacus/issues/7191).\n   */\n  protected getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  /**\n   * Resolves the search query from the given `ProductListRouteParams`.\n   */\n  protected getQueryFromRouteParams({\n    query,\n    categoryCode,\n    brandCode,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n\n    // TODO: drop support for brands as they should be treated\n    // similarly as any category.\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  /**\n   * Performs a search based on the given search criteria.\n   *\n   * The search is delegated to the `ProductSearchService`.\n   */\n  protected search(criteria: SearchCriteria): void {\n    const currentPage = criteria.currentPage;\n    const pageSize = criteria.pageSize;\n    const sort = criteria.sortCode;\n\n    this.productSearchService.search(\n      criteria.query,\n      // TODO: consider dropping this complex passing of cleaned object\n      Object.assign(\n        {},\n        currentPage && { currentPage },\n        pageSize && { pageSize },\n        sort && { sort }\n      )\n    );\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  /**\n   * Sort the search results by the given sort code.\n   */\n  sort(sortCode: string): void {\n    this.route({ sortCode });\n  }\n\n  /**\n   * Routes to the next product listing page, using the given `queryParams`. The\n   * `queryParams` support sorting, pagination and querying.\n   *\n   * The `queryParams` are delegated to the Angular router `NavigationExtras`.\n   */\n  protected route(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n\n  /**\n   * The site context is used to update the search query in case of a\n   * changing context. The context will typically influence the search data.\n   *\n   * We keep this private for now, as we're likely refactoring this in the next\n   * major version.\n   */\n  private get siteContext(): Observable<string>[] {\n    // TODO: we should refactor this so that custom context will be taken\n    // into account automatically. Ideally, we drop the specific context\n    // from the constructor, and query a ContextService for all contexts.\n\n    return [this.languageService.getActive(), this.currencyService.getActive()];\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  setQuery(query: string): void {\n    this.route({ query, currentPage: undefined });\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  viewPage(pageNumber: number): void {\n    this.route({ currentPage: pageNumber });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      (breadcrumb.facetValueCode === params.categoryCode ||\n        breadcrumb.facetValueCode === params.brandCode)\n    );\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    const topFacets =\n      facet.topValueCount > 0 ? facet.topValueCount : facet.values?.length || 0;\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: topFacets,\n          maxVisible: topFacets,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string): { [key: string]: string } {\n    return {\n      // to avoid encoding issues with facets that have space (' ') in their name,\n      // we replace the decoded '+' back to empty space ' '.\n      // For more, see https://github.com/SAP/spartacus/issues/7348\n      query: new HttpUrlEncodingCodec().decodeValue(query).replace(/\\+/g, ' '),\n    };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given _active_ facet when there\n   * the original facets is not available. This happens for non multi-valued facets.\n   *\n   * With this approach, the we keep the focus, either at the facet list or on the\n   * active facets.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return facetList.facets?.find((f) =>\n      f.values?.find((val) => val.name === facet.facetValueName)\n    )\n      ? ''\n      : facet.facetValueName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  private _isDialog: boolean;\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input()\n  set isDialog(value: boolean) {\n    this._isDialog = value;\n    if (value) {\n      this.renderer.addClass(document.body, 'modal-open');\n    }\n  }\n\n  get isDialog(): boolean {\n    return this._isDialog;\n  }\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  @HostListener('click') handleClick() {\n    this.close();\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef,\n    protected renderer: Renderer2\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.renderer.removeClass(document.body, 'modal-open');\n    this.closeList.emit(event);\n  }\n\n  block(event?: MouseEvent) {\n    event.stopPropagation();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  UrlTree,\n} from '@angular/router';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  SemanticPathService,\n  VariantOption,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    protected productService: ProductService,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router\n  ) {}\n\n  canActivate(\n    activatedRoute: ActivatedRouteSnapshot\n  ): Observable<boolean | UrlTree> {\n    const productCode = activatedRoute.params?.productCode;\n    if (!productCode) {\n      return of(true);\n    }\n\n    return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n      filter(Boolean),\n      switchMap((product: Product) => {\n        if (!product.purchasable) {\n          const variant = this.findVariant(product.variantOptions);\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          return this.productService.get(variant.code, ProductScope.LIST).pipe(\n            filter(Boolean),\n            take(1),\n            map((_product: Product) => {\n              return this.router.createUrlTree(\n                this.semanticPathService.transform({\n                  cxRoute: 'product',\n                  params: _product,\n                })\n              );\n            })\n          );\n        } else {\n          return of(true);\n        }\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  NotificationPreference,\n  NotificationType,\n  OCC_USER_ID_ANONYMOUS,\n  Product,\n  TranslationService,\n  UserIdService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, first, map, tap } from 'rxjs/operators';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../current-product.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService,\n    private userIdService: UserIdService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.userIdService.getUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n  StoreFinderConfig,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n  radius: number;\n  searchQuery: StoreFinderSearchQuery;\n  geolocation: GeoPoint;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    protected config: StoreFinderConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.radius = this.config.googleMaps.radius;\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected winRef: WindowRef\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.isUserLoggedIn().subscribe((isLoggedIn) => {\n        if (isLoggedIn) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule } from '../../../shared/index';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutConfigService } from '../../checkout/services/index';\n\n@Component({\n  selector: 'cx-login-register',\n  templateUrl: './login-register.component.html',\n})\nexport class LoginRegisterComponent implements OnInit {\n  loginAsGuest = false;\n\n  constructor(\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CheckoutModule,\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginRegisterComponent } from './login-register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    I18nModule,\n    CheckoutModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerRegisterComponent: {\n          component: LoginRegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginRegisterComponent],\n  entryComponents: [LoginRegisterComponent],\n  exports: [LoginRegisterComponent],\n})\nexport class LoginRegisterModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport {\n  AuthConfigService,\n  AuthRedirectService,\n  AuthService,\n  OAuthFlow,\n} from '@spartacus/core';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\n\n/**\n * Guards the _login_ route.\n *\n * Takes care of routing the user to a auth server login page (if implicit or code flow is used).\n * In case of Resource Owner Password Flow just renders the page as normal CMS page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginGuard implements CanActivate {\n  constructor(\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected authConfigService: AuthConfigService,\n    protected cmsPageGuard: CmsPageGuard\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.authService.isUserLoggedIn().pipe(\n      take(1),\n      switchMap((isUserLoggedIn) => {\n        if (\n          this.authConfigService.getOAuthFlow() ===\n            OAuthFlow.ResourceOwnerPasswordFlow ||\n          isUserLoggedIn\n        ) {\n          return this.cmsPageGuard.canActivate(route, state);\n        } else {\n          // Remember the previous url, so we can redirect user to that page after OAuth server callback\n          this.authRedirectService.reportNotAuthGuard();\n          // This method can trigger redirect to OAuth server that's why we don't return anything in this case\n          const redirected = this.authService.loginWithRedirect();\n          if (!redirected) {\n            return of(false);\n          }\n          return EMPTY;\n        }\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LoginGuard } from './login.guard';\n\n/**\n * This module enables to quickly switch from Resource Owner Password Flow\n * to Implicit Flow or Authorization Code Flow. The `login` route in this case will be\n * responsible for initalizing the redirect to OAuth server to login.\n *\n * Instead of manually invoking OAuth redirect you only have to redirect to `login` page.\n */\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LoginGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'login' },\n      },\n    ]),\n  ],\n})\nexport class LoginRouteModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * First we want to complete logout process before redirecting to logout page\n     * We want to avoid errors like `token is no longer valid`\n     */\n    return from(this.logout()).pipe(\n      switchMap(() => {\n        return this.cms\n          .hasPage({\n            id: this.semanticPathService.get('logout'),\n            type: PageType.CONTENT_PAGE,\n          })\n          .pipe(\n            map((hasPage) => {\n              if (!hasPage) {\n                return this.getRedirectUrl();\n              }\n              // TODO(#9385): Use CMS page guard here.\n              return hasPage;\n            })\n          );\n      })\n    );\n  }\n\n  protected logout(): Promise<any> {\n    return this.auth.logout();\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected getRedirectUrl(): UrlTree {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    return this.router.parseUrl(this.semanticPathService.get(cxRoute));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout.guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthConfigService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  OAuthFlow,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CustomFormValidators, sortTitles } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected authConfigService: AuthConfigService\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      if (\n        this.authConfigService.getOAuthFlow() ===\n        OAuthFlow.ResourceOwnerPasswordFlow\n      ) {\n        this.router.go('login');\n      }\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginRegisterModule } from './login-register/login-register.module';\nimport { LoginRouteModule } from './login-route/login-route.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LoginRegisterModule,\n    LogoutModule,\n    LoginRouteModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ReplenishmentOrderDetailsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  ReplenishmentOrderHistoryModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport {\n  OrderConfirmationModule,\n  ReplenishmentOrderConfirmationModule,\n} from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n    ReplenishmentOrderHistoryModule,\n    ReplenishmentOrderConfirmationModule,\n    ReplenishmentOrderDetailsModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { Params } from '@angular/router';\nimport { PageContext } from '@spartacus/core';\n\n/**\n * Indicates that a user visited an arbitrary page.\n */\nexport class PageEvent {\n  context: PageContext;\n  semanticRoute?: string;\n  url: string;\n  params: Params;\n}\n\n/**\n * Indicates that a user visited the home page.\n */\nexport class HomePageEvent extends PageEvent {}\n","import { PageEvent } from '../page/page.events';\n\n/**\n * Indicates that a user visited a cart page.\n */\nexport class CartPageEvent extends PageEvent {}\n","import { Injectable } from '@angular/core';\nimport { ActionsSubject } from '@ngrx/store';\nimport { createFrom, EventService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PageEvent } from '../page/page.events';\nimport { CartPageEvent } from './cart-page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageEventBuilder {\n  constructor(\n    protected actions: ActionsSubject,\n    protected eventService: EventService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(CartPageEvent, this.buildCartPageEvent());\n  }\n\n  protected buildCartPageEvent(): Observable<CartPageEvent> {\n    return this.eventService.get(PageEvent).pipe(\n      filter((pageEvent) => pageEvent.semanticRoute === 'cart'),\n      map((pageEvent) => createFrom(CartPageEvent, pageEvent))\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartPageEventBuilder } from './cart-page-event.builder';\n\n@NgModule({})\nexport class CartPageEventModule {\n  constructor(_cartPageEventBuilder: CartPageEventBuilder) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { RouterNavigatedAction, ROUTER_NAVIGATED } from '@ngrx/router-store';\nimport { ActionsSubject } from '@ngrx/store';\nimport {\n  ActivatedRouterStateSnapshot,\n  createFrom,\n  EventService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { HomePageEvent, PageEvent } from './page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageEventBuilder {\n  constructor(\n    protected actions: ActionsSubject,\n    protected eventService: EventService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(PageEvent, this.buildPageEvent());\n    this.eventService.register(HomePageEvent, this.buildHomePageEvent());\n  }\n\n  protected buildPageEvent(): Observable<PageEvent> {\n    return this.getNavigatedEvent().pipe(\n      map((state) =>\n        createFrom(PageEvent, {\n          context: state.context,\n          semanticRoute: state.semanticRoute,\n          url: state.url,\n          params: state.params,\n        })\n      )\n    );\n  }\n\n  protected buildHomePageEvent(): Observable<HomePageEvent> {\n    return this.buildPageEvent().pipe(\n      filter((pageEvent) => pageEvent.semanticRoute === 'home'),\n      map((pageEvent) => createFrom(HomePageEvent, pageEvent))\n    );\n  }\n\n  private getNavigatedEvent(): Observable<ActivatedRouterStateSnapshot> {\n    return this.actions.pipe(\n      ofType<RouterNavigatedAction<ActivatedRouterStateSnapshot>>(\n        ROUTER_NAVIGATED\n      ),\n      map((event) => event.payload.routerState)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageEventBuilder } from './page-event.builder';\n\n@NgModule({})\nexport class PageEventModule {\n  constructor(_pageEventBuilder: PageEventBuilder) {}\n}\n","import { Category, Price } from '@spartacus/core';\nimport { PageEvent } from '../page/page.events';\n\n/**\n * Indicates that a user visited a product details page.\n */\nexport class ProductDetailsPageEvent extends PageEvent {\n  categories?: Category[];\n  code?: string;\n  name?: string;\n  price?: Price;\n}\n\n/**\n * Indicates that a user visited a category page.\n */\nexport class CategoryPageResultsEvent extends PageEvent {\n  categoryCode: string;\n  categoryName?: string;\n  numberOfResults: Number;\n}\n\n/**\n * Indicates that the a user visited the search results page,\n * and that the search results have been retrieved.\n */\nexport class SearchPageResultsEvent extends PageEvent {\n  searchTerm: string;\n  numberOfResults: Number;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  createFrom,\n  EventService,\n  ProductSearchService,\n  ProductService,\n} from '@spartacus/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { filter, map, skip, switchMap, take } from 'rxjs/operators';\nimport { PageEvent } from '../page/page.events';\nimport {\n  CategoryPageResultsEvent,\n  ProductDetailsPageEvent,\n  SearchPageResultsEvent,\n} from './product-page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageEventBuilder {\n  constructor(\n    protected eventService: EventService,\n    protected productService: ProductService,\n    protected productSearchService: ProductSearchService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(\n      SearchPageResultsEvent,\n      this.buildSearchPageResultsEvent()\n    );\n    this.eventService.register(\n      ProductDetailsPageEvent,\n      this.buildProductDetailsPageEvent()\n    );\n    this.eventService.register(\n      CategoryPageResultsEvent,\n      this.buildCategoryResultsPageEvent()\n    );\n  }\n\n  protected buildProductDetailsPageEvent(): Observable<\n    ProductDetailsPageEvent\n  > {\n    return this.eventService.get(PageEvent).pipe(\n      filter((pageEvent) => pageEvent.semanticRoute === 'product'),\n      switchMap((pageEvent) =>\n        this.productService.get(pageEvent.context.id).pipe(\n          filter((product) => Boolean(product)),\n          take(1),\n          map((product) =>\n            createFrom(ProductDetailsPageEvent, {\n              ...pageEvent,\n              categories: product.categories,\n              code: product.code,\n              name: product.name,\n              price: product.price,\n            })\n          )\n        )\n      )\n    );\n  }\n\n  protected buildCategoryResultsPageEvent(): Observable<\n    CategoryPageResultsEvent\n  > {\n    const searchResults$ = this.productSearchService.getResults().pipe(\n      // skipping the initial value, and preventing emission of the previous search state\n      skip(1)\n    );\n\n    return this.eventService.get(PageEvent).pipe(\n      switchMap((pageEvent) => {\n        if (pageEvent?.semanticRoute !== 'category') {\n          return EMPTY;\n        }\n\n        return searchResults$.pipe(\n          map((searchResults) => ({\n            ...pageEvent,\n            ...{\n              categoryCode: pageEvent?.context?.id,\n              numberOfResults: searchResults?.pagination?.totalResults,\n              categoryName: searchResults.breadcrumbs?.[0].facetValueName,\n            },\n          })),\n          map((categoryPage) =>\n            createFrom(CategoryPageResultsEvent, categoryPage)\n          )\n        );\n      })\n    );\n  }\n\n  protected buildSearchPageResultsEvent(): Observable<SearchPageResultsEvent> {\n    const searchResults$ = this.productSearchService.getResults().pipe(\n      // skipping the initial value, and preventing emission of the previous search state\n      skip(1)\n    );\n\n    return this.eventService.get(PageEvent).pipe(\n      switchMap((pageEvent) => {\n        if (pageEvent?.semanticRoute !== 'search') {\n          return EMPTY;\n        }\n\n        return searchResults$.pipe(\n          map((searchResults) => ({\n            ...pageEvent,\n            ...{\n              searchTerm: searchResults?.freeTextSearch,\n              numberOfResults: searchResults?.pagination?.totalResults,\n            },\n          })),\n          map((searchPage) => createFrom(SearchPageResultsEvent, searchPage))\n        );\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ProductPageEventBuilder } from './product-page-event.builder';\n\n@NgModule({})\nexport class ProductPageEventModule {\n  constructor(_productPageEventBuilder: ProductPageEventBuilder) {}\n}\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\n/**\n * The layout configuration is used to define the overall layout of the storefront.\n * The configuration includes the following aspects:\n * - breakpoint layout (AKA screen layout)\n * - Page sections slot configuration (i.e. header vs footer)\n * - page template slot configuration (i.e. landing page template vs PDP page template)\n * - deferred loading configuration\n *\n * The page slot configurations is directly related to the data in the backend. If you use the\n * Spartacus sample-data, you will have an aligned setup. However, if you introduce custom page\n * templates and/or slots, you most likely need to further adjust or replace this configuration.\n */\nexport const layoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n      pageFold: 'Summary',\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n\n/**\n * @deprecated the b2cLayoutConfig will be dropped with version 4.0.\n *\n * With Spartacus 3.0 we started to align various layout configurations. Moreover, we move\n * into a pattern where layout configurations are shattered through various (lazy loaded) modules.\n */\nexport const b2cLayoutConfig: LayoutConfig = layoutConfig;\n","import { ValueProvider } from '@angular/core';\nimport { provideCmsStructure } from '../../cms-structure/utils/cms-structure.util';\n\nexport const defaultCmsContentProviders: ValueProvider[] = [\n  provideCmsStructure({\n    componentId: 'HamburgerMenuComponent',\n    pageSlotPosition: 'PreHeader',\n  }),\n  provideCmsStructure({\n    componentId: 'LoginComponent',\n    pageSlotPosition: 'SiteLogin',\n  }),\n];\n","import { NgModule } from '@angular/core';\nimport { CartPageEventModule } from './cart/cart-page-event.module';\nimport { PageEventModule } from './page/page-event.module';\nimport { ProductPageEventModule } from './product/product-page-event.module';\n\n@NgModule({\n  imports: [CartPageEventModule, PageEventModule, ProductPageEventModule],\n})\nexport class EventsModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { EventsModule } from '../events/events.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n    EventsModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      anchorScrolling: 'enabled',\n      relativeLinkResolution: 'corrected',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { layoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentProviders } from './config/static-cms-structure';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(layoutConfig),\n    provideDefaultConfig(mediaConfig),\n    ...defaultCmsContentProviders,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { AbstractControl, FormArray, FormGroup } from '@angular/forms';\n\n/**\n * Utils for Angular forms\n */\nexport namespace FormUtils {\n  /**\n   * Calls the native Angular method `#updateValueAndValidity` for the given from control\n   * and all its descendants (in case when it's `FormGroup` or `FormArray`).\n   *\n   * In particular it's useful for triggering re-emission of observables\n   * `valueChanges` and `statusChanges` for all descendant form controls.\n   *\n   * _Note: Dropping this function may be considered, when it's implemented natively\n   * by Angular. See https://github.com/angular/angular/issues/6170_\n   *\n   * @param control form control\n   * @param options additional options\n   * * `emitEvent`: When true or not given (the default), the `statusChanges` and\n   * `valueChanges` observables emit the latest status and value. When false,\n   * it doesn't trigger observables emission.\n   */\n  export function deepUpdateValueAndValidity(\n    control: AbstractControl,\n    options: { emitEvent?: boolean } = {}\n  ): void {\n    if (control instanceof FormGroup || control instanceof FormArray) {\n      Object.values(control.controls).forEach(\n        (childControl: AbstractControl) => {\n          deepUpdateValueAndValidity(childControl, options);\n        }\n      );\n    }\n\n    control.updateValueAndValidity({\n      onlySelf: true, // avoid calling `#updateValueAndValidity` for all ancestors\n      emitEvent: options.emitEvent,\n    });\n  }\n}\n"]}