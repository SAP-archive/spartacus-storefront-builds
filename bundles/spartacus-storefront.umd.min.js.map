{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/recipes/config/optional-layouts/plp-accessibility-layout-config.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","ar","error","__spread","concat","IconResourceType","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","IconConfig","DomSanitizer","Injectable","providedIn","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","provide","useExisting","Config","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","console","warn","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","args","DOCUMENT","PLATFORM_ID","CxApiService","auth","cart","cartData","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","Optional","CartService","CartDataService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","CmsService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","ComponentWrapperDirective","vcr","componentMapper","injector","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","undefined","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","get","CmsComponentData","element","parentElement","P","reject","fulfilled","rejected","result","then","uid","data$","getComponentData","configProviders","Injector","useValue","parent","addDynamicAttributes","properties","destroy","remove","ViewContainerRef","DynamicAttributeService","Directive","PageComponentModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","state","canActivateObservables","map","guardClass","canActivate","isCanActivate","isObservable","obj","of","wrapIntoObservable","first","Error","skipWhile","endWith","BREAKPOINT","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","OutletPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","event","getBreakpoint","innerWidth","xl","windowWidth","getClosest","reverse","br","nativeWindow","PAGE_LAYOUT_HANDLER","InjectionToken","PageLayoutService","breakpointService","handlers","warnLogMessages","logSlots","getSlots","section","page$","breakpoint$","page","pageTemplate","slots","resolveSlots","switchMap","_c","_d","handle","a","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","keys","filter","slot","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","isDevMode","info","join","cacheKey","PageLayoutComponent","el","pageLayoutService","section$","BehaviorSubject","templateName$","layoutName$","name","styleClass","slots$","pageFoldSlot$","templateName","currentClass","changeDetection","ChangeDetectionStrategy","OnPush","CmsRoutesService","router","cmsRouteExist","isCmsDrivenRoute","startsWith","routePath","substr","data","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","Router","CmsPageGuard","routingService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","withLatestFrom","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","index","guardName","SemanticPathService","ProtectedRoutesGuard","SkipLinkScrollPosition","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","REPLACE","BEFORE","store","AFTER","stacked","templateRef","newValue","set","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","load","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletDirective","deferLoaderService","loaded","EventEmitter","subscription","initializeOutlet","clear","cxOutletDefer","render","ngOnChanges","changes","cxOutlet","emit","hostElement","getHostElement","renderOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","Output","OutletModule","PageSlotComponent","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","HostBinding","SkipLinkService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","existing","getSkipLinkIndexInArray","i18nKey","scrollToTarget","parentNode","blur","inline","scrollIntoView","findIndex","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","observeOn","asyncScheduler","tabNext","isElement","nextSibling","focus","tabPrev","previousSibling","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","SkipLinkModule","APP_INITIALIZER","useFactory","skipLinkFactory","deps","multi","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","globalMessageService","canPrompt","canPrompt$","asObservable","init","addEventListener","preventDefault","deferredEvent","enableAddToHomeScreen","GlobalMessageType","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","paths","notFound","login","protected","forgotPassword","resetPassword","logout","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","productCode","termsAndConditions","orders","orderDetails","orderCode","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","coupons","couponClaim","couponCode","defaultRoutingConfig","RoutingModule","forRoot","ngModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","slice","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","title","description","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","getActive","lang","documentElement","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","item","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","code","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","stock","stockLevelStatus","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","rev","rating","reviewCount","comment","reviewSchema","principal","author","date","Date","datePublished","getFullYear","getMonth","getDate","headline","reviewRating","toString","CurrentProductService","productService","features","DEFAULT_PRODUCT_SCOPE","isLevel","ProductScope","DETAILS","getProduct","scopes","getRouterState","params","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","AsmComponentService","authService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","encapsulation","ViewEncapsulation","None","AsmEnablerService","isUiAdded","isEnabled","addUi","isLaunched","isUsedBefore","setItem","getItem","Location","AsmLoaderModule","asmFactory","asmEnablerService","PaginationItemType","PaginationNavigationPosition","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","Math","floor","seconds","Pipe","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CSAgentLoginFormComponent","fb","submitClicked","csAgentTokenLoading","submitEvent","group","Validators","required","onSubmit","controls","isNotValid","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","valueChanges","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","AsmModule","ReactiveFormsModule","AsmCoreModule","OrderDetailsService","userOrderService","orderCode$","routingData","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","consumedEntries","e_2","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","ActiveCartService","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","increment","addToCartForm","cartEntry$","getEntry","setStockInfo","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","AutoFocusDirective","ngAfterViewInit","AutoFocusDirectiveModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","delete","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","MediaService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","isInitialized","isLoading","isMissing","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","allowZero","readonly","handleClick","input","markAsDirty","decrement","getControl","_control$","getValidCount","emitEvent","max","HostListener","ItemCounterModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","round","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","getInjectedService","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","force","style","setProperty","saveRate","setRateOnEvent","StarRatingModule","ViewConfigModule","ViewConfigModule_1","view","ViewConfig","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","sortTitles","title1","title2","DeliveryModePreferences","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","sort","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","cartIsLoading$","resetAddVoucherProcessingState","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","valid","addVoucher","markAsTouched","applyCustomerCoupon","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","isSaveForLaterEnabled","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","isEmpty","totalItems","CartPageLayoutHandler","getCart","selectiveCart","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","CheckoutStepType","CheckoutConfig","AmendOrderType","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isActive","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","year","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","img","actions","header","goNext","goPrevious","paymentMethodSelected","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","tab","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","paymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","child","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","stopPropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","childNodes","tagName","isTabbable","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","setTimeout","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","querySelectorAll","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","replace","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","active","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","thumbnail","zoom","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductDetailOutlets","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","topValueCount","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","markFormAsTouched","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","viewStore","prepareRouteUrl","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefillForm","submitLogin","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","withConfig","StorefrontModule_1","provideConfig","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        res =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach(cls =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach(cls => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(fontawesomeIconConfig),\n    { provide: IconConfig, useExisting: Config },\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n  UserNotificationPreferenceService,\n  UserInterestsService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map(breakpoint => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap(templateName =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService\n          .getPage(pageContext, true)\n          .pipe(first(), withLatestFrom(of(pageContext)))\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned obervable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first(v => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable(observer => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver(entries => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options?: IntersectionOptions) {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evalutes whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>,\n    // tslint:disable-next-line: unified-signatures\n    intersectionService: DeferLoaderService\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, intersectionService?: IntersectionService) instead\n   */\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>\n  );\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService?: DeferLoaderService\n  ) {}\n\n  private initializeOutlet(): void {\n    this.vcr.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.render();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.initializeOutlet();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.render();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private render() {\n    this.renderOutlet(OutletPosition.BEFORE);\n    this.renderOutlet(OutletPosition.REPLACE);\n    this.renderOutlet(OutletPosition.AFTER);\n  }\n\n  private renderOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach(obj => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe(components => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n  SkipLink,\n  SkipLinkConfig,\n  SkipLinkScrollPosition,\n} from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(protected config: SkipLinkConfig) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target: target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key: key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter(skipLink => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(\n    target: HTMLElement,\n    position: SkipLinkScrollPosition,\n    event: MouseEvent\n  ): void {\n    target = <HTMLElement>target.parentNode;\n    (<HTMLElement>event.target).blur();\n    const options: ScrollIntoViewOptions =\n      position === SkipLinkScrollPosition.AFTER ? { inline: 'end' } : {};\n\n    target.scrollIntoView(options);\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      skipLink => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          skipLink => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable, asyncScheduler } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\nimport { observeOn } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService\n    .getSkipLinks()\n    .pipe(observeOn(asyncScheduler)); // delay view's update to avoid ExpressionChangedAfterItHasBeenCheckedError\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink, event: MouseEvent): void {\n    this.skipLinkService.scrollToTarget(\n      skipLink.target,\n      skipLink.position,\n      event\n    );\n  }\n\n  /**\n   * Hides the skip link by removing the focus.\n   */\n  blur(event: MouseEvent): void {\n    (<HTMLElement>event.target).blur();\n  }\n\n  tabNext(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).nextSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).nextSibling).focus();\n    }\n  }\n  tabPrev(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).previousSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).previousSibling).focus();\n    }\n  }\n\n  private isElement(element: Node): boolean {\n    return !!element && element instanceof HTMLElement;\n  }\n}\n","import { SkipLinkConfig, SkipLinkScrollPosition } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'SiteContext',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'BottomHeaderSlot',\n      position: SkipLinkScrollPosition.AFTER,\n      i18nKey: 'skipLink.labels.main',\n    },\n    {\n      key: 'ProductLeftRefinements',\n      i18nKey: 'skipLink.labels.productFacets',\n    },\n    { key: 'ProductListSlot', i18nKey: 'skipLink.labels.productList' },\n    { key: 'Footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\nimport { SkipLinkModule } from '../../../layout/a11y/skip-link/skip-link.module';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule, SkipLinkModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    routingService: RoutingService,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(routingService: RoutingService, productService: ProductService);\n\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.DETAILS : '';\n\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) =>\n        this.productService.get(\n          productCode,\n          // TODO deprecated since 1.4 - should be replaced with 'scopes || this.DEFAULT_PRODUCT_SCOPE'\n          this.features && this.features.isLevel('1.4')\n            ? scopes || this.DEFAULT_PRODUCT_SCOPE\n            : undefined\n          // deprecated END\n        )\n      )\n    );\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Location } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { OutletPosition, OutletService } from '../../../cms-structure/index';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\nimport { AsmMainUiComponent } from '../asm-main-ui/asm-main-ui.component';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  /** indicates whether the ASM UI has been added already */\n  private isUiAdded = false;\n\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletService: OutletService<ComponentFactory<any>>\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  private isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  private isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  private addUi(): void {\n    if (this.isUiAdded) {\n      return;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      AsmMainUiComponent\n    );\n    this.outletService.add('cx-storefront', factory, OutletPosition.BEFORE);\n    this.isUiAdded = true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map(cart => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map(cart =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter(e => !!e),\n        map(entry => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap(valueChange => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AutoFocusDirectiveModule } from '../../directives/auto-focus/auto-focus.directive.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, AutoFocusDirectiveModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media && media[this.getHighestAvailableFormat(media)]) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach(format => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap(value =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthService,\n  Cart,\n  CartService,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  FeatureConfigService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    cartService: CartService,\n    authService: AuthService,\n    cartVoucherService: CartVoucherService,\n    formBuilder: FormBuilder,\n    customerCouponService: CustomerCouponService,\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add customerCouponService,featureConfig for customer coupon feature.\n   * Remove issue: #5971\n   */\n  constructor(\n    cartService: CartService,\n    authService: AuthService,\n    cartVoucherService: CartVoucherService,\n    formBuilder: FormBuilder\n  );\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder,\n    protected customerCouponService?: CustomerCouponService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.cartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.cartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe(error => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach(appliedVoucher => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          coupon => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (!this.form.valid) {\n      this.form.markAsTouched();\n      return;\n    }\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  CartService,\n  ConsignmentEntry,\n  FeatureConfigService,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    cartService: CartService,\n    selectiveCartService: SelectiveCartService,\n    featureConfig: FeatureConfigService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Add selectiveCartService authService routingService and featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    protected cartService: CartService,\n    protected selectiveCartService?: SelectiveCartService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every(item => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map(consignmentEntry => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach(item => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.cartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map(value => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.cartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  FeatureConfigService,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    promotionService: PromotionService,\n    // tslint:disable-next-line:unified-signatures\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(promotionService: PromotionService);\n\n  constructor(\n    protected promotionService: PromotionService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  Cart,\n  ActiveCartService,\n  FeatureConfigService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private featureConfig: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n\n    if (this.isSaveForLaterEnabled()) {\n      this.cartLoaded$ = combineLatest([\n        this.activeCartService.getLoaded(),\n        this.selectiveCartService.getLoaded(),\n        this.authService.isUserLoggedIn(),\n      ]).pipe(\n        tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n        map(([cartLoaded, sflLoaded, loggedIn]) =>\n          loggedIn ? cartLoaded && sflLoaded : cartLoaded\n        )\n      );\n    }\n    //TODO remove for #5958\n    else {\n      this.cartLoaded$ = this.activeCartService.getLoaded();\n    }\n    //TODO  remove for #5958 end\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958 end\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getLoaded(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else if (selectiveCart.totalItems) {\n            return slots.filter(\n              slot =>\n                slot !== 'EmptyCartMiddleContent' &&\n                slot !== 'CenterRightContentSlot'\n            );\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter(product => Boolean(product)),\n    tap(product => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter(wishlist => Boolean(wishlist)),\n    map(wishList => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find(entry => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  SelectiveCartService,\n  Cart,\n  OrderEntry,\n  ActiveCartService,\n  CmsParagraphComponent,\n  CmsService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map(cart => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.getLoaded(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoaderState,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<LoaderState<void>>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { CheckoutStepType } from '../..';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\n@NgModule({\n  imports: [OutletRefModule],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach(comp => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach(key => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap(form => {\n        return this.getEntries().pipe(\n          map(entries =>\n            entries.filter(entry => this.getFormControl(form, entry).value > 0)\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap(order => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach(entry => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach(entry =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => Boolean(order)),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => !!order.entries),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first(r => !!r))\n      .subscribe(returnRequest => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(consignment =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            consignment => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map(order => order.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap(returnRequest => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      success => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map(returnRequests => returnRequests.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Observable, combineLatest, Subscription } from 'rxjs';\nimport {\n  CustomerCouponService,\n  CustomerCouponSearchResult,\n  PaginationModel,\n} from '@spartacus/core';\nimport { tap, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          coupons =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe(k => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe(success => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap(preferences => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach(p => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          interests =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map(interest => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map(result => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                key => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                it => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map(items => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach(child =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map(child => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    event.preventDefault();\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter(n => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n\n  isTabbable(node: any) {\n    return this.flyout && node.children && node.children.length;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.LIST : '';\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes =>\n      codes.map(code => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  /**\n   * @deprecated since version 1.5\n   * This variable will no longer be in use. Use thumbs$ observable instead.\n   * TODO(issue:#6166).\n   */\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    // TODO: deprecated, remove the below tap (issue:#6166)\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet: Facet): Facet[] {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : facet.topValueCount\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter(product => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap(product => {\n        product.baseOptions.forEach(option => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find(item => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach(variant => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          item => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter(variant => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  // TODO deprecated since 1.4, remove\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    map(p => p.code),\n    distinctUntilChanged(),\n    switchMap(productCode => this.reviewService.getByProductCode(productCode)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  private markFormAsTouched(): void {\n    Object.keys(this.reviewForm.controls).forEach(key => {\n      this.reviewForm.controls[key].markAsTouched();\n    });\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.markFormAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/components/star-rating/star-rating.module';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe(success => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(interests => !!interests.results && interests.results.length === 1)\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap(prefs => (this.enabledPrefs = prefs)),\n        map(prefs => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe(error => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe(success => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe(text =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService, RoutingService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(\n    protected storeDataService: StoreDataService,\n    protected route: ActivatedRoute,\n    protected routingService: RoutingService\n  ) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.activeCartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.activeCartService.getAssignedUser().subscribe(_ => {\n        if (this.activeCartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef: WindowRef,\n    private activatedRoute: ActivatedRoute,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    if (this.form.valid) {\n      this.submitLogin();\n    } else {\n      this.markFormAsTouched();\n    }\n  }\n\n  private submitLogin(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  private markFormAsTouched(): void {\n    Object.keys(this.form.controls).forEach(key => {\n      this.form.controls[key].markAsTouched();\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template ? template.description : '',\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      md: {\n        pageFold: 'UpSelling',\n      },\n      xs: {\n        pageFold: 'Summary',\n      },\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","/**\n * @deprecated since 2.0.0\n * NOTE: delete this file altogether, move below slots to the main default layout config\n */\n\nimport { LayoutConfig } from '../../../layout/config/layout-config';\n\nexport const PLPAccessibilityLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n  },\n};\n"]}