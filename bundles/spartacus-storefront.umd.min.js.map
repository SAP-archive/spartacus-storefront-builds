{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-launch-dialog.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/layout/direction/config/direction.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/default-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/default-anonymous-consent-layout.config.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/split-view/split-view-deactivate.guard.ts","ng://@spartacus/storefront/shared/components/split-view/split-view.service.ts","ng://@spartacus/storefront/shared/components/split-view/split/split-view.component.ts","ng://@spartacus/storefront/shared/components/split-view/view/view.component.ts","ng://@spartacus/storefront/shared/components/split-view/split-view.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/table/config/table.config.ts","ng://@spartacus/storefront/shared/components/table/table.component.ts","ng://@spartacus/storefront/shared/components/table/table.module.ts","ng://@spartacus/storefront/shared/components/table/table.service.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-structure/services/feature-modules.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-components.service.ts","ng://@spartacus/storefront/shared/utils/combined-injector.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/lazy-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/asm-toggle-ui/asm-toggle-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/default-asm-layout.config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-step.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-steps-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/multiline-titles.pipe.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/cost-center/cost-center.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/cost-center/cost-center.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-type/payment-type.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-type/payment-type.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/direction/config/direction.config.ts","ng://@spartacus/storefront/layout/direction/config/default-direction.config.ts","ng://@spartacus/storefront/layout/direction/direction.service.ts","ng://@spartacus/storefront/layout/direction/direction.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-template-style.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/login-register/login-register.component.ts","ng://@spartacus/storefront/cms-components/user/login-register/login-register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/events/page/page.events.ts","ng://@spartacus/storefront/events/cart/cart-page.events.ts","ng://@spartacus/storefront/events/cart/cart-page-event.builder.ts","ng://@spartacus/storefront/events/cart/cart-page-event.module.ts","ng://@spartacus/storefront/events/page/page-event.builder.ts","ng://@spartacus/storefront/events/page/page-event.module.ts","ng://@spartacus/storefront/events/product/product-page.events.ts","ng://@spartacus/storefront/events/product/product-page-event.builder.ts","ng://@spartacus/storefront/events/product/product-page-event.module.ts","ng://@spartacus/storefront/recipes/config/b2b-layout-config.ts","ng://@spartacus/storefront/recipes/config/b2b-occ-config.ts","ng://@spartacus/storefront/recipes/config/b2b-checkout-config.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/events/events.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/recipes/b2b-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","DIALOG_TYPE","LAUNCH_CALLER","BREAKPOINT","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","ar","error","__spread","concat","OutletPosition","LayoutConfig","Injectable","providedIn","useExisting","Config","LaunchRenderStrategy","document","rendererFactory","renderedCallers","dialogClasses","popoverClasses","sidebarEndClasses","sidebarStartClasses","renderer","createRenderer","shouldRender","caller","config","Boolean","component","some","el","multi","applyClasses","dialogType","classes","DIALOG","addClass","POPOVER","SIDEBAR_END","SIDEBAR_START","classes_1","classes_1_1","newClass","location","nativeElement","remove","filter","_a","removeClass","getPriority","Inject","DOCUMENT","InlineRenderStrategy","componentFactoryResolver","_this","_super","render","vcr","template","resolveComponentFactory","createComponent","element","of","isDevMode","console","warn","hasMatch","inline","args","RendererFactory2","ComponentFactoryResolver","LaunchDialogService","renderStrategies","layoutConfig","_dialogClose","BehaviorSubject","undefined","launch","findConfiguration","getStrategy","clear","asObservable","closeDialog","reason","resolveApplicable","ICON_TYPE","OutletService","features","templatesRefs","BEFORE","Map","REPLACE","AFTER","add","outlet","templateOrFactory","position","store","newValue","get","set","stacked","templateRef","removeValueOrAll","has","delete","existing","isLevel","val","FeatureConfigService","OutletRefDirective","tpl","outletService","ngOnInit","cxOutletRef","cxOutletPos","ngOnDestroy","TemplateRef","Input","Directive","selector","OutletRefModule","NgModule","imports","CommonModule","declarations","exports","OutletRendererService","outletRefs","size","register","cxOutlet","context","getOutletRef","pipe","map","IntersectionService","isIntersected","options","intersects","first","Observable","observer","intersectOptions","rootMargin","getRootMargin","threshold","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","distinctUntilChanged","deferredLoading","intersectionMargin","DeferLoaderService","platformId","intersectionService","globalLoadStrategy","strategy","DeferLoadingStrategy","INSTANT","load","shouldLoadInstantly","deferLoading","elementLoadingStrategy","isPlatformServer","DEFER","type","PLATFORM_ID","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","renderedComponents","loaded","EventEmitter","subscription","Subscription","unsubscribe","cxOutletDefer","build","ngOnChanges","changes","emit","hostElement","getHostElement","subscribe","buildOutlet","templates","includes","isArray","components","forEach","obj","tmplOrFactory","ComponentFactory","getComponentInjector","view","createEmbeddedView","$implicit","cxOutletContext","markForCheck","contextData","reference","Injector","providers","provide","OutletContextData","useValue","parent","injector","HTMLElement","parentNode","ViewContainerRef","Output","OutletModule","OutletRenderStrategy","template_1","outletDirective","reverse","find","componentType","tap","RoutingRenderStrategy","routingService","_caller","go","cxRoute","RoutingService","LaunchDialogModule","forRoot","ngModule","LaunchDialogModule_1","AnonymousConsentLaunchDialogService","launchDialogService","openDialog","openElement","ANONYMOUS_CONSENT","combineLatest","dialogClose","close","comp","focus","destroy","BaseFocusService","BaseFocusDirective","elementRef","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","host","tagName","toLowerCase","hasAttribute","ElementRef","HostBinding","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","event","isNavigating","metaKey","code","HostListener","BlockFocusDirective","block","PersistFocusService","group","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","isHidden","findFocusable","locked","invisible","suffix","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","setTimeout","_b","setAttribute","shouldUnlockAfterAutofocus","toString","Renderer2","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","AnonymousConsentManagementBannerComponent","anonymousConsentsService","anonymousConsentLaunchDialogService","subscriptions","bannerVisible$","isBannerVisible","viewDetails","hideBanner","dialog","allowAll","giveAllConsents","toggleBannerDismissed","AnonymousConsentsService","Component","IconResourceType","IconConfig","DirectionMode","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","PENCIL","resources","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getFlipDirection","flipDirection","getStyleClasses","iconType","resourceType","res","types","svgResource","addLinkResource","resource","findResource","head","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","DomSanitizer","PaginationItemType","PaginationNavigationPosition","IconComponent","iconLoader","setIcon","addStyleClasses","flipIcon","iconDirection","flipAtLtr","LTR","flipAtRtl","RTL","styleClasses","cls","split","defaultIconConfig","IconModule","provideDefaultConfig","AnonymousConsentDialogComponent","role","modal","showLegalDescription","iconTypes","requiredConsents","focusConfig","anonymousConsents","showLegalDescriptionInDialog","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","rejectAll","take","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","AnonymousConsentsConfig","defaultAnonymousConsentLayoutConfig","AnonymousConsentOpenDialogComponent","ViewChild","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","provideConfig","cmsComponents","entryComponents","SpinnerComponent","SpinnerModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","globalMessageService","anonymousConsentsConfig","authService","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","withLatestFrom","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","success","onConsentGivenSuccess","resetWithdrawConsentProcessState","skipWhile","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","GlobalMessageType","MSG_TYPE_CONFIRMATION","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","loading","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","UserConsentService","GlobalMessageService","AuthService","ConsentManagementModule","FormsModule","ReactiveFormsModule","guards","AuthGuard","AnonymousConsentsDialogModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","floor","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","slice","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","sort","a","width","_reversedFormats","sortedFormats","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","isInitialized","isLoading","isMissing","container","handleMissing","loadHandler","errorHandler","MediaModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","FormErrorsComponent","_control","control","errors$","statusChanges","startWith","errors","invalid","dirty","touched","FormErrorsModule","GenericLinkComponent","router","PROTOCOL_REGEX","URL_SPLIT","routeParts","isExternalUrl","test","setUrlParts","currentValue","path","queryParams","fragment","getAbsoluteUrl","splitUrl","parseUrl","match","Router","GenericLinkModule","ItemCounterComponent","min","allowZero","readonly","input","sub","valueChanges","setValue","getValidCount","emitEvent","markAsDirty","decrement","max","ItemCounterModule","defaultPaginationConfig","pagination","addStart","addEnd","PaginationConfig","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","MediaConfig","ModalRef","NgbModalRef","ModalService","ngbModalService","modals","open","content","activeModal","handleModalRemoveEvents","result","finally","getActiveModal","dismissActiveModal","dismiss","closeActiveModal","NgbModal","SplitViewDeactivateGuard","canDeactivate","timer","SplitViewService","defaultHideMode","_splitViewCount","_views$","initialState","views","hidden","getActiveView","getActive","getViewState","activePosition","splice","updateState","toggle","forceHide","hide","l","SplitViewComponent","splitService","lastVisibleView","lastVisible","mode","ViewComponent","disappeared","hiddenChange","_hidden","viewPosition","splitViewCount","Number","duration","force","nextPosition","getComputedStyle","getPropertyValue","trim","SplitViewModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsConfig","QualtricsLoaderService","qsiLoaded$","fromEvent","qsi$","switchMap","isDataLoaded","api","qsi","qsiApi","initialize","run","reload","API","unload","log","addScript","scriptSource","hasScript","script","defer","source","querySelector","QualtricsComponent","qualtricsLoader","qualtrics","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","Optional","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","deps","StarRatingComponent","disabled","change","initialRate","setRate","rating","saveRate","setRateOnEvent","StarRatingModule","TableConfig","TableComponent","_dataset","dataset","addTableDebugInfo","getDataValue","dataRow","headerKey","values","tableType","structure","TableModule","TableService","buildStructure","hasTableConfig","buildStructureFromConfig","buildStructureFromData","buildRandomStructure","getTableConfig","headers","hideHeader","tableConfig","table","bestMatch","message","ViewConfig","ViewConfigModule","ViewConfigModule_1","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","params","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","CheckoutService","ActiveCartService","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","password","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","controls","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","FeatureModulesService","configInitializer","compiler","componentFeatureMap","dependencyModules","initFeatureMap","_arguments","P","generator","getStableConfig","_k","featureModulesConfig","featureModules","_e","featureName","featureConfig","_f","_g","Promise","resolve","reject","fulfilled","rejected","then","hasFeatureFor","getCmsMapping","feature","resolveFeature","featureInstance","componentsMappings","getInjectors","injectors","moduleRef","depsModules","module","featureConfig_1","Error","depsResolve","dependencies","forkJoin","depModuleFunc","resolveDependencyModule","resolveFeatureModule","resolveModuleFactory","resolvedConfiguration","resolveFeatureConfiguration","featureInjector","featureConfigChunks","ConfigChunk","InjectFlags","Self","featureDefaultConfigChunks","DefaultConfigChunk","configurationFactory","moduleFunc","moduleFactory","pluck","NgModuleFactory","compileModuleAsync","observeOn","queueScheduler","merge","dependency","ConfigInitializerService","Compiler","CmsComponentsService","missingComponents","mappings","mappingResolvers","determineMappings","componentTypes","featureResolvers","componentTypes_1","componentTypes_1_1","staticConfig","getFeatureMappingResolver","mapTo","mappingResolver$","featureComponentMapping","deepMerge","share","getMapping","componentConfig","disableSSR","getDeferLoadingStrategy","getChildRoutes","routes","componentTypes_2","componentTypes_2_1","childRoutes","getGuards","Set","componentTypes_3","componentTypes_3_1","guard","getI18nKeys","i18nKeys","componentTypes_4","componentTypes_4_1","CmsConfig","NOT_FOUND_SYMBOL","CombinedInjector","mainInjector","complementaryInjectors","token","notFoundValue","flags","CmsInjectorService","cmsComponentsService","getCmsData","uid","parentInjector","CmsService","getComponentData","getInjector","configProviders","ComponentHandlerService","handlers","invalidMappings","componentMapping","handler","getLauncher","viewContainerRef","elementInjector","launcher","ComponentHandler","ComponentWrapperDirective","dynamicAttributeService","componentHandler","cmsInjector","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","ChangeDetectorRef","addDynamicAttributes","DynamicAttributeService","DefaultComponentHandler","subscriber","factory","getComponentFactory","LazyComponentHandler","defaultHandler","isNotClass","signature","substr","replace","PageComponentModule","AsmEnablerService","isEnabled","addUi","isLaunched","isUsedBefore","localStorage","setItem","getItem","ASM","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","asmEnablerService","CheckoutStepType","AsmComponentService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","isCustomerEmulationSessionInProgress","mergeMap","userToken","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","isCollapsed$","getAsmUiState","uiState","collapsed","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","UserService","AsmService","encapsulation","ViewEncapsulation","None","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","FormatTimerPipe","transform","totalSeconds","minutes","seconds","Pipe","name","AsmToggleUiComponent","isCollapsed","toggleUi","updateAsmUiState","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","user","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","customerSearch","pageSize","maxResults","selectCustomerFromList","onDocumentClick","resultList","contains","closeResults","(document:click)","defaultAsmLayoutConfig","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","ProductService","AddedToCartDialogComponent","modalService","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","product","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","selectiveCartService","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","getControl","SelectiveCartService","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","selectiveCartEnabled","cartLoaded$","getLoaded","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","getLoading","slots","selectiveCart","loadingCart","exclude","arr","arg","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","cmsService","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","DeliveryModePreferences","checkoutShippingSteps","SHIPPING_ADDRESS","DELIVERY_MODE","checkoutPaymentSteps","PAYMENT_DETAILS","PAYMENT_TYPE","SkipLinkScrollPosition","CheckoutConfig","defaultCheckoutConfig","checkout","steps","routeName","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","cartUser","roles","B2BUserGroup","B2B_CUSTOMER_GROUP","MSG_TYPE_WARNING","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutStepService","steps$","activeStepIndex$","activeStepUrl","resetSteps","back","previousUrl","nextUrl","goToStepWithIndex","allSteps","getBackBntText","disableEnableStep","currentStep","nextStep","previousStep","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","checkoutStepService","expressCheckoutService","firstStep$","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","cdr","activeStepIndex","detectChanges","CheckoutStepsSetGuard","paymentTypeService","checkoutCostCenterService","route","currentIndex","currentRouteUrl","isAccountPayment","isAccount","isStepSet","getUrl","isPaymentTypeSet","isShippingAddressAndCostCenterSet","isDeliveryModeSet","isPaymentDetailsSet","getSelectedPaymentType","paymentType","getCostCenter","deliveryAddress","costCenter","paymentDetails","PaymentTypeService","CheckoutCostCenterService","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","MultiLinePipe","lastIndex","lastIndexOf","CheckoutProgressModule","CheckoutProgress","CheckoutDetailsLoadedGuard","NotCheckoutAuthGuard","DeliveryModeSetGuard","checkoutStep","PaymentDetailsSetGuard","ShippingAddressSetGuard","CostCenterComponent","userCostCenterService","cartCostCenter$","isAccountPayment$","costCenters$","getActiveCostCenters","costCenters","costCenterId","setCostCenter","selectCostCenter","UserCostCenterService","CostCenterModule","ConfigModule","withConfig","CheckoutCostCenterComponent","DeliveryModeComponent","allowRedirect","backBtnText","deliveryModeId","supportedDeliveryModes$","takeWhile","loadSupportedDeliveryModes","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","DeliveryModeModule","CheckoutDeliveryMode","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","countrySelected","billingAddress","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","translate","month","payment","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","textExpires","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","field","cardLabels","selected","title","img","actions","header","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","PaymentTypeComponent","paymentTypes$","getPaymentTypes","typeSelected$","typeSelected","B2BPaymentTypeEnum","ACCOUNT_PAYMENT","cartPoNumber$","getPoNumber","po","cartPoNumber","changeType","setPaymentType","poNumInput","_poNumberInput","static","PaymentTypeModule","CheckoutPaymentType","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","getCountry","loadDeliveryCountries","cc","getShippingAddressCard","countryName","textTitle","getCostCenterCard","unit","getDeliveryModeCard","getPaymentMethodCard","paragraphs","_h","_j","_m","_l","_o","getPoNumberCard","poNumber","noneTextTitle","getPaymentTypeCard","getCheckoutStepUrl","stepType","shippingSteps","paymentSteps","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","setAsDefaultField","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","regionSelected","addresses$","toggleDefaultAddress","regionsSub","AddressFormModule","ShippingAddressComponent","addressFormOpened","forceLoader","doneAutoSelect","getAddressesLoading","getSupportedAddresses","selectedAddress$","selectDefaultAddress","textDefault","textShipTo","card","getCardContent","getCostCenterAddresses","selectAddress","textDefaultShippingAddress","textShipToThisAddress","addAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","goPrevious","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","SkipLinkConfig","SkipLinkService","keyboardFocusService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","getSkipLinkIndexInArray","i18nKey","scrollToTarget","parentElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkComponent","skipLinkService","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","SkipLinkModule","skipLinkFactory","DirectionConfig","defaultDirectionConfig","direction","detect","default","rtlLanguages","DirectionService","configInit","languageService","startsDetecting","setDirection","documentElement","isoCode","getDirection","language","ltrLanguages","LanguageService","initHtmlDirAttribute","directionService","featureConfigService","DirectionModule","HamburgerMenuService","isExpanded","events","NavigationStart","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","slot","pendingComponentCount","class","lastPosition","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","slotData","PageSlotModule","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageTemplateStyleService","ref","addStyleClass","currentTemplate","classList","initPageTemplateStyle","PageLayoutModule","APP_BOOTSTRAP_LISTENER","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","lang","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","JsonLdScriptFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","isPlatformBrowser","scriptElement","getElementById","JSON","stringify","_key","SecurityContext","HTML","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutPaymentType","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","routing","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","pageMeta","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductReviewService","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","typeCode","select","tabNum","scrollTo","offsetTop","history","activeTab","getTitleParams","tabComps","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","continue","amendOrderForm","forwardRoute","AmendOrderActionsModule","ValidateQuantityToCancel","cxNoSelectedItemToCancel","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getOrderCodeCardContent","getOrderCurrentDateCardContent","isoDate","getOrderStatusCardContent","getPurchaseOrderNumber","getMethodOfPaymentCardContent","hasPaymentInfo","textAccount","textCard","getCostCenterCardContent","formattedAddress","getDeliveryModeCardContent","getPaymentInfoCardContent","getBillingAddressCardContent","givenDate","toDateString","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","UserNotificationPreferenceService","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","UserInterestsService","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","contentPageLabelOrId","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","closest","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ProductReferenceService","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","siteContext","routerState","criteria","getCriteriaFromRoute","model$","routeParams","getQueryFromRouteParams","brandCode","getPageItems","pageNumber","routeCriteria","navigate","queryParamsHandling","relativeTo","setQuery","viewPage","ProductSearchService","CurrencyService","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","increaseVisibleValues","decreaseVisibleValues","topValueCount","topFacets","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","_isDialog","expandFacetGroup","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","q","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchConfig","searchQuery","queryText","geolocation","useMyLocation","radius","parseParameters","googleMaps","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderConfig","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","auth","routeState","prefilledEmail","loginForm","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","titleSelected","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","LoginRegisterComponent","loginAsGuest","LoginRegisterModule","CheckoutModule","ReturningCustomerRegisterComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","HomePageEvent","PageEvent","CartPageEvent","CartPageEventBuilder","eventService","buildCartPageEvent","pageEvent","semanticRoute","createFrom","ActionsSubject","EventService","CartPageEventModule","_cartPageEventBuilder","PageEventBuilder","buildPageEvent","buildHomePageEvent","getNavigatedEvent","ofType","ROUTER_NAVIGATED","payload","PageEventModule","_pageEventBuilder","ProductDetailsPageEvent","CategoryPageResultsEvent","SearchPageResultsEvent","ProductPageEventBuilder","buildSearchPageResultsEvent","buildProductDetailsPageEvent","buildCategoryResultsPageEvent","categories","skip","EMPTY","numberOfResults","categoryName","categoryPage","searchPage","ProductPageEventModule","_productPageEventBuilder","b2bLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","defaultB2bOccConfig","endpoints","addEntries","defaultB2bCheckoutConfig","b2cLayoutConfig","ProductGridPageTemplate","SearchResultsGridPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","EventsModule","StorefrontFoundationModule","StateModule","AuthModule","AnonymousConsentsModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory","B2bStorefrontModule","B2bStorefrontModule_1","OrganizationModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport interface LaunchConfig {\n  [key: string]: LaunchOptions;\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Dialog type is used to apply CSS classes\n   */\n  dialogType?: DIALOG_TYPE;\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n  ANONYMOUS_CONSENT = 'ANONYMOUS_CONSENT',\n}\n","import { Injectable } from '@angular/core';\nimport { Config, DeferLoadingStrategy } from '@spartacus/core';\nimport { LaunchConfig } from '../launch-dialog/index';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by indication, but keep in mind that\n   * a more precise indication will gain a more positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breakpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LayoutConfig {\n  /**\n   * The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints.\n   */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overridden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n\n  launch?: LaunchConfig;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n\n/**\n * Token for injecting outlet related context to the component rendered in the outlet\n */\nexport abstract class OutletContextData<T = any> {\n  /**\n   * Provides reference of the outlet where component is rendered in\n   */\n  reference: string;\n  /**\n   * Provides position of the outlet\n   */\n  position: OutletPosition;\n  /**\n   * Provides outlet context\n   */\n  context: T;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Renderer2,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Applicable, Priority } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  DIALOG_TYPE,\n  LaunchDialog,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config';\n\nexport abstract class LaunchRenderStrategy implements Applicable {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER | string;\n    element?: any;\n    component?: ComponentRef<any>;\n  }> = [];\n\n  /**\n   * Classes to apply to the component when the dialog is a DIALOG\n   */\n  protected dialogClasses = ['d-block', 'fade', 'modal', 'show'];\n  /**\n   * Classes to apply to the component when the dialog is a POPOVER\n   */\n  protected popoverClasses = ['cx-dialog-popover'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_END\n   */\n  protected sidebarEndClasses = ['cx-sidebar-end'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_START\n   */\n  protected sidebarStartClasses = ['cx-sidebar-start'];\n\n  protected renderer: Renderer2;\n\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>>;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(\n    caller: LAUNCH_CALLER | string,\n    config: LaunchDialog\n  ): boolean {\n    return (\n      Boolean(config.component) &&\n      (this.renderedCallers.some((el) => el.caller === caller)\n        ? !!config.multi\n        : true)\n    );\n  }\n\n  protected applyClasses(\n    component: ComponentRef<any>,\n    dialogType: DIALOG_TYPE\n  ): void {\n    let classes = [];\n\n    // TODO: make classes configurable\n    switch (dialogType) {\n      case DIALOG_TYPE.DIALOG:\n        classes = this.dialogClasses;\n        this.renderer.addClass(this.document.body, 'modal-open');\n        break;\n      case DIALOG_TYPE.POPOVER:\n        classes = this.popoverClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_END:\n        classes = this.sidebarEndClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_START:\n        classes = this.sidebarStartClasses;\n        break;\n    }\n\n    for (const newClass of classes) {\n      this.renderer.addClass(component.location.nativeElement, newClass);\n    }\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER | string, config: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller !== caller\n    );\n\n    if ((config as LaunchDialog)?.dialogType === DIALOG_TYPE.DIALOG) {\n      this.renderer.removeClass(this.document.body, 'modal-open');\n    }\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER | string,\n    vcr: ViewContainerRef\n  ): Observable<ComponentRef<any>> {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n\n      const component = vcr.createComponent(template);\n\n      if (config?.dialogType) {\n        this.applyClasses(component, config?.dialogType);\n      }\n\n      this.renderedCallers.push({ caller, element: vcr.element, component });\n\n      return of(component);\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { resolveApplicable } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { LayoutConfig } from '../../config/layout-config';\nimport { LaunchOptions, LAUNCH_CALLER } from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  private _dialogClose = new BehaviorSubject<string>(undefined);\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected layoutConfig: LayoutConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>> {\n    const config = this.findConfiguration(caller);\n    if (config) {\n      const renderer = this.getStrategy(config);\n\n      // Render if the strategy exists\n      if (renderer) {\n        this._dialogClose.next(undefined);\n        return renderer.render(config, caller, vcr);\n      }\n    } else if (isDevMode()) {\n      console.warn('No configuration provided for caller ' + caller);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER | string): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  get dialogClose(): Observable<string> {\n    return this._dialogClose.asObservable();\n  }\n\n  closeDialog(reason: string) {\n    this._dialogClose.next(reason);\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER | string): LaunchOptions {\n    if (this.layoutConfig?.launch) {\n      return this.layoutConfig.launch[caller];\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveApplicable(this.renderStrategies, [config]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { DirectionMode } from '../../../layout/direction/config/direction.model';\n\nexport enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n  PENCIL = 'PENCIL',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n\n  /**\n   * Lists icons that should be flipped for a specific direction.\n   */\n  flipDirection?: {\n    [ICON_TYPE: string]: DirectionMode;\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automatically loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { ComponentFactory, Injectable, TemplateRef } from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any> | ComponentFactory<any>> {\n  /**\n   * @deprecated since 2.1, see #8116\n   */\n  constructor();\n  // tslint:disable-next-line: unified-signatures\n  constructor(features: FeatureConfigService);\n  constructor(protected features?: FeatureConfigService) {}\n\n  private templatesRefs = {\n    [OutletPosition.BEFORE]: new Map<string, T[]>(),\n    [OutletPosition.REPLACE]: new Map<string, T[]>(),\n    [OutletPosition.AFTER]: new Map<string, T[]>(),\n  };\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    const store = this.templatesRefs[position];\n    if (store) {\n      const existing = store.get(outlet) || [];\n      const newValue: T[] = existing.concat([templateOrFactory]);\n      store.set(outlet, newValue);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    const store =\n      this.templatesRefs[position] ||\n      this.templatesRefs[OutletPosition.REPLACE];\n\n    const templateRef: T[] = store.get(outlet);\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    const store =\n      this.templatesRefs[position] ||\n      this.templatesRefs[OutletPosition.REPLACE];\n\n    this.removeValueOrAll(store, outlet, value);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n\n      if (this.features?.isLevel('2.1')) {\n        existing = existing.filter((val) => val !== value);\n      } else {\n        // deprecated since 2.1, see #8116:\n        existing = existing.filter((val) => val === value);\n      }\n\n      store.set(outlet, existing);\n    }\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit, OnDestroy {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  /**\n   * @deprecated since 2.1, see #8201\n   */\n  constructor(tpl: TemplateRef<any>, outletService: OutletService);\n  constructor(\n    tpl: TemplateRef<any>,\n    outletService: OutletService,\n    // tslint:disable-next-line: unified-signatures\n    features: FeatureConfigService\n  );\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService,\n    private features?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n\n  ngOnDestroy() {\n    if (this.features?.isLevel('2.1')) {\n      this.outletService.remove(this.cxOutletRef, this.cxOutletPos, this.tpl);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new BehaviorSubject(new Map<string, OutletDirective>());\n\n  /**\n   * Dynamically render the templates in the specified array\n   *\n   * @param outlet\n   */\n  render(outlet: string): void {\n    if (this.outletRefs.value.size !== 0) {\n      this.outletRefs.value.get(outlet).render();\n    }\n  }\n\n  /**\n   * Register outlet to be available to render dynamically\n   *\n   * @param cxOutlet\n   * @param context\n   */\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.next(this.outletRefs.value.set(cxOutlet, context));\n  }\n  /**\n   * Returns map of outlets\n   *\n   */\n  getOutletRef(outlet: string): Observable<OutletDirective> {\n    return this.outletRefs.asObservable().pipe(\n      map((val) => val.get(outlet)),\n      filter((val) => Boolean(val))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, threshold: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  Injector,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport {\n  OutletContextData,\n  OutletPosition,\n  USE_STACKED_OUTLETS,\n} from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n  public renderedComponents = new Map<\n    OutletPosition,\n    Array<ComponentRef<any> | EmbeddedViewRef<any>>\n  >();\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.renderedComponents.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n      this.outletRendererService.register(this.cxOutlet, this);\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    const components = [];\n    templates.forEach((obj) => {\n      const component = this.create(obj, position);\n      components.push(component);\n    });\n\n    this.renderedComponents.set(position, components);\n  }\n\n  private create(\n    tmplOrFactory: any,\n    position: OutletPosition\n  ): ComponentRef<any> | EmbeddedViewRef<any> {\n    this.renderedTemplate.push(tmplOrFactory);\n\n    if (tmplOrFactory instanceof ComponentFactory) {\n      const component = this.vcr.createComponent(\n        tmplOrFactory,\n        undefined,\n        this.getComponentInjector(position)\n      );\n      return component;\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n      return view;\n    }\n  }\n\n  /**\n   * Returns injector with OutletContextData that can be injected to the component\n   * rendered in the outlet\n   */\n  private getComponentInjector(position: OutletPosition): Injector {\n    const contextData: OutletContextData = {\n      reference: this.cxOutlet,\n      position,\n      context: this.cxOutletContext,\n    };\n\n    return Injector.create({\n      providers: [\n        {\n          provide: OutletContextData,\n          useValue: contextData,\n        },\n      ],\n      parent: this.vcr.injector,\n    });\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent nodes of the given element.\n   *\n   * We avoid traversing the parent _elements_, as this is blocking\n   * ie11 implementations. One of the spare exclusions we make to not\n   * supporting ie11.\n   *\n   * @param element\n   */\n  private getHostElement(element: Node): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentNode);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  RendererFactory2,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER | string\n  ): Observable<ComponentRef<any>> {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n      this.renderedCallers.push({ caller });\n\n      return this.outletRendererService.getOutletRef(config.outlet).pipe(\n        map((outletDirective) => {\n          const components = outletDirective.renderedComponents.get(\n            config.position ? config.position : OutletPosition.BEFORE\n          ) as ComponentRef<any>[];\n\n          return components\n            .reverse()\n            .find(\n              (component) => component.componentType === template.componentType\n            );\n        }),\n        tap((component) => {\n          if (config?.dialogType) {\n            this.applyClasses(component, config?.dialogType);\n          }\n        })\n      );\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER | string, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n\n    super.remove(caller, config);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, RendererFactory2 } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected routingService: RoutingService\n  ) {\n    super(document, rendererFactory);\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER | string) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { LayoutConfig } from '../config/layout-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [{ provide: LayoutConfig, useExisting: Config }],\n    };\n  }\n}\n","import { ElementRef, Injectable, ViewContainerRef } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport {\n  LaunchDialogService,\n  LAUNCH_CALLER,\n} from '../../layout/launch-dialog/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentLaunchDialogService {\n  constructor(protected launchDialogService: LaunchDialogService) {}\n\n  openDialog(\n    openElement?: ElementRef,\n    vcr?: ViewContainerRef\n  ): Observable<any> | undefined {\n    const component = this.launchDialogService.launch(\n      LAUNCH_CALLER.ANONYMOUS_CONSENT,\n      vcr\n    );\n\n    if (component) {\n      return combineLatest([\n        component,\n        this.launchDialogService.dialogClose,\n      ]).pipe(\n        filter(([, close]) => close && close !== undefined),\n        tap(([comp]) => {\n          openElement?.nativeElement.focus();\n          this.launchDialogService.clear(LAUNCH_CALLER.ANONYMOUS_CONSENT);\n          comp.destroy();\n        }),\n        map(([comp]) => comp)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n *\n * This feature must be explicitly enabled with the `disableMouseFocus` config.\n *\n * The appearance of the visual focus depends on the CSS implementation to\n * begin with. Spartacus styles add a blue border around each focusable element.\n * This can be considered annoying by keyboard users, as they won't need such a\n * strong indication of the selected element.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = {\n    disableMouseFocus: true,\n  };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** Controls a css class to hide focus visible CSS rules */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown', ['$event']) handleKeydown(event: KeyboardEvent) {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = !this.isNavigating(event);\n    }\n  }\n\n  /**\n   * Indicates whether the configurations setup to disable visual focus.\n   */\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n\n  /**\n   * Indicates whether the event is used to navigate the storefront. Some keyboard events\n   * are used by mouse users to fill a form or interact with the OS or browser.\n   */\n  protected isNavigating(event: KeyboardEvent): boolean {\n    // when the cmd or ctrl keys are used, the user doesn't navigate the storefront\n    if (event.metaKey) {\n      return false;\n    }\n    // when the tab key is used, users are for navigating away from the current (form) element\n    if (event.code === 'Tab') {\n      return true;\n    }\n    // If the user fill in a form, we don't considering it part of storefront navigation.\n    if (['INPUT', 'TEXTAREA'].includes((event.target as HTMLElement).tagName)) {\n      return false;\n    }\n    return true;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singleton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the `mouse-focus` class is added to the host element,\n   * indicating that the element focus should not be made visible.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistence key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistence\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      // we wait a few milliseconds, mainly because firefox will otherwise apply\n      // the mouse event on the new focused child element\n      setTimeout(() => {\n        super.handleFocus(event as KeyboardEvent);\n      }, 100);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elements,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { Component, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      null,\n      this.vcr\n    );\n    if (dialog) {\n      this.subscriptions.add(dialog.subscribe());\n    }\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/**\n * The ltr and rtl directions can be used to configure the storefront for a certain direction, both statically\n * or dynamically.\n *\n * The HTML5 \"auto\" value is not supported in Spartacus, as it's considered to be too fragile for the global\n * direction.\n */\nexport enum DirectionMode {\n  /**\n   * Indicates Left to Right direction.\n   */\n  LTR = 'ltr',\n  /**\n   * Indicates Right to Left direction.\n   */\n  RTL = 'rtl',\n}\n\n/**\n * Contains the configuration mode for language driven directionality. The detect mode is recommended\n * for a multi-site or multi-lingual setup where the active language should dictate the direction mode.\n */\nexport interface Direction {\n  /**\n   * The default direction mode is used for the direction mode of the overall storefront. The default mode\n   * can be used for all languages, but can be further enhanced dynamically by using the language detect mode.\n   * The default mode will also be used in detect mode for those languages that are not listed in either\n   * `rtlLanguages` or `ltrLanguages`.\n   */\n  default?: DirectionMode;\n\n  /**\n   * If detect is enabled, the direction is driven by the active language. The language is compared to the\n   * list of configured `rtlLanguages` vs `ltrLanguages`. If no language is resolved, the default direction\n   * mode is used.\n   *\n   * If no direction can be resolved, the direction is removed.\n   */\n  detect?: boolean;\n\n  /**\n   * The language isoCodes that are used to detect Right to Left languages.\n   */\n  rtlLanguages?: string[];\n\n  /**\n   * The language isoCodes that are used to detect Left to Right languages.\n   */\n  ltrLanguages?: string[];\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n      PENCIL: 'fas fa-pencil-alt',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport { DirectionMode } from '../../../layout/direction/config/direction.model';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   * Return the direction for which the icon should mirror (ltr vs rtl). The icon direction\n   * is configurable, but optional, as only a few icons should be flipped for rtl direction.\n   */\n  getFlipDirection(type: ICON_TYPE | string): DirectionMode {\n    return this.config?.flipDirection?.[type];\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { DirectionMode } from '../../../layout/direction/config/direction.model';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * The `flip-at-rtl` class is added to the DOM for the style layer to flip the icon in RTL direction.\n   */\n  @HostBinding('class.flip-at-rtl') flipAtRtl: boolean;\n\n  /**\n   * The `flip-at-ltr` class is added to the DOM for the style layer to flip the icon in LTR direction.\n   */\n  @HostBinding('class.flip-at-ltr') flipAtLtr: boolean;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n    this.flipIcon(type);\n  }\n\n  /**\n   * The icons supports flipping for some icons to support rtl and ltr directions.\n   */\n  protected flipIcon(type: ICON_TYPE) {\n    // TODO: this can be dropped with the next major release.\n    if (!this.iconLoader.getFlipDirection) {\n      return;\n    }\n    const iconDirection = this.iconLoader.getFlipDirection(type);\n    this.flipAtLtr = iconDirection === DirectionMode.LTR;\n    this.flipAtRtl = iconDirection === DirectionMode.RTL;\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { DirectionMode } from '../../../layout/direction/config/direction.model';\nimport { IconConfig } from './icon.model';\n\nexport const defaultIconConfig: IconConfig = {\n  icon: {\n    flipDirection: {\n      CARET_RIGHT: DirectionMode.RTL,\n      CARET_LEFT: DirectionMode.RTL,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultIconConfig } from './default-icon.config';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultIconConfig),\n    // TODO: move the opinionated fontawesome config to a recipe\n    provideDefaultConfig(fontawesomeIconConfig),\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { FocusConfig } from '../../../layout/a11y/keyboard-focus/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  @HostBinding('attr.role') role = 'dialog';\n  @HostBinding('attr.aria-modal') modal = true;\n\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: 'input[type=\"checkbox\"]',\n    focusOnEscape: true,\n  };\n\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    // Close on click outside the dialog window\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\n      this.close('Cross click');\n    }\n  }\n\n  constructor(\n    protected config: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected el: ElementRef,\n    protected launchDialogService: LaunchDialogService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  close(reason?: any): void {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { DIALOG_TYPE } from '../../layout/launch-dialog/index';\nimport { AnonymousConsentDialogComponent } from '../../shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component';\n\nexport const defaultAnonymousConsentLayoutConfig: LayoutConfig = {\n  launch: {\n    ANONYMOUS_CONSENT: {\n      inline: true,\n      component: AnonymousConsentDialogComponent,\n      dialogType: DIALOG_TYPE.DIALOG,\n    },\n  },\n};\n","import {\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  @ViewChild('open') openElement: ElementRef;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService\n  ) {}\n\n  openDialog(): void {\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      this.openElement,\n      this.vcr\n    );\n    if (dialog) {\n      dialog.pipe(take(1)).subscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../layout/a11y/keyboard-focus/index';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { defaultAnonymousConsentLayoutConfig } from './default-anonymous-consent-layout.config';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideConfig(defaultAnonymousConsentLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/index';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsDialogModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  paragraphs?: Array<{ title?: string; text?: Array<string> }>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media?.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Params, Router } from '@angular/router';\n\n// private\ninterface RouteParts {\n  /** Path in the Angular-like array format */\n  path?: string[];\n\n  /** Query params */\n  queryParams?: Params;\n\n  /** Hash fragment */\n  fragment?: string;\n}\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent implements OnChanges {\n  constructor(protected router: Router) {}\n\n  /**\n   * Pattern matching string starting with `http://` or `https://`.\n   */\n  private readonly PROTOCOL_REGEX: RegExp = /^https?:\\/\\//i;\n\n  /**\n   * Used to split url into 2 parts:\n   * 1. the path\n   * 2. query params + hash fragment\n   */\n  private readonly URL_SPLIT = /(^[^#?]*)(.*)/;\n\n  /**\n   * Parsed parts of the @Input `url`, when it's a local URL.\n   * It should not be used when the `url` is external.\n   * @see `url`\n   */\n  private routeParts: RouteParts = {};\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  /**\n   * Returns true when the @Input `url` is a string starting with `http://` or `https://`.\n   */\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.PROTOCOL_REGEX.test(this.url);\n  }\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['url']) {\n      this.setUrlParts(changes['url'].currentValue);\n    }\n  }\n\n  /**\n   * The part with the path of the local url.\n   */\n  get routerUrl(): any[] {\n    return this.routeParts.path;\n  }\n\n  /**\n   * The part with the query params of the local url.\n   */\n  get queryParams(): Params {\n    return this.routeParts.queryParams;\n  }\n\n  /**\n   * The part with the hash fragment of the local url.\n   */\n  get fragment(): string {\n    return this.routeParts.fragment;\n  }\n\n  /**\n   * Parses the given url and sets the property `urlParts` accordingly.\n   */\n  private setUrlParts(url: string | any[]) {\n    if (typeof url === 'string') {\n      url = this.getAbsoluteUrl(url); // string links in CMS sometimes don't have the leading slash, so fix it here\n      this.routeParts = this.splitUrl(url as string);\n    } else {\n      this.routeParts = { path: url };\n    }\n  }\n\n  /**\n   * Parses the given string into 3 parts:\n   * - string path (wrapped in an array to be compatible with Angular syntax for the `routerLink`)\n   * - query params (as an object)\n   * - hash fragment (string)\n   */\n  private splitUrl(url: string = ''): RouteParts {\n    const { queryParams, fragment } = this.router.parseUrl(url);\n    const [, path] = url.match(this.URL_SPLIT);\n\n    // wrap path in an array, to have the Angular-like path format\n    return { path: [path], queryParams, fragment };\n  }\n\n  /**\n   * Prepends a leading slash to the given URL string, in case it doesn't have it.\n   */\n  private getAbsoluteUrl(url: string): string {\n    return url.startsWith('/') ? url : '/' + url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functionality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent implements OnInit, OnDestroy {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive integer or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Indicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  /**\n   * Subscription responsible for auto-correcting control's value when it's invalid.\n   */\n  private sub: Subscription;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  ngOnInit() {\n    this.sub = this.control.valueChanges\n      .pipe(startWith(this.control.value))\n      .subscribe((value) =>\n        this.control.setValue(this.getValidCount(value), { emitEvent: false })\n      );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { MediaFormatSize } from './media.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalOptions } from './modal-options';\nimport { ModalRef } from './modal-ref';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n    this.handleModalRemoveEvents(activeModal);\n\n    return activeModal;\n  }\n\n  protected handleModalRemoveEvents(modal: ModalRef): void {\n    modal.result.finally(() => {\n      this.modals = this.modals.filter((m) => m !== modal);\n    });\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { Observable, timer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Guard that can be used in split-view based child routes. This guard\n * delays the guard to be removed with 500ms, so that any css transition can be\n * finished before the DOM is destroyed.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SplitViewDeactivateGuard implements CanDeactivate<boolean> {\n  canDeactivate(): Observable<boolean> {\n    return timer(500).pipe(map(() => true));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { SplitViewState } from './split/split-view.model';\n\n/**\n * Supposed to be injected in the split view component, so that the split view state\n * is maintained for a single split view.\n */\n@Injectable()\nexport class SplitViewService {\n  /**\n   * Newly added views are hidden by default, unless it is the first view of the split view.\n   * The default hide mode can be overridden.\n   */\n  defaultHideMode = true;\n\n  protected _splitViewCount = 2;\n\n  protected _views$: BehaviorSubject<any[]> = new BehaviorSubject([]);\n\n  /**\n   * Adds a view to the list of views. The view is initialized with the `SplitViewState`\n   * state. If no state is provided, the state is created with the hidden property. The hidden\n   * property is provided by the `defaultHideMode`, unless it's the first view (position: 0).\n   */\n  add(position: number, initialState?: SplitViewState) {\n    if (!this.views[position]) {\n      this.views[position] = {\n        ...{ hidden: position === 0 ? false : this.defaultHideMode },\n        ...initialState,\n      };\n      this._views$.next(this.views);\n    }\n  }\n\n  /**\n   * Returns an observable with the active view number. The active view number\n   * represents the last visible view.\n   */\n  getActiveView(): Observable<number> {\n    return this._views$.pipe(\n      map((views) => this.getActive(views)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns an observable with the SplitViewState for the given view position.\n   */\n  getViewState(position: number): Observable<SplitViewState> {\n    return this._views$.pipe(\n      map((views) => views[position]),\n      // we must filter here, since outlet driven views will destroyed the view\n      filter((view) => Boolean(view))\n    );\n  }\n\n  /**\n   * Removes a view from the list of views.\n   *\n   * Removing a view is different from hiding a view. Removing a view is typically done\n   * when a component is destroyed.\n   *\n   * When the view is removed, the SplitViewState is updated to reflect that new organization\n   * of views.\n   */\n  remove(position: number) {\n    const activePosition = this.getActive(this.views);\n    this._views$.next(this.views.splice(0, position));\n    if (activePosition >= position) {\n      this.updateState(position - 1);\n    }\n  }\n\n  /**\n   * Returns the next view position. This is useful for views that do not want to be bothered\n   * with controlling view numbers.\n   */\n  get nextPosition(): number {\n    return this.views.length || 0;\n  }\n\n  /**\n   * Toggles the visibility of the views based on the given view position. If the view\n   * is already visible, we close the view and active the former view. Unless the hide flag\n   * is used, to force the view.\n   *\n   * The view state of other views in the split view are updated as well.\n   *\n   * @param position The zero-based position number of the view.\n   * @param forceHide The (optional) hide state for the view position.\n   */\n  toggle(position: number, forceHide?: boolean) {\n    // add the view if it hasn't been added before.\n    if (!this.views[position]) {\n      this.add(position, { hidden: forceHide ?? false });\n    }\n\n    // If the position is already visible, we move to a previous position. Only if the hide\n    // state is forced, we keep the current position.\n    if (\n      this.views[position] &&\n      forceHide === undefined &&\n      !this.views[position].hidden\n    ) {\n      position--;\n    }\n\n    this.updateState(position, forceHide);\n  }\n\n  protected updateState(position: number, hide?: boolean) {\n    const views = [...this.views];\n    const split: number = this._splitViewCount - 1;\n    // toggle the hidden state per view, based on the next position and number of views per split view\n    views.forEach((view, pos) => {\n      if (pos === position) {\n        view.hidden = hide ?? !(pos >= position - split && pos <= position);\n      } else {\n        view.hidden = !(pos >= position - split && pos <= position);\n      }\n    });\n    this._views$.next(views);\n  }\n\n  /**\n   * Returns the active view count for the list of views.\n   */\n  protected getActive(views: SplitViewState[]): number {\n    // we reverse the list to find the last visible view\n    const l = [...views]\n      .reverse()\n      .findIndex((view: SplitViewState) => !view.hidden);\n    const last = l === -1 ? 0 : views.length - l - 1;\n    return last;\n  }\n\n  /**\n   * Sets the view count for the split view.\n   *\n   * Defaults to 2.\n   */\n  set splitViewCount(count: number) {\n    this._splitViewCount = count;\n  }\n\n  /**\n   * Utility method that resolves all views from the subject.\n   */\n  protected get views(): SplitViewState[] {\n    return this._views$.value;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  OnDestroy,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SplitViewService } from '../split-view.service';\n\n/**\n * The split-view component supports an unlimited number of nested views. The component\n * is a host to those view components and doesn't add any restrictions to it's content;\n * content is projected as-is.\n *\n * ```html\n * <cx-split-view>\n *   <cx-view></cx-view>\n *   <cx-view></cx-view>\n *   <any-wrapper>\n *     <cx-view></cx-view>\n *   </any-wrapper>\n * </cx-split-view>\n * ```\n *\n * The split view component is only concerned with tracking the underlying _visible_\n * view components, so that the `lastVisibleView` can be updated accordingly. The actual\n * visibility of views is controlled by CSS. To allow for maximum flexibility, the CSS\n * implementation is using CSS variables. The `lastVisibleView` is bind to the\n * `--cx-active-view` on the host, so that all descendants views will inherit the\n * property conveniently.\n */\n@Component({\n  selector: 'cx-split-view',\n  templateUrl: './split-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [SplitViewService],\n})\nexport class SplitViewComponent implements OnDestroy {\n  /**\n   * Sets the default hide mode for views. This mode is useful in case views are dynamically being created,\n   * for example when they are created by router components.\n   */\n  @Input()\n  set hideMode(mode: boolean) {\n    this.splitService.defaultHideMode = mode;\n  }\n\n  /**\n   * Indicates the last visible view in the range of views that is visible. This\n   * is bind to a css variable `--cx-active-view` so that the experience\n   * can be fully controlled by css.\n   */\n  @HostBinding('style.--cx-active-view')\n  lastVisibleView = 1;\n\n  protected subscription: Subscription = this.splitService\n    .getActiveView()\n    .subscribe(\n      (lastVisible: number) => (this.lastVisibleView = lastVisible + 1)\n    );\n\n  constructor(protected splitService: SplitViewService) {}\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SplitViewService } from '../split-view.service';\n\n/**\n * The view component is part of the `SplitViewComponent`. The view\n * contains the navigable content that should be split up. It maintains\n * a view position and allows to show or hide the view.\n *\n * The ViewComponent interacts with the `SplitViewService` for handing over the\n * view state, so that the overarching `SplitViewComponent` can manage the\n * overall experience.\n */\n@Component({\n  selector: 'cx-view',\n  templateUrl: './view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewComponent implements OnInit, OnDestroy {\n  protected _hidden;\n\n  @Input()\n  @HostBinding('attr.position')\n  position: string;\n\n  /**\n   * The disappeared flag is added to the\n   */\n  @HostBinding('attr.disappeared') disappeared = true;\n\n  /**\n   * The hidden input is used to set the initial visible state of the view.\n   * The hidden state defaults to false.\n   *\n   * The hidden input supports 2-way binding, see `hiddenChange` property.\n   */\n  @Input()\n  set hidden(hidden: boolean) {\n    this._hidden = hidden;\n    this.splitService.toggle(this.viewPosition, hidden);\n  }\n\n  /**\n   * An update of the view visibility is emitted to the hiddenChange output.\n   */\n  @Output()\n  hiddenChange = new EventEmitter();\n\n  protected subscription: Subscription;\n\n  constructor(\n    protected splitService: SplitViewService,\n    protected elementRef: ElementRef\n  ) {}\n\n  ngOnInit() {\n    this.splitService.splitViewCount = this.splitViewCount;\n\n    const hidden = this._hidden ? { hidden: this._hidden } : {};\n    this.splitService.add(this.viewPosition, hidden);\n\n    this.subscription = this.splitService\n      .getViewState(Number(this.position))\n      .subscribe((view) => {\n        this.hiddenChange.emit(view.hidden);\n        this._hidden = view.hidden;\n        if (view.hidden) {\n          setTimeout(() => {\n            this.disappeared = true;\n          }, this.duration * 1.25);\n        } else {\n          this.disappeared = false;\n        }\n      });\n  }\n\n  /**\n   * Toggles the visibility of the view.\n   *\n   * An optional force flag can be used to explicitly show or hide view component.\n   */\n  toggle(force?: boolean) {\n    this.splitService.toggle(this.viewPosition, force);\n  }\n\n  /**\n   * Returns the position for the view.\n   *\n   * The position is either taken from the input `position` or generated by the `SplitService`.\n   */\n  protected get viewPosition(): number {\n    if (!(Number(this.position) >= 0)) {\n      this.position = this.splitService.nextPosition.toString();\n    }\n    return Number(this.position);\n  }\n\n  /**\n   * Returns the duration in milliseconds. The duration is based on the CSS custom property\n   * `--cx-transition-duration`. Defaults to 300 milliseconds.\n   */\n  protected get duration(): number {\n    const duration: string = getComputedStyle(this.elementRef.nativeElement)\n      .getPropertyValue('--cx-transition-duration')\n      .trim();\n\n    if (duration.indexOf('ms') > -1) {\n      return Number(duration.split('ms')[0]);\n    } else if (duration.indexOf('s') > -1) {\n      return Number(duration.split('s')[0]) * 1000;\n    } else {\n      return 300;\n    }\n  }\n\n  /**\n   * Returns the maximum number of views per split-view. The number is based on the CSS custom property\n   * `--cx-max-views`. Defaults to `2`\n   */\n  protected get splitViewCount(): number {\n    return Number(\n      getComputedStyle(this.elementRef.nativeElement)\n        .getPropertyValue('--cx-max-views')\n        .trim() || 2\n    );\n  }\n\n  /**\n   * The view is removed from the `SplitService` so that the view no longer\n   * plays a role in the overall split view.\n   */\n  ngOnDestroy() {\n    this.splitService.remove(this.viewPosition);\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SplitViewComponent } from './split/split-view.component';\nimport { ViewComponent } from './view/view.component';\n\n/**\n * The split-view component supports an unlimited number of nested views. Nested views are rendered\n * next to each other. The views can be rendered next to each other, but the max number of visible\n * views can be limisted as well. This is configurable in the CSS layer, so that the max number of views\n * per split-view can be different for each component.\n *\n * The basic structure of the split-view component is shown below:\n *\n *\n * ```\n * <cx-split-view>\n * </cx-split-view>\n * ```\n *\n * The UX pattern used for the split-view is driven by an initial view, which gets splitted into\n * more views as soon as the user starts interacting with the initial and subsequantial views.\n * The views can be driven by routes, which means that you can navigate through the splitted views\n * by using the browser history as well as share or bookmark splitted views.\n *\n * The UI is implemented in the style layer, with only a few generic style rules. Most of the split\n * view style is driven by CSS properties, so that alternative split-view styles can be introduced\n * per page or component.\n *\n * The max number of views per split-view on mobile is limited to 1 by default, where as on tablet\n * (and higher) it is set to 2. Spartacus has a pretty narrow layout, which is why 2 is maximum,\n * but customers could alter the layout to bring in more views in the same split-view at the time.\n *\n */\n\n@NgModule({\n  declarations: [SplitViewComponent, ViewComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [SplitViewComponent, ViewComponent],\n})\nexport class SplitViewModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Configuration options for the Qualtrics integration, which allows you to\n * specify the qualtrics project and deployment script.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QualtricsConfig {\n  /**\n   * Holds the qualtrics integration options.\n   */\n  qualtrics?: {\n    /**\n     * Deployment script, loaded from a resource, to integrate the deployment of the qualtrics project.\n     * You would typically store the file in the local assets folder.\n     *\n     * Defaults to `assets/qualtricsIntegration.js`\n     */\n    scriptSource?: string;\n  };\n}\n","import {\n  Injectable,\n  isDevMode,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\n\nexport const QUALTRICS_EVENT_NAME = 'qsi_js_loaded';\n\n/**\n * Service to integration Qualtrics.\n *\n * The integration observes the Qualtrics API, and when available, it runs the QSI API\n * to let Qualtrics evaluate the application.\n *\n * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application\n * data before pulling the QSI API. This is beneficial in a single page application when additional\n * data is required before the Qualtrics _creatives_ run.\n *\n * This service also supports the creation of the Qualtrics deployment script. This is optional, as\n * the script can be added in alternatives ways.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  /**\n   * Reference to the QSI API.\n   */\n  protected qsiApi: any;\n\n  /**\n   * QSI load event that happens when the QSI JS file is loaded.\n   */\n  private qsiLoaded$: Observable<any> = this.winRef?.nativeWindow\n    ? fromEvent(this.winRef.nativeWindow, QUALTRICS_EVENT_NAME)\n    : of();\n\n  /**\n   * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.\n   *\n   * The API is emitted when the JavaScript resource holding this API is fully loaded.\n   * The API is also stored locally in the service, in case it's required later on.\n   */\n  protected qsi$: Observable<any> = this.qsiLoaded$.pipe(\n    switchMap(() => this.isDataLoaded()),\n    map(() => this.winRef?.nativeWindow['QSI']),\n    filter((api) => Boolean(api)),\n    tap((qsi) => (this.qsiApi = qsi))\n  );\n\n  constructor(\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.initialize();\n  }\n\n  /**\n   * Starts observing the Qualtrics integration. The integration is based on a\n   * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,\n   * we run the API.\n   */\n  protected initialize() {\n    this.qsi$.subscribe(() => this.run());\n  }\n\n  /**\n   * Evaluates the Qualtrics project code for the application.\n   *\n   * In order to reload the evaluation in Qualtrics, the API requires to unload the API before\n   * running it again. We don't do this by default, but offer a flag to conditionally unload the API.\n   */\n  protected run(reload = false): void {\n    if (!this.qsiApi?.API) {\n      if (isDevMode()) {\n        console.log('The QSI api is not available');\n      }\n      return;\n    }\n\n    if (reload) {\n      // Removes any currently displaying creatives\n      this.qsiApi.API.unload();\n    }\n\n    // Starts the intercept code evaluation right after loading the Site Intercept\n    // code for any defined intercepts or creatives\n    this.qsiApi.API.load().done(this.qsiApi.API.run());\n  }\n\n  /**\n   * Adds the deployment script to the DOM.\n   *\n   * The script will not be added twice if it was loaded before. In that case, we use\n   * the Qualtrics API directly to _unload_ and _run_ the project.\n   */\n  addScript(scriptSource: string): void {\n    if (this.hasScript(scriptSource)) {\n      this.run(true);\n    } else {\n      const script: HTMLScriptElement = this.renderer.createElement('script');\n      script.type = 'text/javascript';\n      script.defer = true;\n      script.src = scriptSource;\n      this.renderer.appendChild(this.winRef.document.body, script);\n    }\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.\n   * You can observe any data in this method.\n   *\n   * Defaults to true.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n\n  /**\n   * Indicates if the script is already added to the DOM.\n   */\n  protected hasScript(source?: string): boolean {\n    return !!this.winRef.document.querySelector(`script[src=\"${source}\"]`);\n  }\n\n  protected get renderer(): Renderer2 {\n    return this.rendererFactory.createRenderer(null, null);\n  }\n}\n","import { Component, isDevMode } from '@angular/core';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n/**\n * Adds the Qualtrics deployment script whenever the component is loaded. The\n * deployment script is loaded from the global configuration (`qualtrics.scriptSource`).\n */\n@Component({\n  selector: 'cx-qualtrics',\n  template: ``,\n})\nexport class QualtricsComponent {\n  constructor(\n    protected qualtricsLoader: QualtricsLoaderService,\n    protected config: QualtricsConfig\n  ) {\n    if (this.config.qualtrics?.scriptSource) {\n      this.qualtricsLoader.addScript(this.config.qualtrics.scriptSource);\n    } else if (isDevMode()) {\n      console.warn(\n        `We're unable to add the Qualtrics deployment code as there is no script source defined in config.qualtrics.scriptSource.`\n      );\n    }\n  }\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => (ctx ? this.getInjectedService(ctx) : undefined)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data?.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { BREAKPOINT } from '../../../../layout/config/layout-config';\nimport { TableStructureConfiguration } from '../table.model';\n\n/**\n * Helper configuration to introduce a breakpoint specific table configuration.\n */\nexport interface TableConfiguration extends TableStructureConfiguration {\n  breakpoint?: BREAKPOINT;\n}\n\n/**\n * The `TableConfig` provides table configurations. The configuration allows for a\n * an optional breakpoint specific structure, so a dedicated table structure per\n * screen size can be generated (see `TableService`).\n *\n * The string based key is used to define a configuration for a specific type. The type\n * binds to a specific component, such as the cost-center table. The various table types\n * should be exposed by feature modules, to ease the configuration.\n *\n * The `TableConfiguration` is added in an array, so that any opinionated default configurations\n * can be replaced by customer configurations.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class TableConfig {\n  table: {\n    [key: string]: TableConfiguration[];\n  };\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  isDevMode,\n} from '@angular/core';\nimport { Table } from './table.model';\n\n/**\n * The table component provides a generic DOM structure based on the `dataset` input.\n * The `Table` dataset contains a type, table structure and table data.\n *\n * The table component only supports horizontal table structure.\n *\n * The implementation is fairly \"dumb\" and only provides the following features:\n * - Use outlet for table headers (`<th>`) and cells (`<td>`).\n * - Localizing table headers, using the `I18nModule`.\n * - Add CSS classes on each cell to\n *\n * Al features are optional.\n *\n * By default, the headers and columns are rendered with an outlet template. The template\n * reference is generated by concatenating the table `type` and table header `key`.\n * The following snippet shows an outlet generated for a table header, for the table type\n * \"cost-center\" with a label \"name\":\n *\n * ```\n * <th>\n *   <template cxOutlet=\"tbl.cost-center.header.name\">\n *     [localized label is generated here]\n *   </template>\n * </th>\n * ```\n *\n * Similarly, the `<td>` is generated with the outlet template reference `tbl.cost-center.data.name`.\n *\n * This allows smart components to further customize the table rendering. More over, customers can\n * customize the header and data by using the generated outlets.\n */\n@Component({\n  selector: 'cx-table',\n  templateUrl: './table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableComponent {\n  @HostBinding('attr.__cx-table-type') tableType: string;\n\n  protected _dataset: Table;\n  @Input()\n  set dataset(dataset: Table) {\n    this._dataset = dataset;\n    this.addTableDebugInfo();\n  }\n\n  get dataset(): Table {\n    return this._dataset;\n  }\n\n  /**\n   * Returns the configured data value by the label key.\n   * If there's no headerKey available, or no corresponding value, the\n   * first value in the data row is returned.\n   */\n  getDataValue(dataRow: any, headerKey: string, index: number): string {\n    return dataRow[headerKey] || Object.values(dataRow)[index];\n  }\n\n  /**\n   * Generates the table type into the UI in devMode, so that developers\n   * can easily get the notion of the table type.\n   */\n  protected addTableDebugInfo() {\n    if (isDevMode) {\n      this.tableType = this.dataset?.structure?.type;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { TableComponent } from './table.component';\n\n/**\n * The TableModule provides a table component that is driven by (responsible) configuration.\n */\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  declarations: [TableComponent],\n  exports: [TableComponent],\n})\nexport class TableModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { TableConfig } from './config/table.config';\nimport { TableStructure, TableStructureConfiguration } from './table.model';\n\n/**\n * Responsive table service.\n *\n * The `TableService` is used to generate a `TableStructure` based on configuration. The table\n * structure configuration allows for breakpoint specific configuration, so that the table\n * experience can be differentiated various screen sizes.\n *\n * The table structure configuration is driven by a table type. The various supported\n * table types are exposed in feature libraries.\n *\n * If there is no table configuration for the given type found, a table header structure\n * is generated based on the actual data or randomly (in case no data is passed in) by\n * generating 5 headers. In case of a generated header, we warn the developer in devMode that\n * there is no configuration available.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TableService {\n  constructor(\n    protected breakpointService: BreakpointService,\n    protected config: TableConfig\n  ) {}\n\n  /**\n   * Builds the table structure. The table structure can be created by the help of\n   * the `tableType`. The `tableType` can be used in the configuration `TableConfig`,\n   * so that the table headers can be defined.\n   */\n  buildStructure(\n    tableType: string,\n    data$?: Observable<any>\n  ): Observable<TableStructure> {\n    if (this.hasTableConfig(tableType)) {\n      return this.buildStructureFromConfig(tableType);\n    } else {\n      if (data$) {\n        return this.buildStructureFromData(tableType, data$);\n      } else {\n        return this.buildRandomStructure(tableType);\n      }\n    }\n  }\n\n  /**\n   * Returns the table structure by configuration. The configuration can be\n   * breakpoint-driven, which means that an alternative header structure can\n   * be created per screen size.\n   *\n   * The breakpoint is resolved by teh `BreakpointService`.\n   */\n  protected buildStructureFromConfig(type: string): Observable<TableStructure> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => ({ ...this.getTableConfig(type, breakpoint), type }))\n    );\n  }\n\n  /**\n   * This method generates a table structure by the help of the first data row.\n   */\n  protected buildStructureFromData(\n    type: string,\n    data$: Observable<any>\n  ): Observable<TableStructure> {\n    this.warn(\n      `No table configuration found to render table with type \"${type}\". The table header for \"${type}\" is generated by the help of the first data item`\n    );\n    return data$.pipe(\n      map((data: any[]) => {\n        const headers = Object.keys(data?.[0]).map((key) => ({\n          key,\n          label: key,\n        }));\n        return {\n          type: type,\n          headers,\n        } as TableStructure;\n      })\n    );\n  }\n\n  /**\n   * As a last resort, the table structure is randomly created. We add 5 unknown headers\n   * and use the `hideHeader` to avoid the unknown headers to be rendered.\n   */\n  protected buildRandomStructure(type: string): Observable<TableStructure> {\n    this.warn(\n      `No data available for \"${type}\", a random structure is generated (with hidden table headers).`\n    );\n\n    return of({\n      type,\n      headers: [\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n      ],\n      hideHeader: true,\n    });\n  }\n\n  /**\n   * Finds the best applicable table configuration for the given type\n   * and breakpoint. If there is no configuration available for the breakpoint,\n   * the best match will be returned, using mobile first approach.\n   *\n   * If there is no match for any breakpoint, the fallback is a configuration\n   * without the notion of a breakpoint. Otherwise we fallback to the first\n   * available config.\n   */\n  protected getTableConfig(\n    type: string,\n    breakpoint: BREAKPOINT\n  ): TableStructureConfiguration {\n    const tableConfig = this.config.table[type];\n\n    // find all relevant breakpoints\n    const current = this.breakpointService.breakpoints.indexOf(breakpoint);\n    const relevant = this.breakpointService.breakpoints\n      .slice(0, current + 1)\n      .reverse();\n\n    const bestMatch: BREAKPOINT = relevant.find(\n      (br) => !!tableConfig.find((structure) => structure.breakpoint === br)\n    );\n\n    return bestMatch\n      ? tableConfig.find((config) => config.breakpoint === bestMatch)\n      : tableConfig.find((structure) => !structure.breakpoint) ||\n          tableConfig[0];\n  }\n\n  protected hasTableConfig(tableType: string): boolean {\n    return !!this.config.table?.[tableType];\n  }\n\n  /**\n   * Prints a convenient message in the console to increase developer experience.\n   */\n  private warn(message) {\n    if (isDevMode) {\n      console.warn(message);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import {\n  Compiler,\n  Injectable,\n  InjectFlags,\n  Injector,\n  NgModuleFactory,\n  NgModuleRef,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CMSComponentConfig,\n  CmsComponentMapping,\n  CmsConfig,\n  ConfigChunk,\n  ConfigInitializerService,\n  configurationFactory,\n  DefaultConfigChunk,\n  FeatureModuleConfig,\n} from '@spartacus/core';\nimport {\n  combineLatest,\n  defer,\n  forkJoin,\n  from,\n  merge,\n  Observable,\n  of,\n  queueScheduler,\n} from 'rxjs';\nimport {\n  map,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\ninterface FeatureInstance extends FeatureModuleConfig {\n  moduleRef?: NgModuleRef<any>;\n  depsModules?: any[];\n  componentsMappings?: CMSComponentConfig;\n}\n\n/**\n * Service responsible for resolving cms config based feature modules.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureModulesService implements OnDestroy {\n  // feature modules configuration\n  private featureModulesConfig?: {\n    [featureName: string]: FeatureModuleConfig;\n  };\n\n  // maps componentType to feature\n  private componentFeatureMap: Map<string, string> = new Map();\n\n  /*\n   * Contains either FeatureInstance or FeatureInstance resolver for not yet\n   * resolved feature modules\n   */\n  private features: Map<string, Observable<FeatureInstance>> = new Map();\n\n  private dependencyModules = new Map<any, NgModuleRef<any>>();\n\n  constructor(\n    protected configInitializer: ConfigInitializerService,\n    protected compiler: Compiler,\n    protected injector: Injector\n  ) {\n    this.initFeatureMap();\n  }\n\n  private async initFeatureMap(): Promise<void> {\n    const config: CmsConfig = await this.configInitializer.getStableConfig(\n      'featureModules'\n    );\n\n    this.featureModulesConfig = config.featureModules ?? {};\n\n    for (const [featureName, featureConfig] of Object.entries(\n      this.featureModulesConfig\n    )) {\n      if (featureConfig?.cmsComponents?.length) {\n        for (const component of featureConfig.cmsComponents) {\n          this.componentFeatureMap.set(component, featureName);\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if there is feature module configuration that covers specified\n   * component type\n   */\n  hasFeatureFor(componentType: string): boolean {\n    return this.componentFeatureMap.has(componentType);\n  }\n\n  /**\n   * Return full CmsComponent mapping defined in feature module\n   */\n  getCmsMapping(componentType: string): Observable<CmsComponentMapping> {\n    const feature = this.componentFeatureMap.get(componentType);\n\n    return this.resolveFeature(feature).pipe(\n      map(\n        (featureInstance) => featureInstance.componentsMappings[componentType]\n      )\n    );\n  }\n\n  /**\n   * Get all injectors for feature and its dependencies\n   *\n   * As it's a synchronous method, it works only for already resolved features,\n   * returning undefined otherwise\n   */\n  getInjectors(componentType: string): Injector[] | undefined {\n    const feature = this.componentFeatureMap.get(componentType);\n    let injectors;\n\n    // we are returning injectors only for already resolved features\n    this.features\n      .get(feature)\n      ?.subscribe((featureInstance) => {\n        injectors = [\n          // feature module injector\n          featureInstance.moduleRef.injector,\n          // injectors from dependency modules\n          ...featureInstance.depsModules.map(\n            (module) => this.dependencyModules.get(module).injector\n          ),\n        ];\n      })\n      .unsubscribe();\n    return injectors;\n  }\n\n  /**\n   * Resolve feature based on feature name, if feature was not yet resolved\n   *\n   * It will first resolve all module dependencies if defined\n   */\n  private resolveFeature(featureName: string): Observable<FeatureInstance> {\n    return defer(() => {\n      if (!this.features.has(featureName)) {\n        const featureConfig = this.featureModulesConfig[featureName];\n\n        if (!featureConfig?.module) {\n          throw new Error(\n            'No module defined for Feature Module ' + featureName\n          );\n        }\n\n        // resolve dependencies first (if any)\n        const depsResolve = featureConfig.dependencies?.length\n          ? forkJoin(\n              featureConfig.dependencies.map((depModuleFunc) =>\n                this.resolveDependencyModule(depModuleFunc)\n              )\n            )\n          : of(undefined);\n\n        this.features.set(\n          featureName,\n          depsResolve.pipe(\n            switchMap((deps) => this.resolveFeatureModule(featureConfig, deps)),\n            shareReplay()\n          )\n        );\n      }\n\n      return this.features.get(featureName);\n    });\n  }\n\n  /**\n   * Initialize feature module by returning feature instance\n   */\n  private resolveFeatureModule(\n    featureConfig: FeatureModuleConfig,\n    depsModules: any[] = []\n  ): Observable<FeatureInstance> {\n    return this.resolveModuleFactory(featureConfig?.module).pipe(\n      map(([moduleFactory]) => {\n        const moduleRef = moduleFactory.create(this.injector);\n\n        const featureInstance: FeatureInstance = {\n          ...featureConfig,\n          moduleRef,\n          depsModules,\n          componentsMappings: {},\n        };\n\n        // resolve configuration for feature module\n        const resolvedConfiguration = this.resolveFeatureConfiguration(\n          moduleRef.injector\n        );\n\n        // extract cms components configuration from feature config\n        for (const componentType of featureInstance.cmsComponents) {\n          featureInstance.componentsMappings[componentType] =\n            resolvedConfiguration.cmsComponents[componentType];\n        }\n        return featureInstance;\n      })\n    );\n  }\n\n  /**\n   * Returns configuration provided in feature module\n   */\n  private resolveFeatureConfiguration(featureInjector: Injector): CmsConfig {\n    // get config chunks from feature lib\n    const featureConfigChunks = featureInjector.get<any[]>(\n      ConfigChunk,\n      [],\n      InjectFlags.Self\n    );\n    // get default config chunks from feature lib\n    const featureDefaultConfigChunks = featureInjector.get<any[]>(\n      DefaultConfigChunk,\n      [],\n      InjectFlags.Self\n    );\n\n    return configurationFactory(\n      featureConfigChunks,\n      featureDefaultConfigChunks\n    ) as CmsConfig;\n  }\n\n  /**\n   * Resolves dependency module and initializes single module instance\n   */\n  private resolveDependencyModule(\n    moduleFunc: () => Promise<any>\n  ): Observable<any> {\n    // We grab moduleFactory symbol from module function and if there is no\n    // such a module created yet, we create it and store it in a\n    // dependencyModules map\n    return this.resolveModuleFactory(moduleFunc).pipe(\n      tap(([moduleFactory, module]) => {\n        if (!this.dependencyModules.has(module)) {\n          const moduleRef = moduleFactory.create(this.injector);\n          this.dependencyModules.set(module, moduleRef);\n        }\n      }),\n      pluck(1)\n    );\n  }\n\n  /**\n   * Resolve any Angular module from an function that return module or moduleFactory\n   */\n  private resolveModuleFactory(\n    moduleFunc: () => Promise<any>\n  ): Observable<[NgModuleFactory<any>, any]> {\n    return from(moduleFunc()).pipe(\n      switchMap((module) =>\n        module instanceof NgModuleFactory\n          ? (of([module, module]) as Observable<[NgModuleFactory<any>, any]>)\n          : combineLatest([\n              // using compiler here is for jit compatibility, there is no overhead\n              // for aot production builds as it will be stubbed\n              from(this.compiler.compileModuleAsync(module as any)),\n              of(module),\n            ])\n      ),\n      observeOn(queueScheduler)\n    );\n  }\n\n  ngOnDestroy(): void {\n    // clean up all initialized features\n    merge(...Array.from(this.features.values())).subscribe((featureInstance) =>\n      featureInstance.moduleRef?.destroy()\n    );\n\n    // clean up all initialized dependency modules\n    this.dependencyModules.forEach((dependency) => dependency.destroy());\n  }\n}\n","import { Inject, Injectable, Injector, PLATFORM_ID } from '@angular/core';\nimport {\n  CmsComponentMapping,\n  CmsConfig,\n  deepMerge,\n  DeferLoadingStrategy,\n} from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\nimport { defer, forkJoin, Observable, of } from 'rxjs';\nimport { mapTo, share, tap } from 'rxjs/operators';\nimport { FeatureModulesService } from './feature-modules.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentsService {\n  private missingComponents: string[] = [];\n  private mappings: { [componentType: string]: CmsComponentMapping } = {};\n\n  // contains\n  private mappingResolvers: Map<\n    string,\n    Observable<CmsComponentMapping>\n  > = new Map();\n\n  /**\n   * @deprecated since 2.1\n   * constructor(config: CmsConfig, platformId: Object);\n   */\n  constructor(\n    protected config: CmsConfig,\n    @Inject(PLATFORM_ID) protected platformId: Object,\n    protected featureModules?: FeatureModulesService\n  ) {}\n\n  /**\n   * Should be called to make sure all component mappings are determined,\n   * especially lazy loaded ones.\n   *\n   * It's recommended way to make sure all other methods of CmsComponentService\n   * will be able to work synchronously for asked component types and avoid risk\n   * of potential errors that could be thrown otherwise.\n   */\n  determineMappings(componentTypes: string[]): Observable<string[]> {\n    return defer(() => {\n      // we use defer, to be sure the logic below used to compose final observable\n      // will be executed at subscription time (with up to date state at the time,\n      // when it will be needed)\n      const featureResolvers = [];\n\n      for (const componentType of componentTypes) {\n        if (!this.mappings[componentType]) {\n          const staticConfig = this.config.cmsComponents[componentType];\n\n          // check if this component type is managed by feature module\n          if (this.featureModules.hasFeatureFor(componentType)) {\n            featureResolvers.push(\n              // we delegate populating this.mappings to feature resolver\n              this.getFeatureMappingResolver(componentType, staticConfig)\n            );\n          } else {\n            // simply use only static config\n            this.mappings[componentType] = staticConfig;\n          }\n        }\n      }\n\n      if (featureResolvers.length) {\n        return forkJoin(featureResolvers).pipe(mapTo(componentTypes));\n      } else {\n        return of(componentTypes);\n      }\n    });\n  }\n\n  private getFeatureMappingResolver(\n    componentType: string,\n    staticConfig?: CmsComponentMapping\n  ): Observable<CmsComponentMapping> {\n    if (!this.mappingResolvers.has(componentType)) {\n      const mappingResolver$ = this.featureModules\n        .getCmsMapping(componentType)\n        .pipe(\n          tap((featureComponentMapping) => {\n            // We treat cms mapping configuration from a feature as a default,\n            // that can be overridden by app/static configuration\n            this.mappings[componentType] = deepMerge(\n              {},\n              featureComponentMapping,\n              staticConfig\n            );\n            this.mappingResolvers.delete(componentType);\n          }),\n          share()\n        );\n      this.mappingResolvers.set(componentType, mappingResolver$);\n    }\n    return this.mappingResolvers.get(componentType);\n  }\n\n  getInjectors(componentType: string): Injector[] {\n    return (\n      (this.featureModules.hasFeatureFor(componentType) &&\n        this.featureModules.getInjectors(componentType)) ??\n      []\n    );\n  }\n\n  /**\n   * Return collection of component mapping configuration for specified list of\n   * component types.\n   *\n   * If component mapping can't be determined synchronously, for example, lazy\n   * loaded one, it will throw an error.\n   *\n   * To make sure component mapping is available, determineMappings()\n   * should be called and completed first.\n   */\n  getMapping(componentType: string): CmsComponentMapping {\n    const componentConfig =\n      this.mappings[componentType] ??\n      this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  /**\n   * Checks, if component should be rendered as some components\n   * could be disabled for server side renderings\n   */\n  shouldRender(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getMapping(componentType)?.disableSSR);\n  }\n\n  /**\n   * Return DeferLoadingStrategy for component type.\n   */\n  getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    return this.config.cmsComponents?.[componentType]?.deferLoading;\n  }\n\n  /**\n   * Get cms driven child routes for components\n   */\n  getChildRoutes(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        routes.push(...(this.getMapping(componentType)?.childRoutes ?? []));\n      }\n    }\n    return routes;\n  }\n\n  /**\n   * Get cms driven guards for components\n   */\n  getGuards(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getMapping(componentType)?.guards?.forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  /**\n   * Get i18n keys associated with components\n   */\n  getI18nKeys(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        this.getMapping(componentType)?.i18nKeys?.forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n}\n","import {\n  AbstractType,\n  InjectFlags,\n  InjectionToken,\n  Injector,\n  Type,\n} from '@angular/core';\n\nconst NOT_FOUND_SYMBOL = {};\n\n/**\n * CombinedInjector is able to combine more than one injector together in a way\n * that main injector is supported by complementary injectors.\n *\n * Should be used as a parent injector for components, when we want to have access\n * to both providers from component hierarchical injectors and providers from any\n * number of additional injectors (lazy loaded modules for example).\n */\nexport class CombinedInjector implements Injector {\n  /**\n   * @param mainInjector Component hierarchical injector\n   * @param complementaryInjectors Additional injector that will be taken into an account when resolving dependencies\n   */\n  constructor(\n    private mainInjector: Injector,\n    private complementaryInjectors: Injector[]\n  ) {}\n\n  get<T>(\n    token: Type<T> | InjectionToken<T> | AbstractType<T>,\n    notFoundValue?: T,\n    flags?: InjectFlags\n  ): T;\n  get(token: any, notFoundValue?: any): any;\n  get(token, notFoundValue?: any, flags?: InjectFlags): any {\n    // tslint:disable-next-line:no-bitwise\n    if (flags & InjectFlags.Self) {\n      if (notFoundValue !== undefined) {\n        return notFoundValue;\n      }\n      throw new Error(\n        \"CombinedInjector should be used as a parent injector / doesn't support self dependencies\"\n      );\n    }\n\n    for (const injector of [\n      this.mainInjector,\n      ...this.complementaryInjectors,\n    ]) {\n      // First we are resolving providers provided at Self level in all injectors,\n      // starting with main injector and going through complementary ones...\n      const service = injector.get(token, NOT_FOUND_SYMBOL, InjectFlags.Self);\n      if (service !== NOT_FOUND_SYMBOL) {\n        return service;\n      }\n    }\n    // ...and then fallback to main injector passing the flag\n    return this.mainInjector.get(token, notFoundValue, flags);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsComponentsService } from '../../../services/cms-components.service';\nimport { CombinedInjector } from '../../../../shared/utils/combined-injector';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsComponentsService.getMapping(type)?.providers ?? [];\n\n    const complementaryInjectors = this.cmsComponentsService.getInjectors(type);\n\n    if (complementaryInjectors?.length) {\n      parentInjector = new CombinedInjector(\n        parentInjector ?? this.injector,\n        complementaryInjectors\n      );\n    }\n\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Applicable {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsComponentsService } from '../../services/cms-components.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService\n  ) {}\n\n  ngOnInit() {\n    this.cmsComponentsService\n      .determineMappings([this.cxComponentWrapper.flexType])\n      .subscribe(() => {\n        if (\n          this.cmsComponentsService.shouldRender(\n            this.cxComponentWrapper.flexType\n          )\n        ) {\n          this.launchComponent();\n        }\n      });\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsComponentsService.getMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n        this.injector.get(ChangeDetectorRef).markForCheck();\n      });\n  }\n\n  private decorate(elementRef: ElementRef): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      elementRef.nativeElement,\n      this.renderer,\n      { componentData: this.cxComponentWrapper }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return typeof componentMapping.component === 'function';\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { DefaultComponentHandler } from './default-component.handler';\nimport { switchMap } from 'rxjs/operators';\nimport { ComponentHandler } from './component-handler';\n\n/**\n * Lazy component handler used for launching lazy loaded cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LazyComponentHandler implements ComponentHandler {\n  constructor(protected defaultHandler: DefaultComponentHandler) {}\n\n  /**\n   * We want to mach dynamic import signature () => import('')\n   */\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      this.isNotClass(componentMapping.component)\n    );\n  }\n\n  private isNotClass(symbol: any): boolean {\n    const signature = symbol.toString().substr(0, 20).replace(' ', '');\n    return signature.startsWith('function()') || signature.startsWith('()=>');\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return from(componentMapping.component()).pipe(\n      switchMap((component) =>\n        this.defaultHandler.launcher(\n          { ...componentMapping, component },\n          viewContainerRef,\n          elementInjector\n        )\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { LazyComponentHandler } from './handlers/lazy-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: LazyComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n  PAYMENT_TYPE = 'paymentType',\n}\n\nexport const checkoutShippingSteps = [\n  CheckoutStepType.SHIPPING_ADDRESS,\n  CheckoutStepType.DELIVERY_MODE,\n];\n\nexport const checkoutPaymentSteps = [\n  CheckoutStepType.PAYMENT_DETAILS,\n  CheckoutStepType.PAYMENT_TYPE,\n  CheckoutStepType.SHIPPING_ADDRESS,\n];\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n  disabled?: boolean;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  isCollapsed$: Observable<boolean>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected asmService: AsmService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n    this.isCollapsed$ = this.asmService\n      .getAsmUiState()\n      .pipe(map((uiState) => uiState.collapsed));\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AsmService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm-toggle-ui',\n  templateUrl: './asm-toggle-ui.component.html',\n  styleUrls: ['./asm-toggle-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmToggleUiComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  isCollapsed: boolean;\n\n  constructor(protected asmService: AsmService) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      this.asmService.getAsmUiState().subscribe((uiState) => {\n        this.isCollapsed = uiState.collapsed;\n      })\n    );\n  }\n\n  toggleUi(): void {\n    this.asmService.updateAsmUiState({ collapsed: !this.isCollapsed });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\n\nexport const defaultAsmLayoutConfig: LayoutConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AsmModule as AsmCoreModule,\n  I18nModule,\n  provideConfig,\n} from '@spartacus/core';\nimport { FormErrorsModule } from '../../shared/index';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { AsmToggleUiComponent } from './asm-toggle-ui/asm-toggle-ui.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { defaultAsmLayoutConfig } from './default-asm-layout.config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n    AsmToggleUiComponent,\n  ],\n  providers: [provideConfig(defaultAsmLayoutConfig)],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n\n    this.cart$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getActiveCartId(),\n      this.customerCouponService.getCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      ),\n    ]).pipe(\n      tap(\n        ([cart, activeCardId, customerCoupons]: [\n          Cart,\n          string,\n          CustomerCouponSearchResult\n        ]) => {\n          this.cartId = activeCardId;\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n        }\n      ),\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n    );\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n  selectiveCartEnabled: boolean;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.selectiveCartEnabled = this.selectiveCartService.isEnabled();\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartEnabled\n        ? this.selectiveCartService.getLoaded()\n        : of(false),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn && this.selectiveCartEnabled\n          ? cartLoaded && sflLoaded\n          : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, Cart, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.isEnabled()\n          ? this.selectiveCartService.getCart()\n          : of({} as Cart),\n        this.activeCartService.getLoading(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart, loadingCart]) => {\n          const exclude = (arr, args) =>\n            arr.filter((item) => args.every((arg) => arg !== item));\n          return Object.keys(cart).length === 0 && loadingCart\n            ? exclude(slots, [\n                'TopContent',\n                'CenterRightContentSlot',\n                'EmptyCartMiddleContent',\n              ])\n            : cart.totalItems\n            ? exclude(slots, ['EmptyCartMiddleContent'])\n            : selectiveCart.totalItems\n            ? exclude(slots, [\n                'EmptyCartMiddleContent',\n                'CenterRightContentSlot',\n              ])\n            : exclude(slots, ['TopContent', 'CenterRightContentSlot']);\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { SaveForLaterComponent } from './save-for-later.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  /**\n   * will be removed, there is same function in checkout-step.service\n   */\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  /**\n   * will be removed, there is same function in checkout-step.service\n   */\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  /**\n   * will be removed, there is same function in checkout-step.service\n   */\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  /**\n   * will be removed, there is same function in checkout-step.service\n   */\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  /**\n   * will be removed, there is same function in checkout-step.service\n   */\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  /**\n   * will be removed, there is same function in checkout-step.service\n   */\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  /**\n   * will be removed, there is same function in checkout-step.service\n   */\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  /**\n   * will be removed, there is same function in checkout-step.service\n   */\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  /**\n   * will be removed, there is same function in checkout-step.service\n   */\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n  UserService,\n  B2BUser,\n  GlobalMessageService,\n  GlobalMessageType,\n  B2BUserGroup,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n      this.userService.get(),\n    ]).pipe(\n      map(([token, cartUser, user]: [UserToken, User, User | B2BUser]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(cartUser);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        } else if ('roles' in user) {\n          const roles = (<B2BUser>user).roles;\n          if (roles.includes(B2BUserGroup.B2B_CUSTOMER_GROUP)) {\n            return true;\n          } else {\n            this.globalMessageService.add(\n              { key: 'checkout.invalid.accountType' },\n              GlobalMessageType.MSG_TYPE_WARNING\n            );\n            return false;\n          }\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingConfigService, RoutingService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from './checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutStepService {\n  // initial enabled steps\n  allSteps: CheckoutStep[];\n\n  readonly steps$: BehaviorSubject<CheckoutStep[]> = new BehaviorSubject<\n    CheckoutStep[]\n  >(undefined);\n\n  readonly activeStepIndex$: Observable<\n    number\n  > = this.routingService.getRouterState().pipe(\n    switchMap((router) => {\n      const activeStepUrl = router.state.context.id;\n      return this.steps$.pipe(\n        map((steps) => {\n          let activeIndex;\n          steps.forEach((step, index) => {\n            const routeUrl = `/${\n              this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n            }`;\n            if (routeUrl === activeStepUrl) {\n              activeIndex = index;\n            }\n          });\n          return activeIndex;\n        })\n      );\n    })\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected routingConfigService: RoutingConfigService\n  ) {\n    this.resetSteps();\n  }\n\n  back(activatedRoute: ActivatedRoute): void {\n    const previousUrl = this.getPreviousCheckoutStepUrl(activatedRoute);\n    this.routingService.go(previousUrl === null ? 'cart' : previousUrl);\n  }\n\n  next(activatedRoute: ActivatedRoute): void {\n    const nextUrl = this.getNextCheckoutStepUrl(activatedRoute);\n    this.routingService.go(nextUrl);\n  }\n\n  goToStepWithIndex(stepIndex: number): void {\n    this.routingService.go(\n      this.getStepUrlFromStepRoute(this.allSteps[stepIndex].routeName)\n    );\n  }\n\n  getBackBntText(activatedRoute: ActivatedRoute): string {\n    if (this.getPreviousCheckoutStepUrl(activatedRoute) === null) {\n      return 'checkout.backToCart';\n    }\n    return 'common.back';\n  }\n\n  resetSteps(): void {\n    this.allSteps = this.checkoutConfigService.steps\n      .filter((step) => !step.disabled)\n      .map((x) => Object.assign({}, x));\n    this.steps$.next(this.allSteps);\n  }\n\n  disableEnableStep(\n    currentStepType: CheckoutStepType,\n    disabled: boolean\n  ): void {\n    const currentStep = this.allSteps.find((step) =>\n      step.type.includes(currentStepType)\n    );\n    if (currentStep && currentStep.disabled !== disabled) {\n      currentStep.disabled = disabled;\n      this.steps$.next(this.allSteps.filter((step) => !step.disabled));\n    }\n  }\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.allSteps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.allSteps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    if (stepIndex >= 0) {\n      let i = 1;\n      while (\n        this.allSteps[stepIndex + i] &&\n        this.allSteps[stepIndex + i].disabled\n      ) {\n        i++;\n      }\n      const nextStep = this.allSteps[stepIndex + i];\n      if (nextStep) {\n        return this.getStepUrlFromStepRoute(nextStep.routeName);\n      }\n    }\n    return null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    if (stepIndex >= 0) {\n      let i = 1;\n      while (\n        this.allSteps[stepIndex - i] &&\n        this.allSteps[stepIndex - i].disabled\n      ) {\n        i++;\n      }\n      const previousStep = this.allSteps[stepIndex - i];\n      if (previousStep) {\n        return this.getStepUrlFromStepRoute(previousStep.routeName);\n      }\n    }\n    return null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    return this.allSteps.findIndex(\n      (step) =>\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n    );\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.allSteps.findIndex((step: CheckoutStep) =>\n          step[key].includes(value)\n        )\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutStepService } from '../services/checkout-step.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected checkoutStepService: CheckoutStepService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutStepService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutStepService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutStepService } from '../../../services/checkout-step.service';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressMobileBottomComponent\n  implements OnInit, OnDestroy {\n  constructor(\n    protected checkoutStepService: CheckoutStepService,\n    protected cdr: ChangeDetectorRef\n  ) {}\n\n  steps: CheckoutStep[];\n\n  activeStepIndex: number;\n  activeStepIndex$: Observable<\n    number\n  > = this.checkoutStepService.activeStepIndex$.pipe(\n    tap((index) => (this.activeStepIndex = index))\n  );\n\n  subscription: Subscription;\n\n  ngOnInit(): void {\n    this.subscription = this.checkoutStepService.steps$.subscribe((steps) => {\n      this.steps = steps;\n      this.cdr.detectChanges();\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport {\n  CheckoutCostCenterService,\n  PaymentTypeService,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStepService } from '../services/checkout-step.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutStepsSetGuard implements CanActivate {\n  constructor(\n    protected paymentTypeService: PaymentTypeService,\n    protected checkoutStepService: CheckoutStepService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutCostCenterService: CheckoutCostCenterService,\n    protected router: Router\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    _: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    let currentIndex = -1;\n    const currentRouteUrl = '/' + route.url.join('/');\n\n    // check whether the previous step is set\n    return combineLatest([\n      this.checkoutStepService.steps$,\n      this.paymentTypeService.isAccountPayment(),\n    ]).pipe(\n      tap(([, isAccount]) => {\n        this.checkoutStepService.disableEnableStep(\n          CheckoutStepType.PAYMENT_DETAILS,\n          isAccount\n        );\n      }),\n      take(1),\n      switchMap(([steps, isAccount]) => {\n        currentIndex = steps.findIndex((step) => {\n          const stepRouteUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          return stepRouteUrl === currentRouteUrl;\n        });\n        // get current step\n        let currentStep: CheckoutStep;\n        if (currentIndex >= 0) {\n          currentStep = steps[currentIndex];\n        }\n        if (Boolean(currentStep)) {\n          return this.isStepSet(steps[currentIndex - 1], isAccount);\n        } else {\n          if (isDevMode()) {\n            console.warn(\n              `Missing step with route '${currentRouteUrl}' in checkout configuration or this step is disabled.`\n            );\n          }\n          return of(this.getUrl('checkout'));\n        }\n      })\n    );\n  }\n\n  protected isStepSet(\n    step: CheckoutStep,\n    isAccountPayment\n  ): Observable<boolean | UrlTree> {\n    if (step && !step.disabled) {\n      switch (step.type[0]) {\n        case CheckoutStepType.PAYMENT_TYPE: {\n          return this.isPaymentTypeSet(step);\n        }\n        case CheckoutStepType.SHIPPING_ADDRESS: {\n          return this.isShippingAddressAndCostCenterSet(step, isAccountPayment);\n        }\n        case CheckoutStepType.DELIVERY_MODE: {\n          return this.isDeliveryModeSet(step);\n        }\n        case CheckoutStepType.PAYMENT_DETAILS: {\n          return this.isPaymentDetailsSet(step);\n        }\n        case CheckoutStepType.REVIEW_ORDER: {\n          break;\n        }\n      }\n    }\n    return of(true);\n  }\n\n  protected isPaymentTypeSet(\n    step: CheckoutStep\n  ): Observable<boolean | UrlTree> {\n    return this.paymentTypeService.getSelectedPaymentType().pipe(\n      map((paymentType: string) => {\n        if (Boolean(paymentType)) {\n          return true;\n        } else {\n          return this.getUrl(step.routeName);\n        }\n      })\n    );\n  }\n\n  protected isShippingAddressAndCostCenterSet(\n    step: CheckoutStep,\n    isAccountPayment: boolean\n  ): Observable<boolean | UrlTree> {\n    return combineLatest([\n      this.checkoutDetailsService.getDeliveryAddress(),\n      this.checkoutCostCenterService.getCostCenter(),\n    ]).pipe(\n      map(([deliveryAddress, costCenter]) => {\n        if (isAccountPayment) {\n          if (\n            deliveryAddress &&\n            Object.keys(deliveryAddress).length &&\n            Boolean(costCenter)\n          ) {\n            return true;\n          } else {\n            return this.getUrl(step.routeName);\n          }\n        } else {\n          if (\n            deliveryAddress &&\n            Object.keys(deliveryAddress).length &&\n            costCenter === undefined\n          ) {\n            return true;\n          } else {\n            return this.getUrl(step.routeName);\n          }\n        }\n      })\n    );\n  }\n\n  protected isDeliveryModeSet(\n    step: CheckoutStep\n  ): Observable<boolean | UrlTree> {\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length ? true : this.getUrl(step.routeName)\n        )\n      );\n  }\n\n  protected isPaymentDetailsSet(\n    step: CheckoutStep\n  ): Observable<boolean | UrlTree> {\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.getUrl(step.routeName)\n        )\n      );\n  }\n\n  private getUrl(routeName: string): UrlTree {\n    return this.router.parseUrl(\n      this.routingConfigService.getRouteConfig(routeName).paths[0]\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\nimport { CheckoutStepsSetGuard } from '../../../guards/checkout-steps-set.guard';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutStepService } from '../../../services/checkout-step.service';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit, OnDestroy {\n  constructor(\n    protected checkoutStepService: CheckoutStepService,\n    protected activeCartService: ActiveCartService,\n    protected cdr: ChangeDetectorRef\n  ) {}\n\n  cart$: Observable<Cart>;\n\n  steps: CheckoutStep[];\n\n  activeStepIndex: number;\n  activeStepIndex$: Observable<\n    number\n  > = this.checkoutStepService.activeStepIndex$.pipe(\n    tap((index) => (this.activeStepIndex = index))\n  );\n\n  subscription: Subscription;\n\n  ngOnInit(): void {\n    this.cart$ = this.activeCartService.getActive();\n\n    this.subscription = this.checkoutStepService.steps$.subscribe((steps) => {\n      this.steps = steps;\n      this.cdr.detectChanges();\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\nimport { CheckoutStepsSetGuard } from '../../../guards/checkout-steps-set.guard';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected checkoutStepService: CheckoutStepService,\n    protected cdr: ChangeDetectorRef\n  ) {}\n\n  steps: CheckoutStep[];\n\n  activeStepIndex: number;\n  activeStepIndex$: Observable<\n    number\n  > = this.checkoutStepService.activeStepIndex$.pipe(\n    tap((index) => (this.activeStepIndex = index))\n  );\n\n  subscription: Subscription;\n\n  ngOnInit(): void {\n    this.subscription = this.checkoutStepService.steps$.subscribe((steps) => {\n      this.steps = steps;\n      this.cdr.detectChanges();\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'cxMultiLine',\n})\nexport class MultiLinePipe implements PipeTransform {\n  transform(value: string): string {\n    const lastIndex = value.lastIndexOf(' ');\n\n    if (lastIndex === -1) return value;\n\n    return (\n      value.substring(0, lastIndex) +\n      '<br />' +\n      value.substring(lastIndex, value.length).trim()\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutStepsSetGuard } from '../../guards/checkout-steps-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\nimport { MultiLinePipe } from './multiline-titles.pipe';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent, MultiLinePipe],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutStepService } from '../services/checkout-step.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutStepService: CheckoutStepService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutStepService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    if (checkoutStep && checkoutStep.disabled) {\n      return of(true);\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutStepService } from '../services/checkout-step.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutStepService: CheckoutStepService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutStepService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutStepService } from '../services/checkout-step.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutStepService: CheckoutStepService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutStepService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    if (checkoutStep && checkoutStep.disabled) {\n      return of(true);\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CheckoutCostCenterService,\n  CostCenter,\n  PaymentTypeService,\n  UserCostCenterService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cost-center',\n  templateUrl: 'cost-center.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CostCenterComponent {\n  protected costCenterId: string;\n\n  cartCostCenter$: Observable<\n    string\n  > = this.checkoutCostCenterService.getCostCenter();\n\n  isAccountPayment$ = this.paymentTypeService.isAccountPayment();\n\n  costCenters$: Observable<\n    CostCenter[]\n  > = this.userCostCenterService.getActiveCostCenters().pipe(\n    filter((costCenters: CostCenter[]) => Boolean(costCenters)),\n    tap((costCenters: CostCenter[]) => {\n      if (!Boolean(this.costCenterId)) {\n        this.setCostCenter(costCenters[0].code);\n      }\n    })\n  );\n\n  constructor(\n    protected userCostCenterService: UserCostCenterService,\n    protected checkoutCostCenterService: CheckoutCostCenterService,\n    protected paymentTypeService: PaymentTypeService\n  ) {}\n\n  setCostCenter(selectCostCenter: string): void {\n    this.costCenterId = selectCostCenter;\n    this.checkoutCostCenterService.setCostCenter(this.costCenterId);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart';\nimport { CheckoutAuthGuard } from '../../guards';\nimport { CostCenterComponent } from './cost-center.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutCostCenterComponent: {\n          component: CostCenterComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CostCenterComponent],\n  entryComponents: [CostCenterComponent],\n})\nexport class CostCenterModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutDeliveryService, DeliveryMode } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom, takeWhile } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  backBtnText = this.checkoutStepService.getBackBntText(this.activatedRoute);\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    protected checkoutStepService: CheckoutStepService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    // Reload delivery modes on error\n    this.checkoutDeliveryService\n      .getLoadSupportedDeliveryModeProcess()\n      .pipe(takeWhile((state) => state?.success === false))\n      .subscribe((state) => {\n        if (state.error && !state.loading) {\n          this.checkoutDeliveryService.loadSupportedDeliveryModes();\n        }\n      });\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.checkoutStepService.next(this.activatedRoute);\n        }\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          if (code !== this.currentDeliveryModeId) {\n            this.checkoutDeliveryService.setDeliveryMode(code);\n          }\n        }\n        this.currentDeliveryModeId = code;\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.checkoutDeliveryService.setDeliveryMode(code);\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n  }\n\n  back(): void {\n    this.checkoutStepService.back(this.activatedRoute);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  backBtnText = this.checkoutStepService.getBackBntText(this.activatedRoute);\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService,\n    protected checkoutStepService: CheckoutStepService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.next();\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  next(): void {\n    this.checkoutStepService.next(this.activatedRoute);\n  }\n\n  back(): void {\n    this.checkoutStepService.back(this.activatedRoute);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  B2BPaymentTypeEnum,\n  PaymentType,\n  PaymentTypeService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, tap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../../model/checkout-step.model';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-payment-type',\n  templateUrl: './payment-type.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentTypeComponent {\n  @ViewChild('poNumber', { static: false })\n  private _poNumberInput: ElementRef;\n\n  typeSelected: string;\n  cartPoNumber: string;\n\n  paymentTypes$: Observable<\n    PaymentType[]\n  > = this.paymentTypeService.getPaymentTypes();\n\n  typeSelected$: Observable<\n    string\n  > = this.paymentTypeService.getSelectedPaymentType().pipe(\n    filter((selected) => selected !== undefined),\n    distinctUntilChanged(),\n    tap((selected) => {\n      this.typeSelected = selected;\n      this.checkoutStepService.resetSteps();\n      this.checkoutStepService.disableEnableStep(\n        CheckoutStepType.PAYMENT_DETAILS,\n        selected === B2BPaymentTypeEnum.ACCOUNT_PAYMENT\n      );\n    })\n  );\n\n  cartPoNumber$: Observable<\n    string\n  > = this.paymentTypeService.getPoNumber().pipe(\n    filter((po) => po !== undefined),\n    tap((po) => {\n      return (this.cartPoNumber = po);\n    })\n  );\n\n  constructor(\n    protected paymentTypeService: PaymentTypeService,\n    protected checkoutStepService: CheckoutStepService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  changeType(code: string): void {\n    this.paymentTypeService.setPaymentType(code);\n    this.typeSelected = code;\n  }\n\n  next(): void {\n    // set po number to cart\n    const poNumInput = this._poNumberInput.nativeElement.value;\n    if (this.typeSelected && poNumInput !== this.cartPoNumber) {\n      this.paymentTypeService.setPaymentType(this.typeSelected, poNumInput);\n    }\n\n    this.checkoutStepService.next(this.activatedRoute);\n  }\n\n  back(): void {\n    this.checkoutStepService.back(this.activatedRoute);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentTypeComponent } from './payment-type.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentType: {\n          component: PaymentTypeComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentTypeComponent],\n  entryComponents: [PaymentTypeComponent],\n  exports: [PaymentTypeComponent],\n})\nexport class PaymentTypeModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CheckoutService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm: FormGroup = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  Cart,\n  CheckoutCostCenterService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CostCenter,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  PaymentTypeService,\n  PromotionLocation,\n  PromotionResult,\n  TranslationService,\n  UserAddressService,\n  UserCostCenterService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\nimport {\n  checkoutPaymentSteps,\n  checkoutShippingSteps,\n  CheckoutStep,\n} from '../../model/checkout-step.model';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutStepService } from '../../services/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent {\n  iconTypes = ICON_TYPE;\n  checkoutStepType = CheckoutStepType;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutStepService: CheckoutStepService,\n    protected promotionService: PromotionService,\n    protected paymentTypeService: PaymentTypeService,\n    protected checkoutCostCenterService: CheckoutCostCenterService,\n    protected userCostCenterService: UserCostCenterService\n  ) {}\n\n  get cart$(): Observable<Cart> {\n    return this.activeCartService.getActive();\n  }\n\n  get entries$(): Observable<OrderEntry[]> {\n    return this.activeCartService.getEntries();\n  }\n\n  get steps$(): Observable<CheckoutStep[]> {\n    return this.checkoutStepService.steps$;\n  }\n\n  get deliveryAddress$(): Observable<Address> {\n    return this.checkoutDeliveryService.getDeliveryAddress();\n  }\n\n  get deliveryMode$(): Observable<DeliveryMode> {\n    return this.checkoutDeliveryService.getSelectedDeliveryMode().pipe(\n      tap((selected: DeliveryMode) => {\n        if (selected === null) {\n          this.checkoutDeliveryService.loadSupportedDeliveryModes();\n        }\n      })\n    );\n  }\n\n  get paymentDetails$(): Observable<PaymentDetails> {\n    return this.checkoutPaymentService.getPaymentDetails();\n  }\n\n  get orderPromotions$(): Observable<PromotionResult[]> {\n    return this.promotionService.getOrderPromotions(this.promotionLocation);\n  }\n\n  get countryName$(): Observable<string> {\n    return this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address?.country?.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  get poNumber$(): Observable<string> {\n    return this.paymentTypeService.getPoNumber();\n  }\n\n  get paymentType$(): Observable<string> {\n    return this.paymentTypeService.getSelectedPaymentType();\n  }\n\n  get isAccountPayment$(): Observable<boolean> {\n    return this.paymentTypeService.isAccountPayment();\n  }\n\n  get costCenter$(): Observable<CostCenter> {\n    return this.userCostCenterService.getActiveCostCenters().pipe(\n      filter((costCenters) => Boolean(costCenters)),\n      switchMap((costCenters) => {\n        return this.checkoutCostCenterService.getCostCenter().pipe(\n          map((code) => {\n            return costCenters.find((cc) => cc.code === code);\n          })\n        );\n      })\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress?.country?.isocode;\n        }\n\n        let region = '';\n        if (\n          deliveryAddress &&\n          deliveryAddress.region &&\n          deliveryAddress.region.isocode\n        ) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getCostCenterCard(costCenter: CostCenter): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutPO.costCenter'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: costCenter?.name,\n          text: ['(' + costCenter?.unit.name + ')'],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [\n            deliveryMode.description,\n            deliveryMode.deliveryCost?.formattedValue\n              ? deliveryMode.deliveryCost?.formattedValue\n              : '',\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n      this.translation.translate('paymentForm.billingAddress'),\n    ]).pipe(\n      map(([textTitle, textExpires, billingAddress]) => {\n        const region = paymentDetails.billingAddress?.region?.isocode\n          ? paymentDetails.billingAddress?.region?.isocode + ', '\n          : '';\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n          paragraphs: [\n            {\n              title: billingAddress + ':',\n              text: [\n                paymentDetails.billingAddress?.firstName +\n                  ' ' +\n                  paymentDetails.billingAddress?.lastName,\n                paymentDetails.billingAddress?.line1,\n                paymentDetails.billingAddress?.town +\n                  ', ' +\n                  region +\n                  paymentDetails.billingAddress?.country?.isocode,\n                paymentDetails.billingAddress?.postalCode,\n              ],\n            },\n          ],\n        };\n      })\n    );\n  }\n\n  getPoNumberCard(poNumber: string): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutReview.poNumber'),\n      this.translation.translate('checkoutPO.noPoNumber'),\n    ]).pipe(\n      map(([textTitle, noneTextTitle]) => {\n        return {\n          title: textTitle,\n          textBold: poNumber ? poNumber : noneTextTitle,\n        };\n      })\n    );\n  }\n\n  getPaymentTypeCard(paymentType: string): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutProgress.methodOfPayment'),\n      this.translation.translate('paymentTypes.paymentType', {\n        context: paymentType,\n      }),\n    ]).pipe(\n      map(([textTitle, paymentTypeTranslation]) => {\n        return {\n          title: textTitle,\n          textBold: paymentTypeTranslation,\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutStepService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n\n  shippingSteps(steps: CheckoutStep[]): CheckoutStep[] {\n    return steps.filter((step) => checkoutShippingSteps.includes(step.type[0]));\n  }\n\n  paymentSteps(steps: CheckoutStep[]): CheckoutStep[] {\n    return steps.filter((step) => checkoutPaymentSteps.includes(step.type[0]));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PromotionsModule } from '../promotions/promotions.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  ErrorModel,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  addresses$: Observable<Address[]>;\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField = true;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries: Country[]) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles: Title[]) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions: Region[]) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(\n              (error: ErrorModel) => error.subject === 'titleCode'\n            )\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n\n    this.addresses$ = this.userAddressService.getAddresses();\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  B2BAddress,\n  CheckoutCostCenterService,\n  CheckoutDeliveryService,\n  PaymentTypeService,\n  TranslationService,\n  UserAddressService,\n  UserCostCenterService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  map,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  addressFormOpened = false;\n  forceLoader = false; // this helps with smoother steps transition\n  selectedAddress: Address;\n  doneAutoSelect = false;\n  isAccountPayment = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService,\n    protected checkoutStepService: CheckoutStepService,\n    protected paymentTypeService?: PaymentTypeService,\n    protected userCostCenterService?: UserCostCenterService,\n    protected checkoutCostCenterService?: CheckoutCostCenterService\n  ) {}\n\n  get isGuestCheckout(): boolean {\n    return this.activeCartService.isGuestCart();\n  }\n\n  get backBtnText(): string {\n    return this.checkoutStepService.getBackBntText(this.activatedRoute);\n  }\n\n  get isLoading$(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  get selectedAddress$(): Observable<Address> {\n    return this.checkoutDeliveryService.getDeliveryAddress().pipe(\n      tap((address) => {\n        if (\n          address &&\n          (this.selectedAddress === undefined ||\n            this.selectedAddress.id !== address.id)\n        ) {\n          this.selectedAddress = address;\n          if (this.forceLoader) {\n            this.next();\n          }\n        }\n      })\n    );\n  }\n\n  get cards$(): Observable<CardWithAddress[]> {\n    return combineLatest([\n      this.getSupportedAddresses(),\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      tap(([addresses, selected]) =>\n        this.selectDefaultAddress(addresses, selected)\n      ),\n      map(([addresses, selected, textDefault, textShipTo, textSelected]) =>\n        (<any>addresses).map((address) => ({\n          address,\n          card: this.getCardContent(\n            address,\n            selected,\n            textDefault,\n            textShipTo,\n            textSelected\n          ),\n        }))\n      )\n    );\n  }\n\n  getSupportedAddresses(): Observable<Address[] | B2BAddress[]> {\n    if (this.isAccountPayment) {\n      return this.checkoutCostCenterService.getCostCenter().pipe(\n        distinctUntilChanged(),\n        switchMap((selected) => {\n          this.doneAutoSelect = false;\n          return this.userCostCenterService.getCostCenterAddresses(selected);\n        })\n      );\n    } else {\n      return this.userAddressService.getAddresses();\n    }\n  }\n\n  selectDefaultAddress(addresses: Address[], selected: Address) {\n    if (\n      !this.doneAutoSelect &&\n      addresses &&\n      addresses.length &&\n      (!selected || Object.keys(selected).length === 0)\n    ) {\n      if (this.isAccountPayment) {\n        if (addresses.length === 1) {\n          this.selectAddress(addresses[0]);\n        }\n      } else {\n        selected = addresses.find((address) => address.defaultAddress);\n        if (selected) {\n          this.selectAddress(selected);\n        }\n      }\n      this.doneAutoSelect = true;\n    }\n  }\n\n  ngOnInit(): void {\n    if (\n      this.paymentTypeService &&\n      this.userCostCenterService &&\n      this.checkoutCostCenterService\n    ) {\n      this.paymentTypeService\n        .isAccountPayment()\n        .pipe(take(1))\n        .subscribe((isAccount) => (this.isAccountPayment = isAccount));\n    }\n\n    if (!this.isGuestCheckout && !this.isAccountPayment) {\n      this.userAddressService.loadAddresses();\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    this.forceLoader = true;\n    this.checkoutDeliveryService.createAndSetAddress(address);\n  }\n\n  showNewAddressForm(): void {\n    this.addressFormOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.addressFormOpened = false;\n    if (goPrevious) {\n      this.back();\n    }\n  }\n\n  next(): void {\n    this.checkoutStepService.next(this.activatedRoute);\n  }\n\n  back(): void {\n    this.checkoutStepService.back(this.activatedRoute);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { CostCenterModule } from './components/cost-center/cost-center.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PaymentTypeModule } from './components/payment-type/payment-type.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    PaymentTypeModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n    CostCenterModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { Direction } from './direction.model';\n\n/**\n * The direction config provides an easy way to configure \"ltr\" versus \"rtl\" direction\n * for the storefront. The direction can be configured to detect the direction by language.\n *\n * The following configuration detects rtl languages by isoCode for Arabic and Hebrew:\n *\n * ```typescript\n * direction: {\n *   detect: true,\n *   default: DirectionMode.LTR,\n *   rtlLanguages: ['ar', 'he']\n * }\n * ```\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class DirectionConfig {\n  direction?: Direction;\n}\n","import { DirectionConfig } from './direction.config';\nimport { DirectionMode } from './direction.model';\n\nexport const defaultDirectionConfig: DirectionConfig = {\n  direction: {\n    detect: true,\n    default: DirectionMode.LTR,\n    // we're not polluting the system with all defaults for ltr, but add 2 common used\n    // languages (hebrew and arabic) to easily demo directionality\n    // see https://meta.wikimedia.org/wiki/Template:List_of_language_names_ordered_by_code\n    rtlLanguages: ['he', 'ar'],\n  },\n};\n","import { Injectable, OnDestroy } from '@angular/core';\nimport {\n  ConfigInitializerService,\n  LanguageService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { DirectionConfig } from './config/direction.config';\nimport { Direction, DirectionMode } from './config/direction.model';\n\n/**\n * The `DirectionService` can be used to add the direction to the overall storefront or individual elements.\n * By default, the direction is added to the `html` element (i.e. `<html dir=\"ltr\">`). The API of this service\n * does however provide methods to add direction to individual elements if needed.\n *\n * The direction is configurable and allows for language driven direction configuration.\n *\n * To react to the active language, the service subscribes to the active language in the initialize method. This\n * is called from an APP_INITIALIZER method and should only happen once.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DirectionService implements OnDestroy {\n  protected config: Direction;\n  protected startsDetecting = false;\n\n  protected subscription = new Subscription();\n\n  constructor(\n    protected configInit: ConfigInitializerService,\n    protected languageService: LanguageService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Initializes the layout direction for the storefront.\n   */\n  initialize(): Promise<void> {\n    return this.configInit\n      .getStableConfig('direction')\n      .then((config: DirectionConfig) => {\n        this.config = config?.direction;\n        if (this.config?.detect) {\n          this.detect();\n        } else {\n          this.setDirection(\n            this.winRef.document.documentElement,\n            this.config?.default\n          );\n        }\n      });\n  }\n\n  /**\n   * Observes the _active_ language and set the required direction for the given language.\n   * The method is guarded to ensure that the active language is observed only once.\n   */\n  protected detect() {\n    if (this.startsDetecting) {\n      return;\n    }\n    this.subscription.add(\n      this.languageService\n        .getActive()\n        .subscribe((isoCode: string) =>\n          this.setDirection(\n            this.winRef.document.documentElement,\n            this.getDirection(isoCode)\n          )\n        )\n    );\n    this.startsDetecting = true;\n  }\n\n  /**\n   * Sets the direction attribute for the given element. If the direction is undefined, the `dir`\n   * attribute is removed.\n   */\n  setDirection(el: HTMLElement, direction: DirectionMode): void {\n    if (direction) {\n      el.setAttribute('dir', direction);\n    } else {\n      el.removeAttribute('dir');\n    }\n  }\n\n  /**\n   * Gets the `DirectionMode` for the given language isoCode. The language isoCode is compared\n   * to the configured list of languages(`direction.rtlLanguages` vs `direction.ltrLanguages`).\n   *\n   * If no language is given, or no language mapping could be found, we fallback to the default\n   * `direction.mode`.\n   */\n  getDirection(language?: string): DirectionMode {\n    if (language && this.config?.rtlLanguages?.includes(language)) {\n      return DirectionMode.RTL;\n    }\n    if (language && this.config?.ltrLanguages?.includes(language)) {\n      return DirectionMode.LTR;\n    }\n    return this.config?.default;\n  }\n\n  ngOnDestroy(): void {\n    // Cleans up the subscription, to avoid memory leaks in SSR.\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { FeatureConfigService, provideDefaultConfig } from '@spartacus/core';\nimport { defaultDirectionConfig } from './config/default-direction.config';\nimport { DirectionService } from './direction.service';\n\nexport function initHtmlDirAttribute(\n  directionService: DirectionService,\n  featureConfigService: FeatureConfigService\n) {\n  const result = () => {\n    if (featureConfigService.isLevel('2.1')) {\n      return directionService.initialize();\n    }\n  };\n  return result;\n}\n\n/**\n * Provides a configuration and APP_INITIALIZER to add the correct (language drive) html direction.\n */\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: initHtmlDirAttribute,\n      deps: [DirectionService, FeatureConfigService],\n    },\n    provideDefaultConfig(defaultDirectionConfig),\n  ],\n})\nexport class DirectionModule {}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { DirectionModule } from './direction/direction.module';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot(), DirectionModule],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nimport { CmsComponentsService } from '../../services/cms-components.service';\n\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position represents the unique key for a page slot on a single page, but can\n   * be reused cross pages.\n   *\n   * The position is used to find the CMS components for the page slot. It is also\n   * added as an additional CSS class so that layoutt can be applied.\n   */\n  @Input() set position(value: string) {\n    this.position$.next(value);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  /**\n   * Maintains css classes introduced by the host and adds additional classes.\n   */\n  @Input() @HostBinding() class: string;\n\n  /**\n   * Indicates that the page slot is the last page slot above the fold.\n   */\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  /**\n   * Indicates that the components of the page slot haven't been loaded as long\n   * as the isPending state is true.\n   */\n  @HostBinding('class.cx-pending') isPending = true;\n\n  /**\n   * Indicates that the page slot doesn't contain any components. This is no\n   * longer used in spartacus, but kept for backwards compatibility.\n   */\n  @HostBinding('class.has-components') @Input() hasComponents = false;\n\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  components: ContentSlotComponentData[];\n\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    distinctUntilChanged(this.isDistinct)\n  );\n\n  /** Observes the components for the given page slot. */\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\n    map((slot) => slot?.components ?? [])\n  );\n\n  protected subscription: Subscription = new Subscription();\n\n  /** Keeps track of the pending components that must be loaded for the page slot */\n  private pendingComponentCount = 0;\n\n  /** Tracks the last used position, in case the page slot is used dynamically */\n  private lastPosition: string;\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\n        this.components = value?.components || [];\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  protected decorate(slot: ContentSlotData): void {\n    let cls = this.class || '';\n\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\n      cls = cls.replace(this.lastPosition, '');\n    }\n    if (this.position$.value) {\n      cls += ` ${this.position$.value}`;\n      this.lastPosition = this.position$.value;\n    }\n\n    // host bindings\n    this.pending = slot?.components?.length || 0;\n    this.hasComponents = slot?.components?.length > 0;\n    if (cls && cls !== this.class) {\n      this.class = cls;\n    }\n\n    this.addSmartEditSlotClass(slot);\n  }\n\n  /**\n   * Sets the pending count for the page slot components. Once all pending components are\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\n   */\n  protected set pending(count: number) {\n    this.pendingComponentCount = count;\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  protected get pending(): number {\n    return this.pendingComponentCount;\n  }\n\n  /*\n   * Is triggered when a component is added to the view. This is used to\n   * update the pending count\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pending--;\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether the component should be\n   * rendered instantly or whether it should be deferred.\n   */\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(\n      componentType\n    );\n    return { deferLoading };\n  }\n\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\n    return (\n      current.components &&\n      old.components?.length === current.components.length &&\n      !old.components.find(\n        (el, index) => el.uid !== current.components[index].uid\n      )\n    );\n  }\n\n  private addSmartEditSlotClass(slot: ContentSlotData): void {\n    if (slot) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.elementRef.nativeElement,\n        this.renderer,\n        { slotData: slot }\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { ComponentRef, Injectable, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n/**\n * Service that adds the page template as a className to the application root element. If the root\n * element is cx-storefront, the resulting DOM would look like:\n *\n * ```html\n * <cx-storefront class=\"LandingPageTemplate\">\n *  [...]\n * <cx-storefront>\n * ```\n */\n@Injectable({ providedIn: 'root' })\nexport class PageTemplateStyleService implements OnDestroy {\n  /**\n   * Keeps the subscriptions for this service so that we can unsubscribe on destroy.\n   */\n  protected subscription = new Subscription();\n\n  /**\n   * Holds the current page template, so we can remove previous page templates from the element classList.\n   */\n  protected currentTemplate: string;\n\n  constructor(protected pageLayoutService: PageLayoutService) {}\n\n  initialize(ref: ComponentRef<any>): void {\n    const el: HTMLElement = ref.location.nativeElement;\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(distinctUntilChanged())\n        .subscribe((template) => this.addStyleClass(el, template))\n    );\n  }\n\n  /**\n   * Adds the page template as a style class to the given element. If any page template\n   * was added before, we clean it up.\n   */\n  protected addStyleClass(el: HTMLElement, template: string): void {\n    // clean up previous template class binding\n    if (this.currentTemplate) {\n      el.classList?.remove(this.currentTemplate);\n    }\n    if (template) {\n      this.currentTemplate = template;\n      el.classList.add(this.currentTemplate);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_BOOTSTRAP_LISTENER, ComponentRef, NgModule } from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageTemplateStyleService } from './page-template-style.service';\n\nexport function initPageTemplateStyle(\n  service: PageTemplateStyleService,\n  featureConfigService: FeatureConfigService\n) {\n  const result = (componentRef: ComponentRef<any>) => {\n    if (featureConfigService.isLevel('2.1')) {\n      service.initialize(componentRef);\n    }\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  exports: [PageLayoutComponent],\n\n  providers: [\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      multi: true,\n      useFactory: initPageTemplateStyle,\n      deps: [PageTemplateStyleService, FeatureConfigService],\n    },\n  ],\n})\nexport class PageLayoutModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddToHomeScreenService {\n  protected deferredEvent: any;\n\n  protected canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    protected config: PWAModuleConfig,\n    protected globalMessageService: GlobalMessageService,\n    protected winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService implements OnDestroy {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  private subscription: Subscription;\n\n  init() {\n    this.subscription = this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory implements OnDestroy {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  private subscription: Subscription;\n\n  build() {\n    this.subscription = this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsDialogModule } from '../../shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsDialogModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsComponentsService.getGuards(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected translation: TranslationService,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsComponentsService.getI18nKeys(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsComponentsService } from './cms-components.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(\n    private router: Router,\n    private cmsComponentsService: CmsComponentsService\n  ) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsComponentsService.getChildRoutes(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsComponentsService } from '../services/cms-components.service';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    protected cmsService: CmsService,\n    protected cmsRoutes: CmsRoutesService,\n    protected cmsI18n: CmsI18nService,\n    protected cmsGuards: CmsGuardsService,\n    protected cmsComponentsService: CmsComponentsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsComponentsService.determineMappings(componentTypes)\n      ),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutPaymentType: { paths: ['checkout/payment-type'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, take, switchMap } from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    winRef?: WindowRef,\n    // tslint:disable-next-line:unified-signatures\n    breakpointService?: BreakpointService\n  );\n  /**\n   * @deprecated since 2.1\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    winRef?: WindowRef\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    protected cmsService: CmsService,\n    protected winRef?: WindowRef,\n    protected breakpointService?: BreakpointService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilChanged((x, y) => x?.components === y?.components),\n    switchMap((data) =>\n      combineLatest(\n        (data?.components ?? '').split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab) {\n                return undefined;\n              }\n\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number, event?: MouseEvent): void {\n    this.breakpointService\n      ?.isDown(BREAKPOINT.sm)\n      .pipe(take(1))\n      .subscribe((res) => {\n        if (res) {\n          this.activeTabNum = this.activeTabNum === tabNum ? -1 : tabNum;\n          if (event && event?.target) {\n            const target = event.target as HTMLElement;\n            const parentNode = target.parentNode as HTMLElement;\n            this.winRef?.nativeWindow?.scrollTo(0, parentNode.offsetTop);\n          }\n        } else {\n          this.activeTabNum = tabNum;\n        }\n      });\n  }\n\n  ngOnInit(): void {\n    this.activeTabNum =\n      this.winRef?.nativeWindow?.history?.state?.activeTab ?? this.activeTabNum;\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() amendOrderForm: FormGroup;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n\n  constructor(protected routingService: RoutingService) {}\n\n  continue(event: Event): void {\n    if (this.amendOrderForm.valid) {\n      this.routingService.go({\n        cxRoute: this.forwardRoute,\n        params: { code: this.orderCode },\n      });\n    } else {\n      this.amendOrderForm.markAllAsTouched();\n      event.stopPropagation();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantityToCancel(control: FormControl) {\n  if (!control.value) {\n    return null;\n  }\n  const quantity = Object.values(control.value).reduce(\n    (acc: number, val: number) => acc + val,\n    0\n  );\n  return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup(\n      {},\n      { validators: [ValidateQuantityToCancel] }\n    );\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  ItemCounterModule,\n  MediaModule,\n} from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup) {\n    if (form.valid) {\n      this.orderAmendService.save();\n    } else {\n      form.markAllAsTouched();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order?.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\nimport { FormErrorsModule } from '../../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  CostCenter,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getOrderCodeCardContent(orderCode: string): Observable<Card> {\n    return this.translation\n      .translate('checkoutOrderConfirmation.orderNumber')\n      .pipe(\n        filter(() => Boolean(orderCode)),\n        map((textTitle) => ({\n          title: textTitle,\n          text: [orderCode],\n        }))\n      );\n  }\n\n  getOrderCurrentDateCardContent(isoDate: string): Observable<Card> {\n    return this.translation\n      .translate('checkoutOrderConfirmation.placedOn')\n      .pipe(\n        map((textTitle) => {\n          const date = this.getDate(new Date(isoDate));\n\n          return {\n            title: textTitle,\n            text: [date],\n          };\n        })\n      );\n  }\n\n  getOrderStatusCardContent(status: string): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutOrderConfirmation.status'),\n      this.translation.translate('orderDetails.statusDisplay', {\n        context: status,\n      }),\n    ]).pipe(\n      map(([textTitle, textStatus]) => ({\n        title: textTitle,\n        text: [textStatus],\n      }))\n    );\n  }\n\n  getPurchaseOrderNumber(poNumber: string): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutReview.poNumber'),\n      this.translation.translate('checkoutPO.noPoNumber'),\n    ]).pipe(\n      map(([textTitle, noneTextTitle]) => ({\n        title: textTitle,\n        text: [poNumber ? poNumber : noneTextTitle],\n      }))\n    );\n  }\n\n  getMethodOfPaymentCardContent(\n    hasPaymentInfo: PaymentDetails\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutProgress.methodOfPayment'),\n      this.translation.translate('paymentTypes.paymentType_ACCOUNT'),\n      this.translation.translate('paymentTypes.paymentType_CARD'),\n    ]).pipe(\n      map(([textTitle, textAccount, textCard]) => ({\n        title: textTitle,\n        text: [Boolean(hasPaymentInfo) ? textCard : textAccount],\n      }))\n    );\n  }\n\n  getCostCenterCardContent(costCenter: CostCenter): Observable<Card> {\n    return this.translation.translate('checkoutPO.costCenter').pipe(\n      filter(() => Boolean(costCenter)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: costCenter?.name,\n        text: ['(' + costCenter?.unit?.name + ')'],\n      }))\n    );\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [deliveryAddress.formattedAddress, deliveryAddress.country.name],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [\n          deliveryMode.description,\n          deliveryMode.deliveryCost?.formattedValue\n            ? deliveryMode.deliveryCost?.formattedValue\n            : '',\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('paymentForm.billingAddress').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [billingAddress.formattedAddress, billingAddress.country.name],\n      }))\n    );\n  }\n\n  private getDate(givenDate: Date): string {\n    const date = givenDate.toDateString().split(' ');\n\n    const month = date[1];\n    const day = date[2];\n    const year = date[3];\n\n    return month + ' ' + day + ' ' + year;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm: FormGroup = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return data\n          ? {\n              title: data.name,\n              children: [nav],\n            }\n          : undefined;\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category),\n   * also taking into account content pages (contentPageLabelOrId)\n   * and product pages (productCode)\n   */\n  protected getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.contentPageLabelOrId) {\n      return item.contentPageLabelOrId;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    } else if (item.productCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'product',\n        params: {\n          code: item.productCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    const wrapper = <HTMLElement>node.querySelector('.wrapper');\n    const body = <HTMLElement>node.closest('body');\n    if (wrapper) {\n      this.renderer.removeStyle(wrapper, 'margin-left');\n      if (\n        wrapper.offsetLeft + wrapper.offsetWidth >\n        body.offsetLeft + body.offsetWidth\n      ) {\n        this.renderer.setStyle(\n          wrapper,\n          'margin-left',\n          `${node.offsetWidth - wrapper.offsetWidth}px`\n        );\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  /**\n   * For search results model, it returns true when:\n   * * there is any product OR\n   * * the is any search suggestion OR\n   * * there is a message.\n   *\n   * Otherwise it returns false.\n   */\n  protected hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  /**\n   * Emits product search results in case when the config property `displayProducts` is true.\n   * Otherwise it emits an empty object.\n   */\n  protected getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  protected getProductSuggestions(\n    config: SearchBoxConfig\n  ): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * Whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  protected getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  /**\n   * Emits a 'no match' message, in case the product search results and search suggestions are empty.\n   * Otherwise it emits null.\n   */\n  protected getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c?.displayProducts === 'true' || c?.displayProducts === true,\n            displayProductImages:\n              <any>c?.displayProductImages === 'true' ||\n              c?.displayProductImages === true,\n            displaySuggestions:\n              <any>c?.displaySuggestions === 'true' ||\n              c?.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  CostCenter,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getOrderCodeCardContent(orderCode: string): Observable<Card> {\n    return this.translation\n      .translate('checkoutOrderConfirmation.orderNumber')\n      .pipe(\n        filter(() => Boolean(orderCode)),\n        map((textTitle) => ({\n          title: textTitle,\n          text: [orderCode],\n        }))\n      );\n  }\n\n  getOrderCurrentDateCardContent(isoDate: string): Observable<Card> {\n    return this.translation\n      .translate('checkoutOrderConfirmation.placedOn')\n      .pipe(\n        map((textTitle) => {\n          const date = this.getDate(new Date(isoDate));\n\n          return {\n            title: textTitle,\n            text: [date],\n          };\n        })\n      );\n  }\n\n  getOrderStatusCardContent(status: string): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutOrderConfirmation.status'),\n      this.translation.translate('orderDetails.statusDisplay', {\n        context: status,\n      }),\n    ]).pipe(\n      map(([textTitle, textStatus]) => ({\n        title: textTitle,\n        text: [textStatus],\n      }))\n    );\n  }\n\n  getPurchaseOrderNumber(poNumber: string): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutReview.poNumber'),\n      this.translation.translate('checkoutPO.noPoNumber'),\n    ]).pipe(\n      map(([textTitle, noneTextTitle]) => ({\n        title: textTitle,\n        text: [poNumber ? poNumber : noneTextTitle],\n      }))\n    );\n  }\n\n  getMethodOfPaymentCardContent(\n    hasPaymentInfo: PaymentDetails\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutProgress.methodOfPayment'),\n      this.translation.translate('paymentTypes.paymentType_ACCOUNT'),\n      this.translation.translate('paymentTypes.paymentType_CARD'),\n    ]).pipe(\n      map(([textTitle, textAccount, textCard]) => ({\n        title: textTitle,\n        text: [Boolean(hasPaymentInfo) ? textCard : textAccount],\n      }))\n    );\n  }\n\n  getCostCenterCardContent(costCenter: CostCenter): Observable<Card> {\n    return this.translation.translate('checkoutPO.costCenter').pipe(\n      filter(() => Boolean(costCenter)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: costCenter?.name,\n        text: ['(' + costCenter?.unit?.name + ')'],\n      }))\n    );\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [deliveryAddress.formattedAddress, deliveryAddress.country.name],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [\n          deliveryMode.description,\n          deliveryMode.deliveryCost?.formattedValue\n            ? deliveryMode.deliveryCost?.formattedValue\n            : '',\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('paymentForm.billingAddress').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [billingAddress.formattedAddress, billingAddress.country.name],\n      }))\n    );\n  }\n\n  private getDate(givenDate: Date): string {\n    const date = givenDate.toDateString().split(' ');\n\n    const month = date[1];\n    const day = date[2];\n    const year = date[3];\n\n    return month + ' ' + day + ' ' + year;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d?.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data?.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) => {\n      this.mainMediaContainer.next(p.images?.PRIMARY ? p.images.PRIMARY : {});\n    })\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RouterState,\n  RoutingService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\nimport { ProductListRouteParams, SearchCriteria } from './product-list.model';\n\n/**\n * The `ProductListComponentService` is used to search products. The service is used\n * on the Product Listing Page, for listing products and the facet navigation.\n *\n * The service exposes the product search results based on the category and search\n * route parameters. The route parameters are used to query products by the help of\n * the `ProductSearchService`.\n */\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  /**\n   * @deprecated will be removed in version 3.0 as this is the\n   *   subscription is longer used\n   */\n  protected sub: Subscription;\n\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  /**\n   * Emits the search results for the current search query.\n   *\n   * The `searchResults$` is _not_ concerned with querying, it only observes the\n   * `productSearchService.getResults()`\n   */\n  protected searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  /**\n   * Observes the route and performs a search on each route change.\n   *\n   * Context changes, such as language and currencies are also taken\n   * into account, so that the search is performed again.\n   */\n  protected searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    ...this.siteContext,\n  ]).pipe(\n    map(([routerState, ..._context]) => (routerState as RouterState).state),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream is used for the Product Listing and Product Facets.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  /**\n   * Expose the `SearchCriteria`. The search criteria are driven by the route parameters.\n   *\n   * This search route configuration is not yet configurable\n   * (see https://github.com/SAP/spartacus/issues/7191).\n   */\n  protected getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  /**\n   * Resolves the search query from the given `ProductListRouteParams`.\n   */\n  protected getQueryFromRouteParams({\n    query,\n    categoryCode,\n    brandCode,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n\n    // TODO: drop support for brands as they should be treated\n    // similarly as any category.\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  /**\n   * Performs a search based on the given search criteria.\n   *\n   * The search is delegated to the `ProductSearchService`.\n   */\n  protected search(criteria: SearchCriteria): void {\n    const currentPage = criteria.currentPage;\n    const pageSize = criteria.pageSize;\n    const sortCode = criteria.sortCode;\n\n    this.productSearchService.search(\n      criteria.query,\n      // TODO: consider dropping this complex passing of cleaned object\n      Object.assign(\n        {},\n        currentPage && { currentPage },\n        pageSize && { pageSize },\n        sortCode && { sortCode }\n      )\n    );\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  /**\n   * Sort the search results by the given sort code.\n   */\n  sort(sortCode: string): void {\n    this.route({ sortCode });\n  }\n\n  /**\n   * Routes to the next product listing page, using the given `queryParams`. The\n   * `queryParams` support sorting, pagination and querying.\n   *\n   * The `queryParams` are delegated to the Angular router `NavigationExtras`.\n   */\n  protected route(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n\n  /**\n   * The site context is used to update the search query in case of a\n   * changing context. The context will typically influence the search data.\n   *\n   * We keep this private for now, as we're likely refactoring this in the next\n   * major version.\n   */\n  private get siteContext(): Observable<string>[] {\n    // TODO: we should refactor this so that custom context will be taken\n    // into account automatically. Ideally, we drop the specific context\n    // from the constructor, and query a ContextService for all contexts.\n\n    return [this.languageService.getActive(), this.currencyService.getActive()];\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  setQuery(query: string): void {\n    this.route({ query, currentPage: undefined });\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  viewPage(pageNumber: number): void {\n    this.route({ currentPage: pageNumber });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      (breadcrumb.facetValueCode === params.categoryCode ||\n        breadcrumb.facetValueCode === params.brandCode)\n    );\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    const topFacets =\n      facet.topValueCount > 0 ? facet.topValueCount : facet.values?.length || 0;\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: topFacets,\n          maxVisible: topFacets,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string): { [key: string]: string } {\n    return {\n      // to avoid encoding issues with facets that have space (' ') in their name,\n      // we replace the decoded '+' back to empty space ' '.\n      // For more, see https://github.com/SAP/spartacus/issues/7348\n      query: new HttpUrlEncodingCodec().decodeValue(query).replace(/\\+/g, ' '),\n    };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given _active_ facet when there\n   * the original facets is not available. This happens for non multi-valued facets.\n   *\n   * With this approach, the we keep the focus, either at the facet list or on the\n   * active facets.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return facetList.facets?.find((f) =>\n      f.values?.find((val) => val.name === facet.facetValueName)\n    )\n      ? ''\n      : facet.facetValueName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  private _isDialog: boolean;\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input()\n  set isDialog(value: boolean) {\n    this._isDialog = value;\n    if (value) {\n      this.renderer.addClass(document.body, 'modal-open');\n    }\n  }\n\n  get isDialog(): boolean {\n    return this._isDialog;\n  }\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  @HostListener('click') handleClick() {\n    this.close();\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef,\n    protected renderer: Renderer2\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.renderer.removeClass(document.body, 'modal-open');\n    this.closeList.emit(event);\n  }\n\n  block(event?: MouseEvent) {\n    event.stopPropagation();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n  StoreFinderConfig,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n  radius: number;\n  searchQuery: StoreFinderSearchQuery;\n  geolocation: GeoPoint;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    protected config: StoreFinderConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.radius = this.config.googleMaps.radius;\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule } from '../../../shared/index';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutConfigService } from '../../checkout/services/index';\n\n@Component({\n  selector: 'cx-login-register',\n  templateUrl: './login-register.component.html',\n})\nexport class LoginRegisterComponent implements OnInit {\n  loginAsGuest = false;\n\n  constructor(\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CheckoutModule,\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginRegisterComponent } from './login-register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    I18nModule,\n    CheckoutModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerRegisterComponent: {\n          component: LoginRegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginRegisterComponent],\n  entryComponents: [LoginRegisterComponent],\n  exports: [LoginRegisterComponent],\n})\nexport class LoginRegisterModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\nimport { LoginRegisterModule } from './login-register/login-register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LoginRegisterModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { Params } from '@angular/router';\nimport { PageContext } from '@spartacus/core';\n\n/**\n * Indicates that a user visited an arbitrary page.\n */\nexport class PageEvent {\n  context: PageContext;\n  semanticRoute?: string;\n  url: string;\n  params: Params;\n}\n\n/**\n * Indicates that a user visited the home page.\n */\nexport class HomePageEvent extends PageEvent {}\n","import { PageEvent } from '../page/page.events';\n\n/**\n * Indicates that a user visited a cart page.\n */\nexport class CartPageEvent extends PageEvent {}\n","import { Injectable } from '@angular/core';\nimport { ActionsSubject } from '@ngrx/store';\nimport { createFrom, EventService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PageEvent } from '../page/page.events';\nimport { CartPageEvent } from './cart-page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageEventBuilder {\n  constructor(\n    protected actions: ActionsSubject,\n    protected eventService: EventService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(CartPageEvent, this.buildCartPageEvent());\n  }\n\n  protected buildCartPageEvent(): Observable<CartPageEvent> {\n    return this.eventService.get(PageEvent).pipe(\n      filter((pageEvent) => pageEvent.semanticRoute === 'cart'),\n      map((pageEvent) => createFrom(CartPageEvent, pageEvent))\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartPageEventBuilder } from './cart-page-event.builder';\n\n@NgModule({})\nexport class CartPageEventModule {\n  constructor(_cartPageEventBuilder: CartPageEventBuilder) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { RouterNavigatedAction, ROUTER_NAVIGATED } from '@ngrx/router-store';\nimport { ActionsSubject } from '@ngrx/store';\nimport {\n  ActivatedRouterStateSnapshot,\n  createFrom,\n  EventService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { HomePageEvent, PageEvent } from './page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageEventBuilder {\n  constructor(\n    protected actions: ActionsSubject,\n    protected eventService: EventService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(PageEvent, this.buildPageEvent());\n    this.eventService.register(HomePageEvent, this.buildHomePageEvent());\n  }\n\n  protected buildPageEvent(): Observable<PageEvent> {\n    return this.getNavigatedEvent().pipe(\n      map((state) =>\n        createFrom(PageEvent, {\n          context: state.context,\n          semanticRoute: state.semanticRoute,\n          url: state.url,\n          params: state.params,\n        })\n      )\n    );\n  }\n\n  protected buildHomePageEvent(): Observable<HomePageEvent> {\n    return this.buildPageEvent().pipe(\n      filter((pageEvent) => pageEvent.semanticRoute === 'home'),\n      map((pageEvent) => createFrom(HomePageEvent, pageEvent))\n    );\n  }\n\n  private getNavigatedEvent(): Observable<ActivatedRouterStateSnapshot> {\n    return this.actions.pipe(\n      ofType<RouterNavigatedAction<ActivatedRouterStateSnapshot>>(\n        ROUTER_NAVIGATED\n      ),\n      map((event) => event.payload.routerState)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageEventBuilder } from './page-event.builder';\n\n@NgModule({})\nexport class PageEventModule {\n  constructor(_pageEventBuilder: PageEventBuilder) {}\n}\n","import { Category, Price } from '@spartacus/core';\nimport { PageEvent } from '../page/page.events';\n\n/**\n * Indicates that a user visited a product details page.\n */\nexport class ProductDetailsPageEvent extends PageEvent {\n  categories?: Category[];\n  code?: string;\n  name?: string;\n  price?: Price;\n}\n\n/**\n * Indicates that a user visited a category page.\n */\nexport class CategoryPageResultsEvent extends PageEvent {\n  categoryCode: string;\n  categoryName?: string;\n  numberOfResults: Number;\n}\n\n/**\n * Indicates that the a user visited the search results page,\n * and that the search results have been retrieved.\n */\nexport class SearchPageResultsEvent extends PageEvent {\n  searchTerm: string;\n  numberOfResults: Number;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  createFrom,\n  EventService,\n  ProductSearchService,\n  ProductService,\n} from '@spartacus/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { filter, map, skip, switchMap, take } from 'rxjs/operators';\nimport { PageEvent } from '../page/page.events';\nimport {\n  CategoryPageResultsEvent,\n  ProductDetailsPageEvent,\n  SearchPageResultsEvent,\n} from './product-page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageEventBuilder {\n  constructor(\n    protected eventService: EventService,\n    protected productService: ProductService,\n    protected productSearchService: ProductSearchService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(\n      SearchPageResultsEvent,\n      this.buildSearchPageResultsEvent()\n    );\n    this.eventService.register(\n      ProductDetailsPageEvent,\n      this.buildProductDetailsPageEvent()\n    );\n    this.eventService.register(\n      CategoryPageResultsEvent,\n      this.buildCategoryResultsPageEvent()\n    );\n  }\n\n  protected buildProductDetailsPageEvent(): Observable<\n    ProductDetailsPageEvent\n  > {\n    return this.eventService.get(PageEvent).pipe(\n      filter((pageEvent) => pageEvent.semanticRoute === 'product'),\n      switchMap((pageEvent) =>\n        this.productService.get(pageEvent.context.id).pipe(\n          filter((product) => Boolean(product)),\n          take(1),\n          map((product) =>\n            createFrom(ProductDetailsPageEvent, {\n              ...pageEvent,\n              categories: product.categories,\n              code: product.code,\n              name: product.name,\n              price: product.price,\n            })\n          )\n        )\n      )\n    );\n  }\n\n  protected buildCategoryResultsPageEvent(): Observable<\n    CategoryPageResultsEvent\n  > {\n    const searchResults$ = this.productSearchService.getResults().pipe(\n      // skipping the initial value, and preventing emission of the previous search state\n      skip(1)\n    );\n\n    return this.eventService.get(PageEvent).pipe(\n      switchMap((pageEvent) => {\n        if (pageEvent?.semanticRoute !== 'category') {\n          return EMPTY;\n        }\n\n        return searchResults$.pipe(\n          map((searchResults) => ({\n            ...pageEvent,\n            ...{\n              categoryCode: pageEvent?.context?.id,\n              numberOfResults: searchResults?.pagination?.totalResults,\n              categoryName: searchResults.breadcrumbs?.[0].facetValueName,\n            },\n          })),\n          map((categoryPage) =>\n            createFrom(CategoryPageResultsEvent, categoryPage)\n          )\n        );\n      })\n    );\n  }\n\n  protected buildSearchPageResultsEvent(): Observable<SearchPageResultsEvent> {\n    const searchResults$ = this.productSearchService.getResults().pipe(\n      // skipping the initial value, and preventing emission of the previous search state\n      skip(1)\n    );\n\n    return this.eventService.get(PageEvent).pipe(\n      switchMap((pageEvent) => {\n        if (pageEvent?.semanticRoute !== 'search') {\n          return EMPTY;\n        }\n\n        return searchResults$.pipe(\n          map((searchResults) => ({\n            ...pageEvent,\n            ...{\n              searchTerm: searchResults?.freeTextSearch,\n              numberOfResults: searchResults?.pagination?.totalResults,\n            },\n          })),\n          map((searchPage) => createFrom(SearchPageResultsEvent, searchPage))\n        );\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ProductPageEventBuilder } from './product-page-event.builder';\n\n@NgModule({})\nexport class ProductPageEventModule {\n  constructor(_productPageEventBuilder: ProductPageEventBuilder) {}\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2bLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        // 'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n  },\n};\n","import { OccConfig } from '@spartacus/core';\n\nexport const defaultB2bOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        user: 'orgUsers/${userId}',\n        addEntries: 'orgUsers/${userId}/carts/${cartId}/entries',\n        setDeliveryAddress:\n          'orgUsers/${userId}/carts/${cartId}/addresses/delivery',\n        placeOrder: 'orgUsers/${userId}/orders?termsChecked=true',\n      },\n    },\n  },\n};\n","import {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../../cms-components/checkout/config/checkout-config';\nimport { CheckoutStepType } from '../../cms-components/checkout/model/checkout-step.model';\n\nexport const defaultB2bCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'paymentType',\n        name: 'checkoutProgress.methodOfPayment',\n        routeName: 'checkoutPaymentType',\n        type: [CheckoutStepType.PAYMENT_TYPE],\n      },\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport { CartPageEventModule } from './cart/cart-page-event.module';\nimport { PageEventModule } from './page/page-event.module';\nimport { ProductPageEventModule } from './product/product-page-event.module';\n\n@NgModule({\n  imports: [CartPageEventModule, PageEventModule, ProductPageEventModule],\n})\nexport class EventsModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { EventsModule } from '../events/events.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n    EventsModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n  OrganizationModule,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport {\n  b2bLayoutConfig,\n  defaultB2bOccConfig,\n  defaultB2bCheckoutConfig,\n  mediaConfig,\n} from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    OrganizationModule.forRoot(),\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2bLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfig(defaultB2bOccConfig),\n    provideDefaultConfig(defaultB2bCheckoutConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2bStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2bStorefrontModule> {\n    return {\n      ngModule: B2bStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}