{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","HEART","EMPTY_HEART","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","map","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","changeDetection","ChangeDetectionStrategy","OnPush","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","subscription","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","increment","preventDefault","stopPropagation","onBlur","focus","onFocus","setFocus","registerOnTouched","fn","registerOnChange","updatedQuantity","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","ViewChild","static","OnlyNumberDirective","hostElement","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","Directive","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","get","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","BehaviorSubject","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","load","filter","switchMap","qsi","isDataLoaded","dataLoaded","API","unload","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","cmsComponents","component","entryComponents","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","item","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","ViewConfigModule","forRoot","ngModule","provideConfig","view","ViewConfig","AutoFocusDirective","ngAfterViewInit","AutoFocusDirectiveModule","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","FeaturesConfigModule","CmsMappingService","platformId","isComponentEnabled","flexType","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","componentType","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsConfig","Inject","PLATFORM_ID","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","state","canActivateObservables","guardClass","canActivate","isCanActivate","isObservable","obj","then","Promise","resolve","wrapIntoObservable","first","Error","skipWhile","endWith","CmsI18nService","translation","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationService","TranslationChunkService","PAGE_LAYOUT_HANDLER","InjectionToken","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","section","page$","breakpoint$","pageTemplate","slots","resolveSlots","result","_c","_d","handle","a","getSlotConfig","pageSlots_1","keys","slot","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","join","cacheKey","warn","CmsService","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","name","styleClass","slots$","cls","currentClass","removeClass","addClass","CmsRoutesService","router","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","path","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","Router","CmsPageGuard","routingService","cmsService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","withLatestFrom","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","RoutingService","SemanticPathService","ProtectedRoutesGuard","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","OutletPosition","store","stacked","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","OutletDirective","vcr","_context","renderOutlet","cxOutlet","isArray","tmplOrFactory","ComponentFactory","createComponent","createEmbeddedView","$implicit","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","split","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","DOCUMENT","CxApiService","auth","cart","cartData","checkout","checkoutDelivery","checkoutPayment","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","ngZone","AuthService","CartService","CartDataService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","NgZone","ComponentWrapperDirective","componentMapper","dynamicAttributeService","shouldRenderComponent","cxComponentWrapper","launchWebComponent","launchComponent","cmpRef","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","element","parentElement","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","addComponentClass","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","title","description","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","JSON","stringify","scriptElement","getElementById","createRenderer","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","sanitizer","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","DomSanitizer","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","stock","stockLevelStatus","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","Date","datePublished","getFullYear","getMonth","getDate","headline","reviewRating","toString","CurrentProductService","productService","features","PRODUCT_SCOPE","isLevel","getProduct","getRouterState","params","productCode","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","AsmComponentService","authService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","encapsulation","ViewEncapsulation","None","AsmEnablerService","isUiAdded","isEnabled","addUi","isLaunched","isUsedBefore","setItem","getItem","Location","AsmLoaderModule","asmFactory","asmEnablerService","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","markForCheck","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","seconds","slice","Pipe","CSAgentLoginFormComponent","fb","submitClicked","csAgentTokenLoading","submitEvent","group","Validators","required","onSubmit","controls","isNotValid","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","host","(document:click)","AsmService","AsmModule","AsmCoreModule","AddedToCartDialogComponent","cartService","modalIsOpen","quantity","entry$","entry","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","updateEntry","entryNumber","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","setStockInfo","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","isReadOnly","vouchers","sort","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","cartId","OCC_USER_ID_ANONYMOUS","guid","cartIsLoading$","resetAddVoucherProcessingState","couponCode","submitDisabled$","valid","getAddVoucherResultLoading","btnEnabled","addVoucherIsLoading","getAddVoucherResultSuccess","success","onSuccess","reset","applyVoucher","addVoucher","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","potentialProductPromotions","_items","getPotentialProductPromotionsForItem","entryPromotions","promotion","consumedEntries","_e","e_2","_f","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entries","CartItemComponent","compact","isProductOutOfStock","updateItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","isEmpty","totalItems","CartPageLayoutHandler","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","isUserLoggedIn","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","steps","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","snapshot","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","year","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","getCardIcon","msg","field","cardLabels","img","actions","header","goNext","goPrevious","paymentMethodSelected","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","layoutModules","LayoutModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","onError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentStatus","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","moduleComponents","ɵ1","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","queryParams","isPasswordReset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","sortMapping","byNameAsc","byNameDesc","sortOptions","interests$","getAndLoadProductInterests","interests","count","totalResults","totalCount","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","sortLabels","removeInterest","relation","removeProdutInterest","productInterestEntry","sortChange","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","child","loadNavigationItems","node","populateLink","itemType","linkName","getLink","categoryCode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","submit","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","active","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","isActive","thumbnail","zoom","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","Grid","List","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","ViewModes","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","ProductGridItemComponent","ProductListItemComponent","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","changes","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","history","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","ɵ0$2","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                consent.consentState == null ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","export enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, (T)[]>();\n  private templatesRefsBefore = new Map<string, (T)[]>();\n  private templatesRefsAfter = new Map<string, (T)[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  private store(store: Map<string, (T)[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import {\n  ComponentFactory,\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >\n  ) {}\n\n  ngOnInit(): void {\n    this.renderOutlet(OutletPosition.BEFORE);\n    this.renderOutlet(OutletPosition.REPLACE);\n    this.renderOutlet(OutletPosition.AFTER);\n  }\n\n  private renderOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach(obj => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      this.vcr.createEmbeddedView(<TemplateRef<any>>tmplOrFactory, {\n        $implicit: this._context,\n      });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n  UserNotificationPreferenceService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = JSON.stringify(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const html = `<script type=\"application/ld+json\">${JSON.stringify(\n        schema\n      )}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  FeatureConfigService,\n  Product,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ['details'] : '';\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) =>\n        this.productService.get(productCode, this.PRODUCT_SCOPE)\n      )\n    );\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Location } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { OutletPosition, OutletService } from '../../../cms-structure/index';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\nimport { AsmMainUiComponent } from '../asm-main-ui/asm-main-ui.component';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  /** indicates whether the ASM UI has been added already */\n  private isUiAdded = false;\n\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletService: OutletService<ComponentFactory<any>>\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  private isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  private isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  private isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  private addUi(): void {\n    if (this.isUiAdded) {\n      return;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      AsmMainUiComponent\n    );\n    this.outletService.add('cx-storefront', factory, OutletPosition.BEFORE);\n    this.isUiAdded = true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/index';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList', { static: false }) resultList: ElementRef;\n  @ViewChild('searchTerm', { static: false }) searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  modalIsOpen = false;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n          if (!this.modalIsOpen) {\n            this.modalIsOpen = true;\n          }\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  CartVoucherService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  submitDisabled$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n\n  private subscription = new Subscription();\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = combineLatest([\n      this.cartService.getActive(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(\n        ([cart, userId]: [Cart, string]) =>\n          (this.cartId =\n            userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n      ),\n      map(([cart]: [Cart, string]) => cart)\n    );\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.submitDisabled$ = combineLatest([\n      this.cartIsLoading$,\n      this.form.valueChanges.pipe(\n        startWith(true),\n        map(() => this.form.valid)\n      ),\n      this.cartVoucherService.getAddVoucherResultLoading(),\n    ]).pipe(\n      map(\n        ([cartIsLoading, btnEnabled, addVoucherIsLoading]) =>\n          cartIsLoading || !btnEnabled || addVoucherIsLoading\n      )\n    );\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  applyVoucher(): void {\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  set items(_items) {\n    this._items = _items;\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  private _items: Item[] = [];\n\n  get items(): Item[] {\n    return this._items;\n  }\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  // TODO remove for 2.0 - left to keep backward compatibility\n  ngOnInit(): void {}\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.cartService.getActive(),\n      this.cartService.getLoaded(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter(product => Boolean(product)),\n    tap(product => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter(wishlist => Boolean(wishlist)),\n    map(wishList => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find(entry => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n    I18nModule,\n    IconModule,\n    RouterModule,\n    UrlModule,\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n  CartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/index';\nimport { CheckoutStepType } from '../../model/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/index';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletModule, OutletRefModule } from '../../cms-structure/index';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    RouterModule.forChild([\n      {\n        path: 'guest/order/:orderCode',\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap(preferences => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach(p => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [\n    CommonModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          interests =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map(interest => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map(result => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, 'details');\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n  AuthGuard,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach(child =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map(child => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  FeatureConfigService,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? 'list' : '';\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes =>\n      codes.map(code => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    map(p => p.code),\n    distinctUntilChanged(),\n    switchMap(productCode => this.reviewService.getByProductCode(productCode)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe(success => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(interests => !!interests.results && interests.results.length === 1)\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap(prefs => (this.enabledPrefs = prefs)),\n        map(prefs => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe(error => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe(success => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe(text =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    I18nModule,\n    SpinnerModule,\n    UrlModule,\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template.description,\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}