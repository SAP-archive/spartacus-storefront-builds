{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/components/form-components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/form-components/form-components.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","Injectable","args","providedIn","NgbModal","CurrentProductService","routingService","productService","getProduct","_this","getRouterState","pipe","map","state","params","filter","productCode","switchMap","get","RoutingService","ProductService","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","staticStyleClasses","undefined","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","AddedToCartDialogComponent","modalService","cartService","fb","iconTypes","ICON_TYPE","quantity","firstUpdate","form","group","ngOnInit","entry$","tap","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","showItemIncrLabel","dismissModal","removeEntry","item","updateEntry","_a","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","static","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","Boolean","subscribe","stock","stockLevelStatus","stockLevel","maxQuantity","markForCheck","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","size","componentInstance","cart$","getActive","loaded$","getLoaded","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getSize","itemWidth","fromEvent","nativeWindow","clientWidth","startWith","debounceTime","totalWidth","Math","round","distinctUntilChanged","CarouselComponent","el","service","minItemPixelSize","indicatorIcon","previousIcon","nextIcon","activeSlide","size$","select","slide","xs","sm","md","lg","xl","LayoutConfig","ServerConfig","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","breakpoint","breakpoints","window","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","MediaService","breakpointService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","OnlyNumberDirective","renderer","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","preventDefault","onKeyUp","onKeyDown","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","setProperty","keyCode","String","fromCharCode","Renderer2","HostListener","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","input","handlers","ArrowDown","decrement","ArrowUp","increment","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","FormComponentsModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","floor","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","GlobalMessageModule","forRoot","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","items","getContext","ctx","itemsCopy","items_1","tslib_1.__values","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","take","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","cmsComponents","CMSSiteContextComponent","component","useClass","deps","SiteContextModule","entryComponents","StarRatingComponent","change","initialRate","setRate","rating","force","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","invalid","touched","dirty","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","forEach","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","_b","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialOrderPromotions","appliedOrderPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","skipWhile","isEmpty","go","cxRoute","CartPageLayoutHandler","handle","slots$","pageTemplate","section","combineLatest","slots","totalItems","slot","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartModule","PAGE_LAYOUT_HANDLER","InjectionToken","CartComponentModule","CheckoutConfigService","checkoutConfig","routingConfigService","steps","checkout","getCheckoutStep","currentStepType","getCheckoutStepIndex","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","routeName","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","id","name","CheckoutStepType","CheckoutGuard","router","parseUrl","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","AuthGuard","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ShippingAddressSetGuard","checkoutDetailsService","checkoutConfigService","serverConfig","checkoutStep","production","console","warn","deliveryAddress","keys","DeliveryModeComponent","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","changedOption","supportedDeliveryModes$","getSupportedDeliveryModes","selectedDeliveryMode$","getSelectedDeliveryMode","loadSupportedDeliveryModes","deliveryMode","currentDeliveryModeId","changeMode","setDeliveryMode","deliveryModeSub","back","ngOnDestroy","unsubscribe","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","countrySelected","country","billingAddress","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","userPaymentService","months","years","sameAsShippingAddress","goBack","closeForm","addPaymentInfo","payment","defaultPayment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","add","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","address","getAddressCardContent","region","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","UserPaymentService","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","isLoading$","getPaymentMethodsLoading","loadPaymentMethods","existingPaymentMethods$","getPaymentMethods","getPaymentDetailsSub","paymentInfo","field","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","title","img","getCardIcon","actions","header","paymentMethodSelected","showNewPaymentForm","hideNewPaymentForm","newPayment","addNewPaymentMethod","getDeliveryAddressSub","createPaymentDetails","setPaymentDetails","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","userAddressService","deliveryAddress$","paymentDetails$","deliveryMode$","selected","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","UserAddressService","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","selectedCountry$","BehaviorSubject","showCancelBtn","submitAddress","backToAddress","defaultAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","regions$","getRegions","regions","regionControl","errors","some","subject","addressData","patchValue","regionSelected","titleSelected","toggleDefaultAddress","AddressFormModule","ShippingAddressComponent","newAddressFormManuallyOpened","cards","selectedAddress$","goTo","getAddressesLoading","existingAddresses$","getAddresses","cards$","asObservable","addresses","textDefaultShippingAddress","textShipToThisAddress","loadDetails","loadAddresses","setAddressSub","setAddress","goNext","selectedAddressSub","addressSelected","addAddress","newAddress","createAndSetAddress","setDeliveryAddress","addNewAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","CustomFormValidators","emailDomainValidator","control","match","InvalidEmail","emailValidator","passwordValidator","InvalidPassword","LoginFormComponent","auth","authRedirectService","userId","password","login","authorize","sub","getUserToken","access_token","redirect","AuthService","AuthRedirectService","LoginFormModule","UserModule","ReturningCustomerLoginComponent","NotAuthGuard","LoginComponent","user$","token","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","detectChanges","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cxApi","CxApiService","getCmsDataForComponent","element","parentElement","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","removeChild","CmsService","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","LoginModule","LogoutGuard","cms","routing","semanticPathService","logout","hasPage","PageType","CONTENT_PAGE","SemanticPathService","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","ɵ0","LogoutModule","forChild","RegisterComponent","userRegistrationForm","email","passwordconf","newsletter","termsandconditions","requiredTrue","validator","matchPassword","submit","userRegisterFormData","register","subscription","globalMessageEntities","message","ac","NotEqual","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","obj","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","componentRoutes","updateRouting","navigateByUrl","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","getNextPageContext","withLatestFrom","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","hasNotFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","useFactory","APP_INITIALIZER","cmsRoute","addCmsRoute","ɵ0$1","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","htmlLangProvider","setHtmlLangAttribute","LanguageService","languageService","lang","documentElement","initSeoService","SeoModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenu","MainModule","layoutModules","LayoutModule","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","authService","translationService","Subscription","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","success","onSuccess","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentChanged","consentGiven","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","onConsentChange","given","ConsentManagementComponent","userConsentService","subscriptions","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","getConsents","templateList","consentsExists","loadConsents","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","giveConsent","version","withdrawConsent","UserConsentService","ConsentManagementModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","UserOrderService","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","moduleComponents","OrderDetailsModule","ɵ0$2","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","sort","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","userServiceSub","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","queryParams","isPasswordReset","reset","resetPassword","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","isNotValid","onSubmit","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitClicked","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","user","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","breadcrumbs","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","transform","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","flyout","isOpen","openNodes","NavigationEnd","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","getDepth","depth","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","query","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","className","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","trim","Pipe","SearchBoxModule","ProductModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationThankYouMessageComponent","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationTotalsComponent","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","price","images","PRIMARY","ProductReferenceService","ProductCarouselComponent","items$","productCodes","codes","products$","ProductCarouselModule","ProductReferencesComponent","current","productCode$","productReferenceTypes","JSON","parse","displayProductTitles","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","querySelector","click","h3Elements","h3Element","innerHTML","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","ViewModes","ProductListComponent","productSearchService","searchConfig","gridMode$","createOptionsByUrlParams","brandCode","newConfig","itemPerPage","updateParams$","model$","searchResult","getCategoryTitle","categoryTitle","facetValueName","totalResults","viewPage","pageNumber","setGridMode","ProductSearchService","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","facets","facet","visible","activeFacetValueCode","searchResult$","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","CmsModule","ProductAttributesComponent","ProductReviewsComponent","reviewService","isWritingReview","initialMaxListItems","reviews$","getByProductCode","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","review","headline","comment","alias","reviewerName","ProductReviewService","ProductReviewsModule","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductSpecsTabComponent","ProductReviewsTabComponent","ProductImagesComponent","_imageContainer$","imageContainer$","showImage","imageContainer","startWaiting","isMainImageContainer","currentContainer","zoom","clearWaitList","waiting","ProductImagesModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$1","pageLabel","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","forgotPassword","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","brand","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","provideConfigFromMetaTags","StorefrontModule","ngModule","provideConfig","SmartEditModule","PersonalizationModule","OccModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductService, RoutingService, Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(productCode => !!productCode),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n\n  quantity = 0;\n  firstUpdate = true;\n  showItemIncrLabel: boolean;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n\n          // Announce in header if Add To Cart button has incremented product\n          this.showItemIncrLabel = this.firstUpdate && entry.quantity > 1;\n          // Any updates after the first will be flagged as false\n          this.firstUpdate = false;\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit {\n  @Input() productCode: string;\n\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.hasStock = true;\n    } else {\n      this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe(product => {\n          this.productCode = product.code;\n\n          if (\n            product.stock &&\n            product.stock.stockLevelStatus !== 'outOfStock' &&\n            product.stock.stockLevel > 0\n          ) {\n            this.maxQuantity = product.stock.stockLevel;\n            this.hasStock = true;\n          } else {\n            this.hasStock = false;\n          }\n\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    this.openModal();\n    this.cartService.addEntry(this.productCode, this.quantity);\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss'],\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items shown in the carousel is calculated dividing\n   * the host element width with the minimum item width.\n   */\n  getSize(nativeElement: HTMLElement, itemWidth: number) {\n    return fromEvent(this.winRef.nativeWindow, 'resize').pipe(\n      map(_ => (nativeElement as HTMLElement).clientWidth),\n      startWith((nativeElement as HTMLElement).clientWidth),\n      debounceTime(100),\n      map((totalWidth: any) => {\n        return Math.round(totalWidth / itemWidth);\n      }),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselItem } from './carousel.model';\nimport { CarouselService } from './carousel.service';\n\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n})\nexport class CarouselComponent implements OnInit {\n  @Input() title: string;\n\n  @Input() items: CarouselItem[];\n\n  /**\n   * Specifies the min pixel used per product. This value is used\n   * to calculate the amount of items we can fit into the available with\n   * of the host element. The number of items is not related the breakpoints,\n   * which means that a carousel can be placed in different layouts,\n   * regardless of the overall size.\n   */\n  @Input() minItemPixelSize = 300;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  /**\n   * The group with items which is currently active.\n   */\n  activeSlide = 0;\n\n  /**\n   * The number of items that should be rendered in the carousel.\n   */\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    this.size$ = this.service.getSize(\n      this.el.nativeElement,\n      this.minItemPixelSize\n    );\n  }\n\n  select(slide: number) {\n    this.activeSlide = slide;\n  }\n}\n","import { ServerConfig } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig extends ServerConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    if (e.key) {\n      return e.key;\n    } else {\n      // for old browsers\n      if (e.keyCode && String.fromCharCode) {\n        switch (e.keyCode) {\n          case 8:\n            return 'Backspace';\n          case 9:\n            return 'Tab';\n          case 27:\n            return 'Escape';\n          case 37:\n            return 'ArrowLeft';\n          case 39:\n            return 'ArrowRight';\n          default:\n            return String.fromCharCode(e.keyCode);\n        }\n      }\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.inputValue.valueChanges.pipe(debounceTime(300)).subscribe(value => {\n      if (value) {\n        this.manualChange(Number(value));\n      }\n    });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { OnlyNumberDirective } from '../../directives/only-number/only-number.directive';\nimport { ItemCounterComponent } from './item-counter/item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent, OnlyNumberDirective],\n  exports: [ItemCounterComponent],\n})\nexport class FormComponentsModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n  styleUrls: ['./global-message.component.scss'],\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { GlobalMessageModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    IconModule,\n    I18nModule,\n    GlobalMessageModule.forRoot(),\n  ],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"LANGUAGE\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"CURRENCY\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map(ctx => this.getInjectedService(ctx)),\n      filter(Boolean)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(map(data => data.context));\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.el.nativeElement.style.setProperty(\n        '--star-fill',\n        value || this.initialRate\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Checks is the `formControlName` field valid in the provided `form`.\n   *\n   * If it's NOT valid, the method returns `true`.\n   *\n   * @param form a form whose field to check\n   * @param formControlName a field name\n   * @param submitted is the form submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    return (\n      form.get(formControlName).invalid &&\n      (submitted ||\n        (form.get(formControlName).touched && form.get(formControlName).dirty))\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { FormComponentsModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    FormComponentsModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { FormComponentsModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    FormComponentsModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\nimport { CartService, Cart, OrderEntry } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): Cart[] {\n    const potentialPromotions = cart.potentialOrderPromotions || [];\n    const appliedPromotions = cart.appliedOrderPromotions || [];\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { skipWhile, map, switchMap } from 'rxjs/operators';\n\nimport { CartService, RoutingService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getLoaded().pipe(\n      skipWhile(loaded => !loaded),\n      switchMap(() => this.cartService.getActive()),\n      map(cart => {\n        if (this.cartService.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n}\n","import { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest(slots$, this.cartService.getActive()).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService\n    .getActive()\n    .pipe(map(cart => cart.deliveryItemsQuantity || 0));\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CartModule,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\n\n@NgModule({\n  imports: [\n    CartModule,\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n  ],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n  ],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useClass: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    steps: Array<CheckoutStep>;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { CheckoutConfig } from './config/checkout-config';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutStep, CheckoutStepType } from './model/checkout-step.model';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable()\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute) {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  private getStepUrlFromActivatedRoute(activatedRoute: ActivatedRoute) {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string) {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutConfig } from './checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\n\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { Observable, of } from 'rxjs';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.config.checkout.steps[0].routeName\n        ).paths[0]\n      )\n    );\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AuthGuard, CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  PaymentDetails,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n  filter,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => cartData.code),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ServerConfig, Address, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.SHIPPING_ADDRESS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\nimport {\n  DeliveryMode,\n  CheckoutDeliveryService,\n  RoutingService,\n} from '@spartacus/core';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  changedOption: boolean;\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.changedOption = false;\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n    this.selectedDeliveryMode$ = this.checkoutDeliveryService.getSelectedDeliveryMode();\n\n    this.checkoutDeliveryService.loadSupportedDeliveryModes();\n\n    this.selectedDeliveryMode$\n      .pipe(\n        map((deliveryMode: DeliveryMode) =>\n          deliveryMode && deliveryMode.code ? deliveryMode.code : null\n        )\n      )\n      .subscribe(code => {\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          this.currentDeliveryModeId = code;\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.changedOption = true;\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    if (this.changedOption) {\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n\n    this.deliveryModeSub = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .subscribe(data => {\n        if (data && data.code === this.currentDeliveryModeId) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n      });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, ShippingAddressSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { ServerConfig, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.DELIVERY_MODE\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Country } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent {\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutPaymentService,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  addPaymentInfo = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    country: this.fb.group({\n      isocode: ['', Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest(this.countries$, this.shippingAddress$).pipe(\n      map(([countries, address]) => {\n        return !!countries.filter(\n          (country: Country): boolean =>\n            country.isocode === address.country.isocode\n        ).length;\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.addPaymentInfo.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n\n  private getPaymentDetailsSub: Subscription;\n  private getDeliveryAddressSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          paymentInfo => paymentInfo && Object.keys(paymentInfo).length !== 0\n        )\n      )\n      .subscribe(paymentInfo => {\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.globalMessageService.add(\n                {\n                  key: 'paymentMethods.invalidField',\n                  params: { field: paymentInfo[key] },\n                },\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          const card: Card = {\n            title: payment.defaultPayment ? textDefaultPaymentMethod : '',\n            textBold: payment.accountHolderName,\n            text: [payment.cardNumber, textExpires],\n            img: this.getCardIcon(payment.cardType.code),\n            actions: [{ name: textUseThisPayment, event: 'send' }],\n          };\n          if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n            card.header = textSelected;\n          }\n          return card;\n        }\n      )\n    );\n  }\n\n  paymentMethodSelected(paymentDetails: PaymentDetails) {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  next(): void {\n    this.addPaymentInfo({\n      payment: this.selectedPayment,\n      newPayment: false,\n    });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  addNewPaymentMethod({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress: Address;\n  }): void {\n    this.getDeliveryAddressSub = this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        billingAddress = address;\n      });\n    this.addPaymentInfo({\n      payment: paymentDetails,\n      billingAddress,\n      newPayment: true,\n    });\n  }\n\n  addPaymentInfo({\n    newPayment,\n    payment,\n    billingAddress,\n  }: {\n    newPayment: boolean;\n    payment: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    payment.billingAddress = billingAddress\n      ? billingAddress\n      : this.deliveryAddress;\n\n    if (newPayment) {\n      this.checkoutPaymentService.createPaymentDetails(payment);\n      this.checkoutService.clearCheckoutStep(3);\n    }\n\n    // if the selected payment is the same as the cart's one\n    if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n      this.checkoutPaymentService.setPaymentDetails(payment);\n      this.checkoutService.clearCheckoutStep(3);\n    }\n\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .subscribe(data => {\n        if (data.accountHolderName && data.cardNumber) {\n          this.routingService.go(this.checkoutStepUrlNext);\n\n          return;\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n    if (this.getDeliveryAddressSub) {\n      this.getDeliveryAddressSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CheckoutModule,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ServerConfig, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.PAYMENT_DETAILS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\n\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    this.checkoutDeliveryService.verifyAddress(this.address.value);\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent],\n})\nexport class AddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../checkout-config.service';\nimport { CheckoutStepType } from '../../model/checkout-step.model';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  cards: Card[] = [];\n  isLoading$: Observable<boolean>;\n  selectedAddress: Address;\n  goTo: CheckoutStepType;\n  setAddress: Address;\n  setAddressSub: Subscription;\n  selectedAddressSub: Subscription;\n  selectedAddress$: BehaviorSubject<Address> = new BehaviorSubject<Address>(\n    null\n  );\n  cards$: Observable<CardWithAddress[]>;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.cards$ = combineLatest(\n      this.existingAddresses$,\n      this.selectedAddress$.asObservable(),\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected')\n    ).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    this.cartService.loadDetails();\n    this.userAddressService.loadAddresses();\n\n    this.setAddressSub = this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        this.setAddress = address;\n        this.selectedAddress$.next(address);\n        if (this.goTo) {\n          this.goNext();\n          this.goTo = null;\n        }\n      });\n    this.selectedAddressSub = this.selectedAddress$.subscribe(address => {\n      this.selectedAddress = address;\n    });\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n    const card: Card = {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n\n    this.cards.push(card);\n\n    return card;\n  }\n\n  addressSelected(address: Address): void {\n    this.selectedAddress$.next(address);\n  }\n\n  next(): void {\n    this.addAddress({ address: this.selectedAddress, newAddress: false });\n  }\n\n  addAddress({\n    newAddress,\n    address,\n  }: {\n    newAddress: boolean;\n    address: Address;\n  }): void {\n    if (newAddress) {\n      this.checkoutDeliveryService.createAndSetAddress(address);\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      return;\n    }\n    if (\n      this.setAddress &&\n      this.selectedAddress &&\n      this.setAddress.id === this.selectedAddress.id\n    ) {\n      this.goNext();\n    } else {\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      this.checkoutDeliveryService.setDeliveryAddress(address);\n    }\n  }\n\n  addNewAddress(address: Address): void {\n    this.addAddress({ address, newAddress: true });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goBack: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goBack) {\n      this.back();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutModule } from '@spartacus/core';\nimport { CartComponentModule } from '../cart/cart.module';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartComponentModule,\n    CheckoutModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n  // @todo: should we keep below provider here?\n  providers: [CheckoutConfigService],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(\n      // Email Standard RFC 5322:\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ // tslint:disable-line\n    )\n      ? null\n      : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(\n      '^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_+{};:.,]).{6,}$'\n    )\n      ? null\n      : { InvalidPassword: true };\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n  }\n\n  login(): void {\n    this.auth.authorize(\n      this.form.controls.userId.value,\n      this.form.controls.password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import {\n  Injectable,\n  ComponentFactoryResolver,\n  Inject,\n  Renderer2,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        script = renderer.createElement('script');\n        this.loadedWebComponents[path] = script;\n        script.setAttribute('src', path);\n        renderer.appendChild(this.document.body, script);\n\n        if (isPlatformBrowser(this.platform)) {\n          script.onload = () => {\n            script.onload = null;\n          };\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  CxApiService,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private cd: ChangeDetectorRef,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      this.cd.detectChanges();\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: this.getCmsDataForComponent(),\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.renderer.removeChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PAGE_LAYOUT_HANDLER, PageLayoutHandler } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest(this.page$, this.breakpointService.breakpoint$).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      return config.slots;\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(Boolean));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (this.config.production) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  Title,\n  UserSignUp,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  subscription: Subscription;\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: [false],\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private auth: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n  }\n\n  submit(): void {\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      titleCode,\n    } = this.userRegistrationForm.value;\n    const userRegisterFormData: UserSignUp = {\n      firstName,\n      lastName,\n      uid: email,\n      password,\n      titleCode,\n    };\n    this.userService.register(userRegisterFormData);\n\n    if (!this.subscription) {\n      this.subscription = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.globalMessageService\n      .get()\n      .pipe(filter(data => Object.keys(data).length > 0))\n      .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n        if (\n          globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR].some(\n            message => message === 'This field is required.'\n          )\n        ) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.globalMessageService.add(\n            { key: 'register.titleRequired' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  private matchPassword(ac: AbstractControl): { NotEqual: boolean } {\n    if (ac.get('password').value !== ac.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule, UserModule } from '@spartacus/core';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(pageContext: PageContext, routes: Route[]): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageContext.id.startsWith('/') &&\n      pageContext.id.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageContext.id.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: pageContext,\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  PageContext,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\n\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    private routingService: RoutingService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.hasPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([hasPage, pageContext]) =>\n        hasPage\n          ? this.resolveCmsPageLogic(pageContext, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageContext.id)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.hasPage(notFoundCmsPageContext).pipe(\n      switchMap(hasNotFoundPage => {\n        if (hasNotFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() => this.resolveCmsPageLogic(pageContext, route, state))\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { ServerConfig } from '@spartacus/core';\n\nexport abstract class PWAModuleConfig extends ServerConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { PWAModuleConfig } from '../pwa.module-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (pwaConfig.production && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Title, Meta, MetaDefinition } from '@angular/platform-browser';\nimport { PageMetaService, PageMeta, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { SeoMetaService } from './seo-meta.service';\nimport { htmlLangProvider } from './html-lang-provider';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { UserComponentModule } from '../../cms-components/user/index';\nimport { SeoModule } from '../../cms-structure/index';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/index';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/index';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    UserComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/index';\nimport { LayoutConfig } from './config/layout-config';\nimport { MainModule } from './main/main.module';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [MainModule, ...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [MainModule, ...layoutModules],\n})\nexport class LayoutModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport { Address, UserAddressService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(private userAddressService: UserAddressService) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Address, UserAddressService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(private userAddressService: UserAddressService) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  styleUrls: ['./close-account-modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  consentGiven = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentChanged.emit({\n      given: !this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, skipWhile, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest(\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      map(\n        ([consentLoading, giveConsentLoading, withdrawConsentLoading]) =>\n          consentLoading || giveConsentLoading || withdrawConsentLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      tap(templateList => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      })\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${\n              address.postalCode\n            }`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n              billingAddress.postalCode\n            }`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n    }),\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit, OnDestroy {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  userServiceSub: Subscription;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  ngOnDestroy(): void {\n    if (this.userServiceSub) {\n      this.userServiceSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n  styleUrls: ['./update-email-form.component.scss'],\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n  styleUrls: ['./update-email.component.scss'],\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n  styleUrls: ['./update-password-form.component.scss'],\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n  styleUrls: ['./update-profile-form.component.scss'],\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest(\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home')\n    ).pipe(\n      map(([meta, textHome]) =>\n        meta.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(Boolean),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n\n  constructor(private router: Router, private renderer: Renderer2) {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => this.clear());\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (this.openNodes.includes(<HTMLElement>event.currentTarget)) {\n      this.openNodes = this.openNodes.filter(n => n !== event.currentTarget);\n      this.renderer.removeClass(<HTMLElement>event.currentTarget, 'is-open');\n    } else {\n      this.openNodes.push(<HTMLElement>event.currentTarget);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  data$ = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n    GenericLinkModule,\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config)\n    ).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config)\n    ).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a singe product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  ProductModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ProductModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${\n            deliveryAddress.postalCode\n          }`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n            billingAddress.postalCode\n          }`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CheckoutModule,\n  I18nModule,\n  ConfigModule,\n  CmsConfig,\n  AuthGuard,\n} from '@spartacus/core';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { OrderConfirmationGuard } from './guards/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    CheckoutModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CarouselItem } from '../../../shared/components/carousel/carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<CarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<CarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map(refs =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): CarouselItem {\n    const item: CarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsProductCarouselComponent } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CarouselItem } from '../../../../shared/components/carousel/carousel.model';\nimport { ProductCarouselService } from '../product-carousel.service';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  title$: Observable<string> = this.component.data$.pipe(\n    map(data => data.title)\n  );\n\n  items$: Observable<CarouselItem[]> = this.component.data$.pipe(\n    filter(Boolean),\n    map(data => data.productCodes.split(' ')),\n    map(codes => codes.map(code => this.service.loadProduct(code))),\n    switchMap((products$: Observable<CarouselItem>[]) =>\n      combineLatest(products$)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductCarouselComponent>,\n    protected service: ProductCarouselService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsProductReferencesComponent } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\nimport { ProductCarouselService } from '../product-carousel.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  items$ = combineLatest([this.productCode$, this.component.data$]).pipe(\n    switchMap(([code, data]) =>\n      this.service.getProductReferences(\n        code,\n        data.productReferenceTypes,\n        Boolean(JSON.parse(data.displayProductTitles)),\n        Boolean(JSON.parse(data.displayProductPrices))\n      )\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected service: ProductCarouselService,\n    protected current: CurrentProductService\n  ) {}\n\n  get productCode$(): Observable<string> {\n    return this.current.getProduct().pipe(\n      filter(Boolean),\n      map(p => p.code)\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  ProductSearchPage,\n  ProductSearchService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit {\n  query: string;\n  categoryCode: string;\n  brandCode: string;\n  itemPerPage: number;\n\n  model$: Observable<ProductSearchPage>;\n  searchConfig: SearchConfig = {};\n  categoryTitle: string;\n  options: SearchConfig;\n  updateParams$: Observable<Params>;\n  gridMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    private activatedRoute: ActivatedRoute,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  update(): void {\n    const { queryParams } = this.activatedRoute.snapshot;\n    this.options = this.createOptionsByUrlParams();\n\n    if (this.categoryCode && this.categoryCode !== queryParams.categoryCode) {\n      this.query = ':relevance:category:' + this.categoryCode;\n    }\n    if (this.brandCode && this.brandCode !== queryParams.brandCode) {\n      this.query = ':relevance:brand:' + this.brandCode;\n    }\n    if (!this.query && queryParams.query) {\n      this.query = queryParams.query;\n    }\n    this.search(this.query, this.options);\n  }\n\n  createOptionsByUrlParams(): SearchConfig {\n    const { queryParams } = this.activatedRoute.snapshot;\n    const newConfig = {\n      ...queryParams,\n    };\n    delete newConfig.query;\n    const options = {\n      ...this.searchConfig,\n      ...newConfig,\n      pageSize: this.itemPerPage || 10,\n    };\n    if (this.categoryCode) {\n      options.categoryCode = this.categoryCode;\n    }\n    if (this.brandCode) {\n      options.brandCode = this.brandCode;\n    }\n\n    return options;\n  }\n\n  ngOnInit(): void {\n    this.updateParams$ = this.activatedRoute.params.pipe(\n      tap(params => {\n        this.categoryCode = params.categoryCode;\n        this.brandCode = params.brandCode;\n        this.query = params.query;\n        this.update();\n      })\n    );\n\n    this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n      this.gridMode$.next(\n        template === 'ProductGridPageTemplate' ? ViewModes.Grid : ViewModes.List\n      );\n    });\n\n    // clean previous search result\n    this.productSearchService.clearResults();\n\n    this.model$ = this.productSearchService.getResults().pipe(\n      tap(searchResult => {\n        if (Object.keys(searchResult).length === 0) {\n          this.search(this.query, this.options);\n        } else {\n          this.getCategoryTitle(searchResult);\n        }\n      }),\n      filter(searchResult => Object.keys(searchResult).length > 0)\n    );\n  }\n\n  protected getCategoryTitle(data: ProductSearchPage): string {\n    if (data.breadcrumbs && data.breadcrumbs.length > 0) {\n      this.categoryTitle = data.breadcrumbs[0].facetValueName;\n    } else if (!this.query.includes(':relevance:')) {\n      this.categoryTitle = this.query;\n    }\n    if (this.categoryTitle) {\n      this.categoryTitle =\n        data.pagination.totalResults + ' results for ' + this.categoryTitle;\n    }\n\n    return this.categoryTitle;\n  }\n\n  viewPage(pageNumber: number): void {\n    const { queryParams } = this.activatedRoute.snapshot;\n    this.search(queryParams.query, { currentPage: pageNumber });\n  }\n\n  sortList(sortCode: string): void {\n    this.search(this.query, { sortCode: sortCode });\n  }\n\n  setGridMode(mode: ViewModes): void {\n    this.gridMode$.next(mode);\n  }\n\n  protected search(query: string, options?: SearchConfig): void {\n    if (this.query) {\n      if (options) {\n        // Overide default options\n        this.searchConfig = {\n          ...this.searchConfig,\n          ...options,\n        };\n      }\n\n      this.productSearchService.search(query, this.searchConfig);\n    }\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  Facet,\n  ProductSearchPage,\n  ProductSearchService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  updateParams$: Observable<Params>;\n\n  get visibleFacets(): Facet[] {\n    if (!this.searchResult.facets) {\n      return [];\n    }\n    return this.searchResult.facets.filter(facet => facet.visible);\n  }\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productSearchService: ProductSearchService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.updateParams$ = this.activatedRoute.params.pipe(\n      tap(params => {\n        this.activeFacetValueCode = params.categoryCode || params.brandCode;\n      })\n    );\n\n    this.searchResult$ = this.productSearchService.getResults().pipe(\n      tap(searchResult => {\n        this.searchResult = searchResult;\n        if (this.searchResult.facets) {\n          this.searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      }),\n      filter(searchResult => Object.keys(searchResult).length > 0)\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productSearchService.search(this.queryCodec.decodeValue(query));\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  FormComponentsModule,\n  ListNavigationModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    FormComponentsModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  CmsModule,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CmsModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(Boolean),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule } from '@spartacus/core';\nimport {\n  FormComponentsModule,\n  StarRatingModule,\n} from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    FormComponentsModule,\n    I18nModule,\n    StarRatingModule,\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsModule,\n  ConfigModule,\n  I18nModule,\n  ProductService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CartSharedModule } from '../../cart/index';\n// guards\nimport { ProductAttributesComponent } from './product-attributes/product-attributes.component';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsComponent } from './product-reviews/product-reviews.component';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\nimport { ProductDetailsTabComponent } from './product-details-tab/product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    CmsModule,\n    OutletModule,\n    ProductReviewsModule,\n    ProductDetailsTabModule,\n    PageComponentModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent, ProductReviewsComponent],\n  entryComponents: [ProductAttributesComponent],\n  providers: [ProductService, WindowRef, RoutingService],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\nconst WAITING_CLASS = 'is-waiting';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  waiting: HTMLElement;\n\n  product$: Observable<Product> = this.currentProductService\n    .getProduct()\n    .pipe(filter(Boolean));\n\n  private _imageContainer$ = new BehaviorSubject(null);\n\n  imageContainer$ = combineLatest(this.product$, this._imageContainer$).pipe(\n    map(([product, container]) =>\n      container\n        ? container\n        : product.images && product.images.PRIMARY\n        ? product.images.PRIMARY\n        : {}\n    )\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  showImage(event: MouseEvent, imageContainer): void {\n    this.startWaiting(<HTMLElement>event.target);\n    this._imageContainer$.next(imageContainer);\n  }\n\n  isMainImageContainer(currentContainer): Observable<boolean> {\n    return this.imageContainer$.pipe(\n      map(\n        (container: any) =>\n          container &&\n          container.zoom &&\n          currentContainer.zoom &&\n          container.zoom.url === currentContainer.zoom.url\n      )\n    );\n  }\n\n  loadHandler(): void {\n    this.clearWaitList();\n  }\n\n  private startWaiting(el: HTMLElement): void {\n    this.clearWaitList();\n    el.classList.add(WAITING_CLASS);\n    this.waiting = el;\n  }\n\n  private clearWaitList(): void {\n    if (this.waiting) {\n      this.waiting.classList.remove(WAITING_CLASS);\n      delete this.waiting;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\n\n@NgModule({\n  imports: [\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    // TODO:#2811 - uncomment to enable\n    // StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  UrlSegment,\n  UrlMatchResult,\n  Route,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName [ / ** ]'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'TopHeaderSlot',\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'] },\n  logout: { paths: ['logout'] },\n  register: { paths: ['login/register'] },\n  forgotPassword: { paths: ['login/forgot-password'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['termsAndConditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { NgModule } from '@angular/core';\nimport {\n  ConfigModule,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [\n    CoreRoutingModule,\n    ConfigModule.withConfig(defaultRoutingConfig),\n    CmsRouteModule,\n  ],\n})\nexport class RoutingModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  AuthModule,\n  ConfigModule,\n  I18nModule,\n  provideConfigFromMetaTags,\n  SiteContextModule,\n  StateModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    AuthModule.forRoot(),\n    ConfigModule.forRoot(),\n    RoutingModule,\n    I18nModule.forRoot(),\n\n    SiteContextModule.forRoot(),\n\n    LayoutModule,\n  ],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    StorefrontFoundationModule,\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitely\n    OccModule,\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n  ],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [LayoutModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}