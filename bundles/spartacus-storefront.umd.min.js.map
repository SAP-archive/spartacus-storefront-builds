{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-launch-dialog.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/default-anonymous-consent-layout.config.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/split-view/split-view-deactivate.guard.ts","ng://@spartacus/storefront/shared/components/split-view/split-view.service.ts","ng://@spartacus/storefront/shared/components/split-view/split/split-view.component.ts","ng://@spartacus/storefront/shared/components/split-view/view/view.component.ts","ng://@spartacus/storefront/shared/components/split-view/split-view.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/table/config/table.config.ts","ng://@spartacus/storefront/shared/components/table/table.component.ts","ng://@spartacus/storefront/shared/components/table/table.module.ts","ng://@spartacus/storefront/shared/components/table/table.service.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-structure/services/cms-components.service.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/lazy-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/asm-toggle-ui/asm-toggle-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/default-asm-layout.config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","DIALOG_TYPE","LAUNCH_CALLER","BREAKPOINT","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","OutletPosition","LayoutConfig","Injectable","providedIn","useExisting","Config","LaunchRenderStrategy","document","rendererFactory","renderedCallers","dialogClasses","popoverClasses","sidebarEndClasses","sidebarStartClasses","renderer","createRenderer","shouldRender","caller","config","Boolean","component","some","el","multi","applyClasses","dialogType","classes","DIALOG","addClass","body","POPOVER","SIDEBAR_END","SIDEBAR_START","classes_1","classes_1_1","newClass","location","nativeElement","remove","filter","_a","removeClass","getPriority","Inject","DOCUMENT","InlineRenderStrategy","componentFactoryResolver","_this","_super","render","vcr","template","resolveComponentFactory","createComponent","element","of","isDevMode","console","warn","hasMatch","inline","args","RendererFactory2","ComponentFactoryResolver","LaunchDialogService","renderStrategies","layoutConfig","_dialogClose","BehaviorSubject","undefined","launch","findConfiguration","getStrategy","clear","asObservable","closeDialog","reason","resolveApplicable","ICON_TYPE","OutletService","features","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","add","outlet","templateOrFactory","position","REPLACE","BEFORE","store","AFTER","get","stacked","templateRef","removeValueOrAll","newValue","set","has","delete","existing","isLevel","val","FeatureConfigService","OutletRefDirective","tpl","outletService","ngOnInit","cxOutletRef","cxOutletPos","TemplateRef","Input","Directive","selector","OutletRefModule","NgModule","imports","CommonModule","declarations","exports","OutletRendererService","outletRefs","size","register","cxOutlet","context","getOutletRef","pipe","map","IntersectionService","isIntersected","options","intersects","first","v","Observable","observer","intersectOptions","rootMargin","getRootMargin","threshold","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","distinctUntilChanged","deferredLoading","intersectionMargin","DeferLoaderService","platformId","intersectionService","globalLoadStrategy","strategy","DeferLoadingStrategy","INSTANT","load","shouldLoadInstantly","deferLoading","elementLoadingStrategy","isPlatformServer","DEFER","type","PLATFORM_ID","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","renderedComponents","loaded","EventEmitter","subscription","Subscription","unsubscribe","cxOutletDefer","build","ngOnChanges","changes","emit","hostElement","getHostElement","subscribe","buildOutlet","templates","includes","isArray","components","forEach","obj","tmplOrFactory","ComponentFactory","view","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","parentNode","ngOnDestroy","ViewContainerRef","Output","OutletModule","providers","OutletRenderStrategy","template_1","outletDirective","reverse","find","componentType","tap","RoutingRenderStrategy","routingService","_caller","go","cxRoute","RoutingService","LaunchDialogModule","forRoot","ngModule","LaunchDialogModule_1","provide","AnonymousConsentLaunchDialogService","launchDialogService","openDialog","openElement","ANONYMOUS_CONSENT","combineLatest","dialogClose","close","comp","focus","destroy","BaseFocusService","BaseFocusDirective","elementRef","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","host","tagName","toLowerCase","hasAttribute","ElementRef","HostBinding","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","HostListener","BlockFocusDirective","block","PersistFocusService","group","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","event","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","isHidden","findFocusable","locked","invisible","suffix","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","setTimeout","_b","setAttribute","shouldUnlockAfterAutofocus","toString","Renderer2","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","AnonymousConsentManagementBannerComponent","anonymousConsentsService","anonymousConsentLaunchDialogService","subscriptions","bannerVisible$","isBannerVisible","viewDetails","hideBanner","dialog","allowAll","giveAllConsents","toggleBannerDismissed","AnonymousConsentsService","Component","IconResourceType","IconConfig","PaginationItemType","PaginationNavigationPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","res","types","svgResource","addLinkResource","resource","findResource","head","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","DomSanitizer","IconComponent","iconLoader","setIcon","addStyleClasses","styleClasses","cls","split","IconModule","provideDefaultConfig","AnonymousConsentDialogComponent","role","modal","showLegalDescription","iconTypes","requiredConsents","focusConfig","anonymousConsents","showLegalDescriptionInDialog","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","rejectAll","take","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","AnonymousConsentsConfig","defaultAnonymousConsentLayoutConfig","AnonymousConsentOpenDialogComponent","ViewChild","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","provideConfig","cmsComponents","entryComponents","SpinnerComponent","SpinnerModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","globalMessageService","anonymousConsentsConfig","authService","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","withLatestFrom","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","success","onConsentGivenSuccess","resetWithdrawConsentProcessState","skipWhile","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","code","GlobalMessageType","MSG_TYPE_CONFIRMATION","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","loading","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","UserConsentService","GlobalMessageService","AuthService","ConsentManagementModule","FormsModule","ReactiveFormsModule","guards","AuthGuard","AnonymousConsentsDialogModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","floor","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","slice","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","sort","a","width","_reversedFormats","sortedFormats","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","isInitialized","isLoading","isMissing","container","handleMissing","loadHandler","errorHandler","MediaModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","FormErrorsComponent","_control","control","errors$","statusChanges","startWith","errors","invalid","dirty","touched","FormErrorsModule","GenericLinkComponent","router","PROTOCOL_REGEX","URL_SPLIT","routeParts","isExternalUrl","test","setUrlParts","currentValue","path","queryParams","fragment","getAbsoluteUrl","splitUrl","parseUrl","match","Router","GenericLinkModule","ItemCounterComponent","min","step","allowZero","readonly","input","sub","valueChanges","setValue","getValidCount","emitEvent","markAsDirty","decrement","max","ItemCounterModule","defaultPaginationConfig","pagination","addStart","addEnd","PaginationConfig","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","_","number","label","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","MediaConfig","ModalRef","NgbModalRef","ModalService","ngbModalService","modals","open","content","activeModal","getActiveModal","dismissActiveModal","dismiss","pop","closeActiveModal","NgbModal","SplitViewDeactivateGuard","canDeactivate","timer","SplitViewService","_views$","visibleViewCount","views","hidden","visible","viewPosition","hide","splice","toggle","force","viewState","generateNextPosition","SplitViewComponent","splitService","lastVisibleView","lastVisible","ViewComponent","hiddenChange","SplitViewModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsConfig","QualtricsLoaderService","qsiLoaded$","fromEvent","qsi$","switchMap","isDataLoaded","api","qsi","qsiApi","initialize","run","reload","API","unload","log","addScript","scriptSource","hasScript","script","defer","source","querySelector","QualtricsComponent","qualtricsLoader","qualtrics","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","deps","StarRatingComponent","disabled","change","initialRate","setRate","rating","saveRate","setRateOnEvent","StarRatingModule","TableConfig","TableComponent","paginateEvent","_dataset","dataset","addTableDebugInfo","getDataValue","dataRow","headerKey","values","header","tableType","structure","TableModule","TableService","buildStructure","hasTableConfig","buildStructureFromConfig","buildStructureFromData","buildRandomStructure","getTableConfig","headers","hideHeader","tableConfig","table","bestMatch","message","ViewConfig","ViewConfigModule","ViewConfigModule_1","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","params","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","CheckoutService","ActiveCartService","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","password","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","controls","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","CmsComponentsService","missingComponents","determineMappings","componentTypes","getMapping","componentConfig","disableSSR","getDeferLoadingStrategy","getChildRoutes","routes","componentTypes_1","componentTypes_1_1","childRoutes","getGuards","Set","componentTypes_2","componentTypes_2_1","guard","getI18nKeys","i18nKeys","componentTypes_3","componentTypes_3_1","CmsConfig","CmsInjectorService","cmsComponentsService","getCmsData","uid","parentInjector","CmsService","getComponentData","getInjector","configProviders","useValue","parent","ComponentHandlerService","handlers","invalidMappings","resolve","componentMapping","handler","getLauncher","viewContainerRef","elementInjector","launcher","ComponentHandler","ComponentWrapperDirective","dynamicAttributeService","componentHandler","cmsInjector","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","ChangeDetectorRef","addDynamicAttributes","DynamicAttributeService","DefaultComponentHandler","subscriber","factory","getComponentFactory","LazyComponentHandler","defaultHandler","isNotClass","signature","substr","replace","PageComponentModule","AsmEnablerService","isEnabled","addUi","isLaunched","isUsedBefore","localStorage","setItem","getItem","ASM","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","asmEnablerService","CheckoutStepType","DeliveryModePreferences","AsmComponentService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","isCustomerEmulationSessionInProgress","mergeMap","userToken","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","isCollapsed$","getAsmUiState","uiState","collapsed","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","UserService","AsmService","encapsulation","ViewEncapsulation","None","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","FormatTimerPipe","transform","totalSeconds","minutes","seconds","Pipe","name","AsmToggleUiComponent","isCollapsed","toggleUi","updateAsmUiState","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","user","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","onDocumentClick","resultList","contains","closeResults","(document:click)","defaultAsmLayoutConfig","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","ProductService","AddedToCartDialogComponent","modalService","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","product","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","selectiveCartService","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","getControl","SelectiveCartService","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","selectiveCartEnabled","cartLoaded$","getLoaded","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","getLoading","slots","selectiveCart","loadingCart","exclude","arr","arg","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","cmsService","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","SkipLinkScrollPosition","CheckoutConfig","defaultCheckoutConfig","checkout","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","expressCheckoutService","firstStep$","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","countrySelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","translate","month","payment","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","textExpires","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","field","cardLabels","selected","title","img","actions","goNext","goPrevious","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","setAsDefaultField","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","regionSelected","addresses$","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","card","getCardContent","addAddress","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","SkipLinkConfig","SkipLinkService","keyboardFocusService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","getSkipLinkIndexInArray","i18nKey","scrollToTarget","parentElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkComponent","skipLinkService","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","HamburgerMenuService","isExpanded","events","NavigationStart","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","slot","pendingComponentCount","class","lastPosition","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","slotData","PageSlotModule","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","LanguageService","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","JsonLdScriptFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","isPlatformBrowser","scriptElement","getElementById","JSON","stringify","_key","SecurityContext","HTML","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","Promise","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","routing","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","pageMeta","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductReviewService","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","y","typeCode","select","tabNum","history","activeTab","getTitleParams","tabComps","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","continue","amendOrderForm","forwardRoute","AmendOrderActionsModule","ValidateQuantityToCancel","cxNoSelectedItemToCancel","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","UserNotificationPreferenceService","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","UserInterestsService","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","closest","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","ProductReferenceService","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","siteContext","routerState","criteria","getCriteriaFromRoute","model$","pluck","routeParams","getQueryFromRouteParams","brandCode","getPageItems","pageNumber","routeCriteria","navigate","queryParamsHandling","relativeTo","setQuery","viewPage","ProductSearchService","CurrencyService","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","updateState","increaseVisibleValues","decreaseVisibleValues","topValueCount","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","f","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","_isDialog","expandFacetGroup","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","observeOn","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","q","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchConfig","searchQuery","queryText","geolocation","useMyLocation","radius","parseParameters","googleMaps","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderConfig","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","auth","loginAsGuest","routeState","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","titleSelected","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","AnonymousConsentsModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport interface LaunchConfig {\n  [key: string]: LaunchOptions;\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Dialog type is used to apply CSS classes\n   */\n  dialogType?: DIALOG_TYPE;\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n  ANONYMOUS_CONSENT = 'ANONYMOUS_CONSENT',\n}\n","import { Injectable } from '@angular/core';\nimport { Config, DeferLoadingStrategy } from '@spartacus/core';\nimport { LaunchConfig } from '../launch-dialog/index';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n\n  launch?: LaunchConfig;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Renderer2,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Applicable, Priority } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  DIALOG_TYPE,\n  LaunchDialog,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config';\n\nexport abstract class LaunchRenderStrategy implements Applicable {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER | string;\n    element?: any;\n    component?: ComponentRef<any>;\n  }> = [];\n\n  /**\n   * Classes to apply to the component when the dialog is a DIALOG\n   */\n  protected dialogClasses = ['d-block', 'fade', 'modal', 'show'];\n  /**\n   * Classes to apply to the component when the dialog is a POPOVER\n   */\n  protected popoverClasses = ['cx-dialog-popover'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_END\n   */\n  protected sidebarEndClasses = ['cx-sidebar-end'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_START\n   */\n  protected sidebarStartClasses = ['cx-sidebar-start'];\n\n  protected renderer: Renderer2;\n\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>>;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(\n    caller: LAUNCH_CALLER | string,\n    config: LaunchDialog\n  ): boolean {\n    return (\n      Boolean(config.component) &&\n      (this.renderedCallers.some((el) => el.caller === caller)\n        ? !!config.multi\n        : true)\n    );\n  }\n\n  protected applyClasses(\n    component: ComponentRef<any>,\n    dialogType: DIALOG_TYPE\n  ): void {\n    let classes = [];\n\n    // TODO: make classes configurable\n    switch (dialogType) {\n      case DIALOG_TYPE.DIALOG:\n        classes = this.dialogClasses;\n        this.renderer.addClass(this.document.body, 'modal-open');\n        break;\n      case DIALOG_TYPE.POPOVER:\n        classes = this.popoverClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_END:\n        classes = this.sidebarEndClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_START:\n        classes = this.sidebarStartClasses;\n        break;\n    }\n\n    for (const newClass of classes) {\n      this.renderer.addClass(component.location.nativeElement, newClass);\n    }\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER | string, config: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller !== caller\n    );\n\n    if ((config as LaunchDialog)?.dialogType === DIALOG_TYPE.DIALOG) {\n      this.renderer.removeClass(this.document.body, 'modal-open');\n    }\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER | string,\n    vcr: ViewContainerRef\n  ): Observable<ComponentRef<any>> {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n\n      const component = vcr.createComponent(template);\n\n      if (config?.dialogType) {\n        this.applyClasses(component, config?.dialogType);\n      }\n\n      this.renderedCallers.push({ caller, element: vcr.element, component });\n\n      return of(component);\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { resolveApplicable } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { LayoutConfig } from '../../config/layout-config';\nimport { LaunchOptions, LAUNCH_CALLER } from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  private _dialogClose = new BehaviorSubject<string>(undefined);\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected layoutConfig: LayoutConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>> {\n    const config = this.findConfiguration(caller);\n    if (config) {\n      const renderer = this.getStrategy(config);\n\n      // Render if the strategy exists\n      if (renderer) {\n        this._dialogClose.next(undefined);\n        return renderer.render(config, caller, vcr);\n      }\n    } else if (isDevMode()) {\n      console.warn('No configuration provided for caller ' + caller);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER | string): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  get dialogClose(): Observable<string> {\n    return this._dialogClose.asObservable();\n  }\n\n  closeDialog(reason: string) {\n    this._dialogClose.next(reason);\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER | string): LaunchOptions {\n    if (this.layoutConfig?.launch) {\n      return this.layoutConfig.launch[caller];\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveApplicable(this.renderStrategies, [config]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  /**\n   * @deprecated since 2.1, see #8116\n   */\n  constructor();\n  // tslint:disable-next-line: unified-signatures\n  constructor(features: FeatureConfigService);\n  constructor(protected features?: FeatureConfigService) {}\n\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n\n      if (this.features?.isLevel('2.1')) {\n        existing = existing.filter((val) => val !== value);\n      } else {\n        // deprecated since 2.1, see #8116:\n        existing = existing.filter((val) => val === value);\n      }\n\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new BehaviorSubject(new Map<string, OutletDirective>());\n\n  /**\n   * Dynamically render the templates in the specified array\n   *\n   * @param outlet\n   */\n  render(outlet: string): void {\n    if (this.outletRefs.value.size !== 0) {\n      this.outletRefs.value.get(outlet).render();\n    }\n  }\n\n  /**\n   * Register outlet to be available to render dynamically\n   *\n   * @param cxOutlet\n   * @param context\n   */\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.next(this.outletRefs.value.set(cxOutlet, context));\n  }\n  /**\n   * Returns map of outlets\n   *\n   */\n  getOutletRef(outlet: string): Observable<OutletDirective> {\n    return this.outletRefs.asObservable().pipe(\n      map((val) => val.get(outlet)),\n      filter((val) => Boolean(val))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, threshold: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n  public renderedComponents = new Map<\n    OutletPosition,\n    Array<ComponentRef<any> | EmbeddedViewRef<any>>\n  >();\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.renderedComponents.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n      this.outletRendererService.register(this.cxOutlet, this);\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    const components = [];\n    templates.forEach((obj) => {\n      const component = this.create(obj);\n      components.push(component);\n    });\n\n    this.renderedComponents.set(position, components);\n  }\n\n  private create(tmplOrFactory: any): ComponentRef<any> | EmbeddedViewRef<any> {\n    this.renderedTemplate.push(tmplOrFactory);\n\n    if (tmplOrFactory instanceof ComponentFactory) {\n      const component = this.vcr.createComponent(tmplOrFactory);\n      return component;\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n      return view;\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent nodes of the given element.\n   *\n   * We avoid traversing the parent _elements_, as this is blocking\n   * ie11 implementations. One of the spare exclusions we make to not\n   * supporting ie11.\n   *\n   * @param element\n   */\n  private getHostElement(element: Node): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentNode);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  RendererFactory2,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER | string\n  ): Observable<ComponentRef<any>> {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n      this.renderedCallers.push({ caller });\n\n      return this.outletRendererService.getOutletRef(config.outlet).pipe(\n        map((outletDirective) => {\n          const components = outletDirective.renderedComponents.get(\n            config.position ? config.position : OutletPosition.BEFORE\n          ) as ComponentRef<any>[];\n\n          return components\n            .reverse()\n            .find(\n              (component) => component.componentType === template.componentType\n            );\n        }),\n        tap((component) => {\n          if (config?.dialogType) {\n            this.applyClasses(component, config?.dialogType);\n          }\n        })\n      );\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER | string, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n\n    super.remove(caller, config);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, RendererFactory2 } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected routingService: RoutingService\n  ) {\n    super(document, rendererFactory);\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER | string) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { LayoutConfig } from '../config/layout-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [{ provide: LayoutConfig, useExisting: Config }],\n    };\n  }\n}\n","import { ElementRef, Injectable, ViewContainerRef } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport {\n  LaunchDialogService,\n  LAUNCH_CALLER,\n} from '../../layout/launch-dialog/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentLaunchDialogService {\n  constructor(protected launchDialogService: LaunchDialogService) {}\n\n  openDialog(\n    openElement?: ElementRef,\n    vcr?: ViewContainerRef\n  ): Observable<any> | undefined {\n    const component = this.launchDialogService.launch(\n      LAUNCH_CALLER.ANONYMOUS_CONSENT,\n      vcr\n    );\n\n    if (component) {\n      return combineLatest([\n        component,\n        this.launchDialogService.dialogClose,\n      ]).pipe(\n        filter(([, close]) => close && close !== undefined),\n        tap(([comp]) => {\n          openElement?.nativeElement.focus();\n          this.launchDialogService.clear(LAUNCH_CALLER.ANONYMOUS_CONSENT);\n          comp.destroy();\n        }),\n        map(([comp]) => comp)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singleton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistence key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistence\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      // we wait a few milliseconds, mainly because firefox will otherwise apply\n      // the mouse event on the new focused child element\n      setTimeout(() => {\n        super.handleFocus(event as KeyboardEvent);\n      }, 100);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elements,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { Component, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      null,\n      this.vcr\n    );\n    if (dialog) {\n      this.subscriptions.add(dialog.subscribe());\n    }\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [provideDefaultConfig(fontawesomeIconConfig)],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { FocusConfig } from '../../../layout/a11y/keyboard-focus/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  @HostBinding('attr.role') role = 'dialog';\n  @HostBinding('attr.aria-modal') modal = true;\n\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: 'input[type=\"checkbox\"]',\n    focusOnEscape: true,\n  };\n\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    // Close on click outside the dialog window\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\n      this.close('Cross click');\n    }\n  }\n\n  constructor(\n    protected config: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected el: ElementRef,\n    protected launchDialogService: LaunchDialogService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  close(reason?: any): void {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { DIALOG_TYPE } from '../../layout/launch-dialog/index';\nimport { AnonymousConsentDialogComponent } from '../../shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component';\n\nexport const defaultAnonymousConsentLayoutConfig: LayoutConfig = {\n  launch: {\n    ANONYMOUS_CONSENT: {\n      inline: true,\n      component: AnonymousConsentDialogComponent,\n      dialogType: DIALOG_TYPE.DIALOG,\n    },\n  },\n};\n","import {\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  @ViewChild('open') openElement: ElementRef;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService\n  ) {}\n\n  openDialog(): void {\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      this.openElement,\n      this.vcr\n    );\n    if (dialog) {\n      dialog.pipe(take(1)).subscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../layout/a11y/keyboard-focus/index';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { defaultAnonymousConsentLayoutConfig } from './default-anonymous-consent-layout.config';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideConfig(defaultAnonymousConsentLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/index';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsDialogModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media?.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Params, Router } from '@angular/router';\n\n// private\ninterface RouteParts {\n  /** Path in the Angular-like array format */\n  path?: string[];\n\n  /** Query params */\n  queryParams?: Params;\n\n  /** Hash fragment */\n  fragment?: string;\n}\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent implements OnChanges {\n  constructor(protected router: Router) {}\n\n  /**\n   * Pattern matching string starting with `http://` or `https://`.\n   */\n  private readonly PROTOCOL_REGEX: RegExp = /^https?:\\/\\//i;\n\n  /**\n   * Used to split url into 2 parts:\n   * 1. the path\n   * 2. query params + hash fragment\n   */\n  private readonly URL_SPLIT = /(^[^#?]*)(.*)/;\n\n  /**\n   * Parsed parts of the @Input `url`, when it's a local URL.\n   * It should not be used when the `url` is external.\n   * @see `url`\n   */\n  private routeParts: RouteParts = {};\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  /**\n   * Returns true when the @Input `url` is a string starting with `http://` or `https://`.\n   */\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.PROTOCOL_REGEX.test(this.url);\n  }\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['url']) {\n      this.setUrlParts(changes['url'].currentValue);\n    }\n  }\n\n  /**\n   * The part with the path of the local url.\n   */\n  get routerUrl(): any[] {\n    return this.routeParts.path;\n  }\n\n  /**\n   * The part with the query params of the local url.\n   */\n  get queryParams(): Params {\n    return this.routeParts.queryParams;\n  }\n\n  /**\n   * The part with the hash fragment of the local url.\n   */\n  get fragment(): string {\n    return this.routeParts.fragment;\n  }\n\n  /**\n   * Parses the given url and sets the property `urlParts` accordingly.\n   */\n  private setUrlParts(url: string | any[]) {\n    if (typeof url === 'string') {\n      url = this.getAbsoluteUrl(url); // string links in CMS sometimes don't have the leading slash, so fix it here\n      this.routeParts = this.splitUrl(url as string);\n    } else {\n      this.routeParts = { path: url };\n    }\n  }\n\n  /**\n   * Parses the given string into 3 parts:\n   * - string path (wrapped in an array to be compatible with Angular syntax for the `routerLink`)\n   * - query params (as an object)\n   * - hash fragment (string)\n   */\n  private splitUrl(url: string = ''): RouteParts {\n    const { queryParams, fragment } = this.router.parseUrl(url);\n    const [, path] = url.match(this.URL_SPLIT);\n\n    // wrap path in an array, to have the Angular-like path format\n    return { path: [path], queryParams, fragment };\n  }\n\n  /**\n   * Prepends a leading slash to the given URL string, in case it doesn't have it.\n   */\n  private getAbsoluteUrl(url: string): string {\n    return url.startsWith('/') ? url : '/' + url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functionality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent implements OnInit, OnDestroy {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive integer or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Indicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  /**\n   * Subscription responsible for auto-correcting control's value when it's invalid.\n   */\n  private sub: Subscription;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  ngOnInit() {\n    this.sub = this.control.valueChanges\n      .pipe(startWith(this.control.value))\n      .subscribe((value) =>\n        this.control.setValue(this.getValidCount(value), { emitEvent: false })\n      );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { MediaFormatSize } from './media.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { Observable, timer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Guard that can be used in split-view based child routes. This guard\n * delays the guard to be removed with 500ms, so that any css transition can be\n * finished before the DOM is destroyed.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SplitViewDeactivateGuard implements CanDeactivate<boolean> {\n  canDeactivate(): Observable<boolean> {\n    return timer(500).pipe(map(() => true));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { ViewState } from './split/split-view.model';\n\n/**\n * Supposed to be injected in the split view component, so that the view state\n * is maintained in the context of a single split view.\n */\n@Injectable()\nexport class SplitViewService {\n  protected _views$: BehaviorSubject<any[]> = new BehaviorSubject([]);\n\n  /**\n   * Resolves the max number of visible views for the split view.\n   */\n  visibleViewCount(): Observable<number> {\n    return this._views$.pipe(\n      map((views) => {\n        const hidden = views.findIndex((view: ViewState) => view.hidden);\n        return hidden === -1 ? views.length : hidden;\n      }),\n      filter((visible) => visible > 0),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Adds a view to the list of views. The view is initialized with the\n   * hide state, which defaults to false.\n   */\n  add(viewPosition: number, hide = false) {\n    if (!this.views[viewPosition]) {\n      this.views[viewPosition] = { hidden: hide };\n      this._views$.next(this.views);\n    }\n  }\n\n  /**\n   * Removes a view from the list of views.\n   */\n  remove(viewPosition: number) {\n    this._views$.next(this.views.splice(0, viewPosition));\n  }\n\n  /**\n   * Toggles the visible state for the given view. An optional\n   * force argument can be used to dictate the visibility.\n   */\n  toggle(viewPosition: number, force?: boolean) {\n    if (!this.views[viewPosition]) {\n      this.add(viewPosition, force ?? false);\n    } else {\n      this.views[viewPosition].hidden =\n        force ?? !this.views[viewPosition].hidden;\n      // Whenever a view is closing, we close all underlying views as well.\n      if (!this.views[viewPosition].hidden) {\n        this.views\n          .slice(viewPosition + 1)\n          .map((viewState) => (viewState.hidden = true));\n      }\n      this._views$.next(this.views);\n    }\n  }\n\n  /**\n   * Returns the next view number, that can be used by views to register itself.\n   */\n  generateNextPosition(): number {\n    return this.views.length;\n  }\n\n  /**\n   * Utility method that resolves all views.\n   */\n  protected get views(): ViewState[] {\n    return this._views$.value;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  OnDestroy,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SplitViewService } from '../split-view.service';\n\n/**\n * The split-view component supports an unlimited number of nested views. The component\n * is a host to those view components and doesn't add any restrictions to it's content;\n * content is projected as-is.\n *\n * ```html\n * <cx-split-view>\n *   <cx-view></cx-view>\n *   <cx-view></cx-view>\n *   <any-wrapper>\n *     <cx-view></cx-view>\n *   </any-wrapper>\n * </cx-split-view>\n * ```\n *\n * The split view component is only concerned with tracking the underlying _visible_\n * view components, so that the `lastVisibleView` can be updated accordingly. The actual\n * visibility of views is controlled by CSS. To allow for maximum flexibility, the CSS\n * implementation is using CSS variables. The `lastVisibleView` is bind to the\n * `--cx-last-visible-view` on the host, so that all descendants views will inherit the\n * property conveniently.\n */\n@Component({\n  selector: 'cx-split-view',\n  templateUrl: './split-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [SplitViewService],\n})\nexport class SplitViewComponent implements OnDestroy {\n  /**\n   * Indicates the last visible view in the range of views that is visible. This\n   * is bind to a css variable `--cx-last-visible-view` so that the experience\n   * can be fully controlled by css.\n   */\n  @HostBinding('style.--cx-last-visible-view')\n  lastVisibleView = 1;\n\n  protected subscription: Subscription = this.splitService\n    .visibleViewCount()\n    .subscribe((lastVisible: number) => (this.lastVisibleView = lastVisible));\n\n  constructor(protected splitService: SplitViewService) {}\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SplitViewService } from '../split-view.service';\n\n/**\n * The view component is part of the `SplitViewComponent`. The view\n * contains the navigable content that should be split up. It maintains\n * a view position and allows to show or hide the view.\n *\n * The ViewComponent interacts with the `SplitViewService` for handing over the\n * view state, so that the overarching `SplitViewComponent` can manage the\n * overall experience.\n */\n@Component({\n  selector: 'cx-view',\n  templateUrl: './view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewComponent implements OnInit, OnDestroy {\n  @Input()\n  @HostBinding('attr.position')\n  position: number;\n\n  /**\n   * The hidden input is used to set the initial visible state of the view.\n   * The hidden state defaults to false.\n   *\n   * The hidden input supports 2-way binding, see `hiddenChange` property.\n   */\n  @Input()\n  set hidden(hidden: boolean) {\n    this.splitService.toggle(this.viewPosition, hidden);\n  }\n\n  /**\n   * An update of the view visibility is emitted to the hiddenChange output.\n   */\n  @Output()\n  hiddenChange = new EventEmitter();\n\n  protected subscription: Subscription;\n\n  constructor(protected splitService: SplitViewService) {}\n\n  ngOnInit() {\n    this.splitService.add(this.viewPosition, this.hidden);\n\n    this.subscription = this.splitService\n      .visibleViewCount()\n      .subscribe((visible) => {\n        if (this.hidden !== this.viewPosition >= visible) {\n          this.hiddenChange.emit(this.viewPosition >= visible);\n        }\n      });\n  }\n\n  /**\n   * Toggles the visibility of the view.\n   *\n   * An optional force flag can be used to explicitly show or hide view component.\n   */\n  toggle(force?: boolean) {\n    this.splitService.toggle(this.viewPosition, force);\n  }\n\n  /**\n   * Returns the position for the view.\n   *\n   * The position is either taken from the input `position` or generated by the `SplitService`.\n   */\n  protected get viewPosition(): number {\n    if (this.position === undefined) {\n      this.position = this.splitService.generateNextPosition();\n    }\n    return this.position;\n  }\n\n  /**\n   * The view is removed from the `SplitService` so that the view no longer\n   * plays a role in the overall split view.\n   */\n  ngOnDestroy() {\n    this.splitService.remove(this.viewPosition);\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SplitViewComponent } from './split/split-view.component';\nimport { ViewComponent } from './view/view.component';\n\n/**\n * The split-view component supports an unlimited number of nested views. Nested views are rendered\n * next to each other. The views can be rendered next to each other, but the max number of visible\n * views can be limisted as well. This is configurable in the CSS layer, so that the max number of views\n * per split-view can be different for each component.\n *\n * The basic structure of the split-view component is shown below:\n *\n *\n * ```\n * <cx-split-view>\n * </cx-split-view>\n * ```\n *\n * The UX pattern used for the split-view is driven by an initial view, which gets splitted into\n * more views as soon as the user starts interacting with the initial and subsequantial views.\n * The views can be driven by routes, which means that you can navigate through the splitted views\n * by using the browser history as well as share or bookmark splitted views.\n *\n * The UI is implemented in the style layer, with only a few generic style rules. Most of the split\n * view style is driven by CSS properties, so that alternative split-view styles can be introduced\n * per page or component.\n *\n * The max number of views per split-view on mobile is limited to 1 by default, where as on tablet\n * (and higher) it is set to 2. Spartacus has a pretty narrow layout, which is why 2 is maximum,\n * but customers could alter the layout to bring in more views in the same split-view at the time.\n *\n */\n\n@NgModule({\n  declarations: [SplitViewComponent, ViewComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [SplitViewComponent, ViewComponent],\n})\nexport class SplitViewModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Configuration options for the Qualtrics integration, which allows you to\n * specify the qualtrics project and deployment script.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QualtricsConfig {\n  /**\n   * Holds the qualtrics integration options.\n   */\n  qualtrics?: {\n    /**\n     * Deployment script, loaded from a resource, to integrate the deployment of the qualtrics project.\n     * You would typically store the file in the local assets folder.\n     *\n     * Defaults to `assets/qualtricsIntegration.js`\n     */\n    scriptSource?: string;\n  };\n}\n","import {\n  Injectable,\n  isDevMode,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\n\nexport const QUALTRICS_EVENT_NAME = 'qsi_js_loaded';\n\n/**\n * Service to integration Qualtrics.\n *\n * The integration observes the Qualtrics API, and when available, it runs the QSI API\n * to let Qualtrics evaluate the application.\n *\n * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application\n * data before pulling the QSI API. This is beneficial in a single page application when additional\n * data is required before the Qualtrics _creatives_ run.\n *\n * This service also supports the creation of the Qualtrics deployment script. This is optional, as\n * the script can be added in alternatives ways.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  /**\n   * Reference to the QSI API.\n   */\n  protected qsiApi: any;\n\n  /**\n   * QSI load event that happens when the QSI JS file is loaded.\n   */\n  private qsiLoaded$: Observable<any> = this.winRef?.nativeWindow\n    ? fromEvent(this.winRef.nativeWindow, QUALTRICS_EVENT_NAME)\n    : of();\n\n  /**\n   * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.\n   *\n   * The API is emitted when the JavaScript resource holding this API is fully loaded.\n   * The API is also stored locally in the service, in case it's required later on.\n   */\n  protected qsi$: Observable<any> = this.qsiLoaded$.pipe(\n    switchMap(() => this.isDataLoaded()),\n    map(() => this.winRef?.nativeWindow['QSI']),\n    filter((api) => Boolean(api)),\n    tap((qsi) => (this.qsiApi = qsi))\n  );\n\n  constructor(\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.initialize();\n  }\n\n  /**\n   * Starts observing the Qualtrics integration. The integration is based on a\n   * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,\n   * we run the API.\n   */\n  protected initialize() {\n    this.qsi$.subscribe(() => this.run());\n  }\n\n  /**\n   * Evaluates the Qualtrics project code for the application.\n   *\n   * In order to reload the evaluation in Qualtrics, the API requires to unload the API before\n   * running it again. We don't do this by default, but offer a flag to conditionally unload the API.\n   */\n  protected run(reload = false): void {\n    if (!this.qsiApi?.API) {\n      if (isDevMode()) {\n        console.log('The QSI api is not available');\n      }\n      return;\n    }\n\n    if (reload) {\n      // Removes any currently displaying creatives\n      this.qsiApi.API.unload();\n    }\n\n    // Starts the intercept code evaluation right after loading the Site Intercept\n    // code for any defined intercepts or creatives\n    this.qsiApi.API.load().done(this.qsiApi.API.run());\n  }\n\n  /**\n   * Adds the deployment script to the DOM.\n   *\n   * The script will not be added twice if it was loaded before. In that case, we use\n   * the Qualtrics API directly to _unload_ and _run_ the project.\n   */\n  addScript(scriptSource: string): void {\n    if (this.hasScript(scriptSource)) {\n      this.run(true);\n    } else {\n      const script: HTMLScriptElement = this.renderer.createElement('script');\n      script.type = 'text/javascript';\n      script.defer = true;\n      script.src = scriptSource;\n      this.renderer.appendChild(this.winRef.document.body, script);\n    }\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.\n   * You can observe any data in this method.\n   *\n   * Defaults to true.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n\n  /**\n   * Indicates if the script is already added to the DOM.\n   */\n  protected hasScript(source?: string): boolean {\n    return !!this.winRef.document.querySelector(`script[src=\"${source}\"]`);\n  }\n\n  protected get renderer(): Renderer2 {\n    return this.rendererFactory.createRenderer(null, null);\n  }\n}\n","import { Component, isDevMode } from '@angular/core';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n/**\n * Adds the Qualtrics deployment script whenever the component is loaded. The\n * deployment script is loaded from the global configuration (`qualtrics.scriptSource`).\n */\n@Component({\n  selector: 'cx-qualtrics',\n  template: ``,\n})\nexport class QualtricsComponent {\n  constructor(\n    protected qualtricsLoader: QualtricsLoaderService,\n    protected config: QualtricsConfig\n  ) {\n    if (this.config.qualtrics?.scriptSource) {\n      this.qualtricsLoader.addScript(this.config.qualtrics.scriptSource);\n    } else if (isDevMode()) {\n      console.warn(\n        `We're unable to add the Qualtrics deployment code as there is no script source defined in config.qualtrics.scriptSource.`\n      );\n    }\n  }\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => (ctx ? this.getInjectedService(ctx) : undefined)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data?.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { BREAKPOINT } from '../../../../layout/config/layout-config';\nimport { TableStructureConfiguration } from '../table.model';\n\n/**\n * Helper configuration to introduce a breakpoint specific table configuration.\n */\nexport interface TableConfiguration extends TableStructureConfiguration {\n  breakpoint?: BREAKPOINT;\n}\n\n/**\n * The `TableConfig` provides table configurations. The configuration allows for a\n * an optional breakpoint specific structure, so a dedicated table structure per\n * screen size can be generated (see `TableService`).\n *\n * The string based key is used to define a configuration for a specific type. The type\n * binds to a specific component, such as the cost-center table. The various table types\n * should be exposed by feature modules, to ease the configuration.\n *\n * The `TableConfiguration` is added in an array, so that any opinionated default configurations\n * can be replaced by customer configurations.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class TableConfig {\n  table: {\n    [key: string]: TableConfiguration[];\n  };\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  isDevMode,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\nimport { Table, TableHeader } from './table.model';\n\n/**\n * The table component provides a generic DOM structure based on the `dataset` input.\n * The `Table` dataset contains both a type, table structure, table data and controls\n * for pagination and sorting.\n *\n * The table component only supports horizontal table structure.\n *\n * The implementation is fairly \"dumb\" and only provides the following features:\n * - Use outlet for table headers (`<th>`) and cells (`<td>`).\n * - Localizing table headers, using the `I18nModule`.\n * - Sorting table columns.\n * - Add CSS classes on each cell to\n *\n * Al features are optional.\n *\n * By default, the headers and columns are rendered with an outlet template. The template\n * reference is generated by concatenating the table _type_ and table _label key_.\n * The following snippet shows an outlet generated for the table type \"cost-center\" with\n * a label \"name\":\n *\n * ```\n * <th>\n *   <template cxOutlet=\"tbl.cost-center.header.name\">\n *     [localized label is generated here]\n *   </template>\n * </th>\n * ```\n *\n * Similarly, the `<td>` is generated with the outlet template reference `tbl.cost-center.data.name`.\n *\n * This allows container components (and customers) to further customize the table rendering.\n *\n *\n */\n@Component({\n  selector: 'cx-table',\n  templateUrl: './table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableComponent {\n  @HostBinding('attr.cx-table-type') tableType: string;\n\n  protected _dataset: Table;\n  @Input()\n  set dataset(dataset: Table) {\n    this._dataset = dataset;\n    this.addTableDebugInfo();\n  }\n  get dataset(): Table {\n    return this._dataset;\n  }\n\n  /**\n   * The paginateEvent is triggered when a new page is required. This includes sorting.\n   */\n  @Output() paginateEvent: EventEmitter<PaginationModel> = new EventEmitter();\n\n  /**\n   * Returns the configured data value by the label key.\n   * If there's no headerKey available, or no corresponding value, the\n   * first value in the data row is returned.\n   */\n  getDataValue(dataRow: any, headerKey: string, index: number): string {\n    return dataRow[headerKey] || Object.values(dataRow)[index];\n  }\n\n  /**\n   * Sorts the table by emitting the pagination to the container/host component.\n   */\n  sort(header: TableHeader) {\n    if (header.sortCode) {\n      this.paginateEvent.emit({\n        ...this.dataset.pagination,\n        sort: header.sortCode,\n      });\n    }\n  }\n\n  /**\n   * Generates the table type into the UI in devMode, so that developers\n   * can easily get the notion of the table type.\n   */\n  protected addTableDebugInfo() {\n    if (isDevMode) {\n      this.tableType = this.dataset?.structure?.type;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { TableComponent } from './table.component';\n\n/**\n * The TableModule provides a table component that is driven by (responsible) configuration.\n */\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  declarations: [TableComponent],\n  exports: [TableComponent],\n})\nexport class TableModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { TableConfig } from './config/table.config';\nimport { TableStructure, TableStructureConfiguration } from './table.model';\n\n/**\n * Responsive table service.\n *\n * The `TableService` is used to generate a `TableStructure` based on configuration. The table\n * structure configuration allows for breakpoint specific configuration, so that the table\n * experience can be differentiated various screen sizes.\n *\n * The table structure configuration is driven by a table type. The various supported\n * table types are exposed in feature libraries.\n *\n * If there is no table configuration for the given type found, a table header structure\n * is generated based on the actual data or randomly (in case no data is passed in) by\n * generating 5 headers. In case of a generated header, we warn the developer in devMode that\n * there is no configuration available.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TableService {\n  constructor(\n    protected breakpointService: BreakpointService,\n    protected config: TableConfig\n  ) {}\n\n  /**\n   * Builds the table structure. The table structure can be created by the help of\n   * the `tableType`. The `tableType` can be used in the configuration `TableConfig`,\n   * so that the table headers can be defined.\n   */\n  buildStructure(\n    tableType: string,\n    data$?: Observable<any>\n  ): Observable<TableStructure> {\n    if (this.hasTableConfig(tableType)) {\n      return this.buildStructureFromConfig(tableType);\n    } else {\n      if (data$) {\n        return this.buildStructureFromData(tableType, data$);\n      } else {\n        return this.buildRandomStructure(tableType);\n      }\n    }\n  }\n\n  /**\n   * Returns the table structure by configuration. The configuration can be\n   * breakpoint-driven, which means that an alternative header structure can\n   * be created per screen size.\n   *\n   * The breakpoint is resolved by teh `BreakpointService`.\n   */\n  protected buildStructureFromConfig(type: string): Observable<TableStructure> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => ({ ...this.getTableConfig(type, breakpoint), type }))\n    );\n  }\n\n  /**\n   * This method generates a table structure by the help of the first data row.\n   */\n  protected buildStructureFromData(\n    type: string,\n    data$: Observable<any>\n  ): Observable<TableStructure> {\n    this.warn(\n      `No table configuration found to render table with type \"${type}\". The table header for \"${type}\" is generated by the help of the first data item`\n    );\n    return data$.pipe(\n      map((data: any[]) => {\n        const headers = Object.keys(data?.[0]).map((key) => ({\n          key,\n          label: key,\n        }));\n        return {\n          type: type,\n          headers,\n        } as TableStructure;\n      })\n    );\n  }\n\n  /**\n   * As a last resort, the table structure is randomly created. We add 5 unknown headers\n   * and use the `hideHeader` to avoid the unknown headers to be rendered.\n   */\n  protected buildRandomStructure(type: string): Observable<TableStructure> {\n    this.warn(\n      `No data available for \"${type}\", a random structure is generated (with hidden table headers).`\n    );\n\n    return of({\n      type,\n      headers: [\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n      ],\n      hideHeader: true,\n    });\n  }\n\n  /**\n   * Finds the best applicable table configuration for the given type\n   * and breakpoint. If there is no configuration available for the breakpoint,\n   * the best match will be returned, using mobile first approach.\n   *\n   * If there is no match for any breakpoint, the fallback is a configuration\n   * without the notion of a breakpoint. Otherwise we fallback to the first\n   * available config.\n   */\n  protected getTableConfig(\n    type: string,\n    breakpoint: BREAKPOINT\n  ): TableStructureConfiguration {\n    const tableConfig = this.config.table[type];\n\n    // find all relevant breakpoints\n    const current = this.breakpointService.breakpoints.indexOf(breakpoint);\n    const relevant = this.breakpointService.breakpoints\n      .slice(0, current + 1)\n      .reverse();\n\n    const bestMatch: BREAKPOINT = relevant.find(\n      (br) => !!tableConfig.find((structure) => structure.breakpoint === br)\n    );\n\n    return bestMatch\n      ? tableConfig.find((config) => config.breakpoint === bestMatch)\n      : tableConfig.find((structure) => !structure.breakpoint) ||\n          tableConfig[0];\n  }\n\n  protected hasTableConfig(tableType: string): boolean {\n    return !!this.config.table?.[tableType];\n  }\n\n  /**\n   * Prints a convenient message in the console to increase developer experience.\n   */\n  private warn(message) {\n    if (isDevMode) {\n      console.warn(message);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  CmsComponentMapping,\n  CmsConfig,\n  DeferLoadingStrategy,\n} from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentsService {\n  private missingComponents: string[] = [];\n\n  constructor(\n    protected config: CmsConfig,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Should be called to make sure all component mappings are determined,\n   * especially lazy loaded ones.\n   *\n   * It's recommended way to make sure all other methods of CmsComponentService\n   * will be able to work synchronously for asked component types and avoid risk\n   * of potential errors that could be thrown otherwise.\n   */\n  determineMappings(componentTypes: string[]): Observable<string[]> {\n    return of(componentTypes);\n  }\n\n  /**\n   * Return collection of component mapping configuration for specified list of\n   * component types.\n   *\n   * If component mapping can't be determined synchronously, for example, lazy\n   * loaded one, it will throw an error.\n   *\n   * To make sure component mapping is available, determineMappings()\n   * should be called and completed first.\n   */\n  getMapping(componentType: string): CmsComponentMapping {\n    const componentConfig = this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  /**\n   * Checks, if component should be rendered as some components\n   * could be disabled for server side renderings\n   */\n  shouldRender(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getMapping(componentType)?.disableSSR);\n  }\n\n  /**\n   * Return DeferLoadingStrategy for component type.\n   */\n  getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    return this.config.cmsComponents?.[componentType]?.deferLoading;\n  }\n\n  /**\n   * Get cms driven child routes for components\n   */\n  getChildRoutes(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        routes.push(...(this.getMapping(componentType)?.childRoutes ?? []));\n      }\n    }\n    return routes;\n  }\n\n  /**\n   * Get cms driven guards for components\n   */\n  getGuards(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getMapping(componentType)?.guards?.forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  /**\n   * Get i18n keys associated with components\n   */\n  getI18nKeys(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        this.getMapping(componentType)?.i18nKeys?.forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsComponentsService } from '../../../services/cms-components.service';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsComponentsService.getMapping(type)?.providers ?? [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Applicable {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsComponentsService } from '../../services/cms-components.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService\n  ) {}\n\n  ngOnInit() {\n    this.cmsComponentsService\n      .determineMappings([this.cxComponentWrapper.flexType])\n      .subscribe(() => {\n        if (\n          this.cmsComponentsService.shouldRender(\n            this.cxComponentWrapper.flexType\n          )\n        ) {\n          this.launchComponent();\n        }\n      });\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsComponentsService.getMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n        this.injector.get(ChangeDetectorRef).markForCheck();\n      });\n  }\n\n  private decorate(elementRef: ElementRef): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      elementRef.nativeElement,\n      this.renderer,\n      { componentData: this.cxComponentWrapper }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return typeof componentMapping.component === 'function';\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { DefaultComponentHandler } from './default-component.handler';\nimport { switchMap } from 'rxjs/operators';\nimport { ComponentHandler } from './component-handler';\n\n/**\n * Lazy component handler used for launching lazy loaded cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LazyComponentHandler implements ComponentHandler {\n  constructor(protected defaultHandler: DefaultComponentHandler) {}\n\n  /**\n   * We want to mach dynamic import signature () => import('')\n   */\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      this.isNotClass(componentMapping.component)\n    );\n  }\n\n  private isNotClass(symbol: any): boolean {\n    const signature = symbol.toString().substr(0, 20).replace(' ', '');\n    return signature.startsWith('function()') || signature.startsWith('()=>');\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return from(componentMapping.component()).pipe(\n      switchMap((component) =>\n        this.defaultHandler.launcher(\n          { ...componentMapping, component },\n          viewContainerRef,\n          elementInjector\n        )\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { LazyComponentHandler } from './handlers/lazy-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: LazyComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  isCollapsed$: Observable<boolean>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected asmService: AsmService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n    this.isCollapsed$ = this.asmService\n      .getAsmUiState()\n      .pipe(map((uiState) => uiState.collapsed));\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AsmService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm-toggle-ui',\n  templateUrl: './asm-toggle-ui.component.html',\n  styleUrls: ['./asm-toggle-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmToggleUiComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  isCollapsed: boolean;\n\n  constructor(protected asmService: AsmService) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      this.asmService.getAsmUiState().subscribe((uiState) => {\n        this.isCollapsed = uiState.collapsed;\n      })\n    );\n  }\n\n  toggleUi(): void {\n    this.asmService.updateAsmUiState({ collapsed: !this.isCollapsed });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\n\nexport const defaultAsmLayoutConfig: LayoutConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AsmModule as AsmCoreModule,\n  I18nModule,\n  provideConfig,\n} from '@spartacus/core';\nimport { FormErrorsModule } from '../../shared/index';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { AsmToggleUiComponent } from './asm-toggle-ui/asm-toggle-ui.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { defaultAsmLayoutConfig } from './default-asm-layout.config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n    AsmToggleUiComponent,\n  ],\n  providers: [provideConfig(defaultAsmLayoutConfig)],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n\n    this.cart$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getActiveCartId(),\n      this.customerCouponService.getCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      ),\n    ]).pipe(\n      tap(\n        ([cart, activeCardId, customerCoupons]: [\n          Cart,\n          string,\n          CustomerCouponSearchResult\n        ]) => {\n          this.cartId = activeCardId;\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n        }\n      ),\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n    );\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n  selectiveCartEnabled: boolean;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.selectiveCartEnabled = this.selectiveCartService.isEnabled();\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartEnabled\n        ? this.selectiveCartService.getLoaded()\n        : of(false),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn && this.selectiveCartEnabled\n          ? cartLoaded && sflLoaded\n          : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, Cart, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.isEnabled()\n          ? this.selectiveCartService.getCart()\n          : of({} as Cart),\n        this.activeCartService.getLoading(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart, loadingCart]) => {\n          const exclude = (arr, args) =>\n            arr.filter((item) => args.every((arg) => arg !== item));\n          return Object.keys(cart).length === 0 && loadingCart\n            ? exclude(slots, [\n                'TopContent',\n                'CenterRightContentSlot',\n                'EmptyCartMiddleContent',\n              ])\n            : cart.totalItems\n            ? exclude(slots, ['EmptyCartMiddleContent'])\n            : selectiveCart.totalItems\n            ? exclude(slots, [\n                'EmptyCartMiddleContent',\n                'CenterRightContentSlot',\n              ])\n            : exclude(slots, ['TopContent', 'CenterRightContentSlot']);\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { SaveForLaterComponent } from './save-for-later.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          if (code !== this.currentDeliveryModeId) {\n            this.checkoutDeliveryService.setDeliveryMode(code);\n          }\n        }\n        this.currentDeliveryModeId = code;\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.checkoutDeliveryService.setDeliveryMode(code);\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n  protected checkoutStepUrlNext: string;\n  protected checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.routingService.go(this.checkoutStepUrlNext);\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CheckoutService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm: FormGroup = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  ErrorModel,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  addresses$: Observable<Address[]>;\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField = true;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries: Country[]) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles: Title[]) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions: Region[]) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(\n              (error: ErrorModel) => error.subject === 'titleCode'\n            )\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n\n    this.addresses$ = this.userAddressService.getAddresses();\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take, filter } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    this.selectedAddress$\n      .pipe(\n        filter((selected) => !!selected?.shippingAddress),\n        take(1)\n      )\n      .subscribe(() => this.goNext());\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nimport { CmsComponentsService } from '../../services/cms-components.service';\n\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position represents the unique key for a page slot on a single page, but can\n   * be reused cross pages.\n   *\n   * The position is used to find the CMS components for the page slot. It is also\n   * added as an additional CSS class so that layoutt can be applied.\n   */\n  @Input() set position(value: string) {\n    this.position$.next(value);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  /**\n   * Maintains css classes introduced by the host and adds additional classes.\n   */\n  @Input() @HostBinding() class: string;\n\n  /**\n   * Indicates that the page slot is the last page slot above the fold.\n   */\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  /**\n   * Indicates that the components of the page slot haven't been loaded as long\n   * as the isPending state is true.\n   */\n  @HostBinding('class.cx-pending') isPending = true;\n\n  /**\n   * Indicates that the page slot doesn't contain any components. This is no\n   * longer used in spartacus, but kept for backwards compatibility.\n   */\n  @HostBinding('class.has-components') @Input() hasComponents = false;\n\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  components: ContentSlotComponentData[];\n\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    distinctUntilChanged(this.isDistinct)\n  );\n\n  /** Observes the components for the given page slot. */\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\n    map((slot) => slot?.components ?? [])\n  );\n\n  protected subscription: Subscription = new Subscription();\n\n  /** Keeps track of the pending components that must be loaded for the page slot */\n  private pendingComponentCount = 0;\n\n  /** Tracks the last used position, in case the page slot is used dynamically */\n  private lastPosition: string;\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\n        this.components = value?.components || [];\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  protected decorate(slot: ContentSlotData): void {\n    let cls = this.class || '';\n\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\n      cls = cls.replace(this.lastPosition, '');\n    }\n    if (this.position$.value) {\n      cls += ` ${this.position$.value}`;\n      this.lastPosition = this.position$.value;\n    }\n\n    // host bindings\n    this.pending = slot?.components?.length || 0;\n    this.hasComponents = slot?.components?.length > 0;\n    if (cls && cls !== this.class) {\n      this.class = cls;\n    }\n\n    this.addSmartEditSlotClass(slot);\n  }\n\n  /**\n   * Sets the pending count for the page slot components. Once all pending components are\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\n   */\n  protected set pending(count: number) {\n    this.pendingComponentCount = count;\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  protected get pending(): number {\n    return this.pendingComponentCount;\n  }\n\n  /*\n   * Is triggered when a component is added to the view. This is used to\n   * update the pending count\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pending--;\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether the component should be\n   * rendered instantly or whether it should be deferred.\n   */\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(\n      componentType\n    );\n    return { deferLoading };\n  }\n\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\n    return (\n      current.components &&\n      old.components?.length === current.components.length &&\n      !old.components.find(\n        (el, index) => el.uid !== current.components[index].uid\n      )\n    );\n  }\n\n  private addSmartEditSlotClass(slot: ContentSlotData): void {\n    if (slot) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.elementRef.nativeElement,\n        this.renderer,\n        { slotData: slot }\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService implements OnDestroy {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  private subscription: Subscription;\n\n  init() {\n    this.subscription = this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory implements OnDestroy {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  private subscription: Subscription;\n\n  build() {\n    this.subscription = this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsDialogModule } from '../../shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsDialogModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsComponentsService.getGuards(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected translation: TranslationService,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsComponentsService.getI18nKeys(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsComponentsService } from './cms-components.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(\n    private router: Router,\n    private cmsComponentsService: CmsComponentsService\n  ) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsComponentsService.getChildRoutes(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsComponentsService } from '../services/cms-components.service';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    protected cmsService: CmsService,\n    protected cmsRoutes: CmsRoutesService,\n    protected cmsI18n: CmsI18nService,\n    protected cmsGuards: CmsGuardsService,\n    protected cmsComponentsService: CmsComponentsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsComponentsService.determineMappings(componentTypes)\n      ),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    protected cmsService: CmsService,\n    protected winRef: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilChanged((x, y) => x?.components === y?.components),\n    switchMap((data) =>\n      combineLatest(\n        (data?.components ?? '').split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab) {\n                return undefined;\n              }\n\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    this.activeTabNum =\n      this.winRef.nativeWindow?.history?.state?.activeTab ?? this.activeTabNum;\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() amendOrderForm: FormGroup;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n\n  constructor(protected routingService: RoutingService) {}\n\n  continue(event: Event): void {\n    if (this.amendOrderForm.valid) {\n      this.routingService.go({\n        cxRoute: this.forwardRoute,\n        params: { code: this.orderCode },\n      });\n    } else {\n      this.amendOrderForm.markAllAsTouched();\n      event.stopPropagation();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantityToCancel(control: FormControl) {\n  if (!control.value) {\n    return null;\n  }\n  const quantity = Object.values(control.value).reduce(\n    (acc: number, val: number) => acc + val,\n    0\n  );\n  return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup(\n      {},\n      { validators: [ValidateQuantityToCancel] }\n    );\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  ItemCounterModule,\n  MediaModule,\n} from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup) {\n    if (form.valid) {\n      this.orderAmendService.save();\n    } else {\n      form.markAllAsTouched();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order?.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\nimport { FormErrorsModule } from '../../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm: FormGroup = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return data\n          ? {\n              title: data.name,\n              children: [nav],\n            }\n          : undefined;\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    const wrapper = <HTMLElement>node.querySelector('.wrapper');\n    const body = <HTMLElement>node.closest('body');\n    if (wrapper) {\n      this.renderer.removeStyle(wrapper, 'margin-left');\n      if (\n        wrapper.offsetLeft + wrapper.offsetWidth >\n        body.offsetLeft + body.offsetWidth\n      ) {\n        this.renderer.setStyle(\n          wrapper,\n          'margin-left',\n          `${node.offsetWidth - wrapper.offsetWidth}px`\n        );\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c?.displayProducts === 'true' || c?.displayProducts === true,\n            displayProductImages:\n              <any>c?.displayProductImages === 'true' ||\n              c?.displayProductImages === true,\n            displaySuggestions:\n              <any>c?.displaySuggestions === 'true' ||\n              c?.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d?.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data?.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) => {\n      this.mainMediaContainer.next(p.images?.PRIMARY ? p.images.PRIMARY : {});\n    })\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RouterState,\n  RoutingService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\nimport { ProductListRouteParams, SearchCriteria } from './product-list.model';\n\n/**\n * The `ProductListComponentService` is used to search products. The service is used\n * on the Product Listing Page, for listing products and the facet navigation.\n *\n * The service exposes the product search results based on the category and search\n * route parameters. The route parameters are used to query products by the help of\n * the `ProductSearchService`.\n */\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  /**\n   * @deprecated will be removed in version 3.0 as this is the\n   *   subscription is longer used\n   */\n  protected sub: Subscription;\n\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  /**\n   * Emits the search results for the current search query.\n   *\n   * The `searchResults$` is _not_ concerned with querying, it only observes the\n   * `productSearchService.getResults()`\n   */\n  protected searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  /**\n   * Observes the route and performs a search on each route change.\n   *\n   * Context changes, such as language and currencies are also taken\n   * into account, so that the search is performed again.\n   */\n  protected searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    ...this.siteContext,\n  ]).pipe(\n    map(([routerState, ..._context]) => (routerState as RouterState).state),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream is used for the Product Listing and Product Facets.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  /**\n   * Expose the `SearchCriteria`. The search criteria are driven by the route parameters.\n   *\n   * This search route configuration is not yet configurable\n   * (see https://github.com/SAP/spartacus/issues/7191).\n   */\n  protected getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  /**\n   * Resolves the search query from the given `ProductListRouteParams`.\n   */\n  protected getQueryFromRouteParams({\n    query,\n    categoryCode,\n    brandCode,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n\n    // TODO: drop support for brands as they should be treated\n    // similarly as any category.\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  /**\n   * Performs a search based on the given search criteria.\n   *\n   * The search is delegated to the `ProductSearchService`.\n   */\n  protected search(criteria: SearchCriteria): void {\n    const currentPage = criteria.currentPage;\n    const pageSize = criteria.pageSize;\n    const sortCode = criteria.sortCode;\n\n    this.productSearchService.search(\n      criteria.query,\n      // TODO: consider dropping this complex passing of cleaned object\n      Object.assign(\n        {},\n        currentPage && { currentPage },\n        pageSize && { pageSize },\n        sortCode && { sortCode }\n      )\n    );\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  /**\n   * Sort the search results by the given sort code.\n   */\n  sort(sortCode: string): void {\n    this.route({ sortCode });\n  }\n\n  /**\n   * Routes to the next product listing page, using the given `queryParams`. The\n   * `queryParams` support sorting, pagination and querying.\n   *\n   * The `queryParams` are delegated to the Angular router `NavigationExtras`.\n   */\n  protected route(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n\n  /**\n   * The site context is used to update the search query in case of a\n   * changing context. The context will typically influence the search data.\n   *\n   * We keep this private for now, as we're likely refactoring this in the next\n   * major version.\n   */\n  private get siteContext(): Observable<string>[] {\n    // TODO: we should refactor this so that custom context will be taken\n    // into account automatically. Ideally, we drop the specific context\n    // from the constructor, and query a ContextService for all contexts.\n\n    return [this.languageService.getActive(), this.currencyService.getActive()];\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  setQuery(query: string): void {\n    this.route({ query, currentPage: undefined });\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  viewPage(pageNumber: number): void {\n    this.route({ currentPage: pageNumber });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      (breadcrumb.facetValueCode === params.categoryCode ||\n        breadcrumb.facetValueCode === params.brandCode)\n    );\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: facet.topValueCount || 0,\n          maxVisible: facet.topValueCount || 0,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string): { [key: string]: string } {\n    return {\n      // to avoid encoding issues with facets that have space (' ') in their name,\n      // we replace the decoded '+' back to empty space ' '.\n      // For more, see https://github.com/SAP/spartacus/issues/7348\n      query: new HttpUrlEncodingCodec().decodeValue(query).replace(/\\+/g, ' '),\n    };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given _active_ facet when there\n   * the original facets is not available. This happens for non multi-valued facets.\n   *\n   * With this approach, the we keep the focus, either at the facet list or on the\n   * active facets.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return facetList.facets?.find((f) =>\n      f.values?.find((val) => val.name === facet.facetValueName)\n    )\n      ? ''\n      : facet.facetValueName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  private _isDialog: boolean;\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input()\n  set isDialog(value: boolean) {\n    this._isDialog = value;\n    if (value) {\n      this.renderer.addClass(document.body, 'modal-open');\n    }\n  }\n\n  get isDialog(): boolean {\n    return this._isDialog;\n  }\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  @HostListener('click') handleClick() {\n    this.close();\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef,\n    protected renderer: Renderer2\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.renderer.removeClass(document.body, 'modal-open');\n    this.closeList.emit(event);\n  }\n\n  block(event?: MouseEvent) {\n    event.stopPropagation();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n  StoreFinderConfig,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n  radius: number;\n  searchQuery: StoreFinderSearchQuery;\n  geolocation: GeoPoint;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    protected config: StoreFinderConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.radius = this.config.googleMaps.radius;\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}