{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-root/asm-root.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","map","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","changeDetection","ChangeDetectionStrategy","OnPush","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","subscription","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","increment","preventDefault","stopPropagation","onBlur","focus","onFocus","setFocus","registerOnTouched","fn","registerOnChange","updatedQuantity","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","ViewChild","static","OnlyNumberDirective","hostElement","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","Directive","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","get","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","BehaviorSubject","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","load","filter","switchMap","qsi","isDataLoaded","dataLoaded","API","unload","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","cmsComponents","component","entryComponents","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","item","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","ViewConfigModule","forRoot","ngModule","provideConfig","view","ViewConfig","AutoFocusDirective","ngAfterViewInit","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","FeaturesConfigModule","CurrentProductService","routingService","productService","getProduct","getRouterState","state","params","productCode","RoutingService","ProductService","AddedToCartDialogComponent","cartService","fb","quantity","group","entry$","entry","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","updateEntry","entryNumber","CartService","FormBuilder","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","setStockInfo","markForCheck","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","ChangeDetectorRef","AutoFocusDirectiveModule","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","isReadOnly","vouchers","slice","sort","a","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","authService","formBuilder","getOccUserId","cart","userId","cartId","OCC_USER_ID_ANONYMOUS","guid","cartIsLoading$","resetAddVoucherProcessingState","couponCode","Validators","required","submitDisabled$","valid","getAddVoucherResultLoading","btnEnabled","addVoucherIsLoading","getAddVoucherResultSuccess","success","onSuccess","reset","applyVoucher","addVoucher","AuthService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","potentialProductPromotions","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","e_2","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","CartItemComponent","compact","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","go","cxRoute","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","slots","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","checkout","steps","name","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getUserToken","getAssignedUser","token","user","access_token","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","uid","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","warn","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","paymentMethodSelected","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","layoutModules","LayoutModule","CmsMappingService","platformId","isComponentEnabled","flexType","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","componentType","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsConfig","Inject","PLATFORM_ID","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","Promise","resolve","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","CmsService","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","addClass","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","path","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","CmsPageGuard","cmsService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","OutletDirective","vcr","_context","renderTemplate","cxOutlet","ComponentFactory","createComponent","createEmbeddedView","$implicit","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","split","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","DOCUMENT","CxApiService","auth","checkoutDelivery","checkoutPayment","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","userAddress","userConsent","userOrder","userPayment","ngZone","CartDataService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserConsentService","UserOrderService","NgZone","ComponentWrapperDirective","componentMapper","dynamicAttributeService","shouldRenderComponent","cxComponentWrapper","launchWebComponent","launchComponent","cmpRef","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","element","parentElement","P","reject","fulfilled","rejected","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","addComponentClass","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","JSON","stringify","scriptElement","getElementById","createRenderer","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","sanitizer","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","DomSanitizer","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","AsmComponentService","logoutCustomerSupportAgentAndCustomer","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","isCustomerEmulationSessionInProgress","mergeMap","userToken","AsmMainUiComponent","asmService","asmComponentService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","handleCustomerSessionStartRedirection","loginCustomerSupportAgent","password","authorizeCustomerSupporAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","updateAsmUiState","visible","AsmService","AsmRootComponent","asmUi$","getAsmUiState","queryParamMap","queryParams","showUi","expandUi","expanded","collapseUi","CSAgentLoginFormComponent","submitClicked","csAgentTokenLoading","submitEvent","onSubmit","isNotValid","CustomerSelectionComponent","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","asm","maxResults","selectCustomerFromList","customer","onDocumentClick","resultList","contains","closeResults","host","(document:click)","AsmConfig","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetTimer","agentSessionTimer","startingDelayInSeconds","FormatTimerPipe","transform","totalSeconds","minutes","seconds","Pipe","CustomerEmulationComponent","isCustomerEmulationSessionInProgress$","AsmModule","AsmComponent","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","isLevel","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","onError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentStatus","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","moduleComponents","ɵ1","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","submit","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","ViewModes","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","infiniteScroll","active","setViewMode","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","ProductGridItemComponent","ProductListItemComponent","defaultScrollConfig","productLimit","showMoreButton","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","isActive","thumbnail","zoom","GALLERY","ProductImagesModule","ScheduleComponent","storeDataService","displayDays","changes","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","totalResults","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","store","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","history","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","hasPage","ɵ0$2","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","isEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                consent.consentState == null ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","export enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      // force hasStock and quanity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  CartVoucherService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  submitDisabled$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n\n  private subscription = new Subscription();\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = combineLatest([\n      this.cartService.getActive(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(\n        ([cart, userId]: [Cart, string]) =>\n          (this.cartId =\n            userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n      ),\n      map(([cart]: [Cart, string]) => cart)\n    );\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.submitDisabled$ = combineLatest([\n      this.cartIsLoading$,\n      this.form.valueChanges.pipe(\n        startWith(true),\n        map(() => this.form.valid)\n      ),\n      this.cartVoucherService.getAddVoucherResultLoading(),\n    ]).pipe(\n      map(\n        ([cartIsLoading, btnEnabled, addVoucherIsLoading]) =>\n          cartIsLoading || !btnEnabled || addVoucherIsLoading\n      )\n    );\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  applyVoucher(): void {\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getActive().pipe(\n      map(cart => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n  CartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/index';\nimport { CheckoutStepType } from '../../model/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...sortedTitles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { ComponentFactory, Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = new Map<\n    string,\n    TemplateRef<any> | ComponentFactory<any>\n  >();\n  private templatesRefsBefore = new Map<\n    string,\n    TemplateRef<any> | ComponentFactory<any>\n  >();\n  private templatesRefsAfter = new Map<\n    string,\n    TemplateRef<any> | ComponentFactory<any>\n  >();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: ComponentFactory<any>,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: TemplateRef<any> | ComponentFactory<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore.set(outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs.set(outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter.set(outlet, templateOrFactory);\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> | ComponentFactory<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    return templateRef;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    this.renderTemplate(OutletPosition.BEFORE);\n    this.renderTemplate(OutletPosition.REPLACE, true);\n    this.renderTemplate(OutletPosition.AFTER);\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): void {\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template && template instanceof ComponentFactory) {\n      this.vcr.createComponent(template);\n    } else if ((template && template instanceof TemplateRef) || replace) {\n      this.vcr.createEmbeddedView(\n        <TemplateRef<any>>template || this.templateRef,\n        {\n          $implicit: this._context,\n        }\n      );\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = JSON.stringify(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const html = `<script type=\"application/ld+json\">${JSON.stringify(\n        schema\n      )}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentGiven(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentGiven(consentTemplate: ConsentTemplate): boolean {\n    return (\n      Boolean(consentTemplate.currentConsent) &&\n      Boolean(consentTemplate.currentConsent.consentGivenDate) &&\n      !Boolean(consentTemplate.currentConsent.consentWithdrawnDate)\n    );\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentWithdrawn(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentWithdrawn(consentTemplate: ConsentTemplate): boolean {\n    if (Boolean(consentTemplate.currentConsent)) {\n      return Boolean(consentTemplate.currentConsent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, ConsentManagementModule],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletModule, OutletRefModule } from '../../cms-structure/index';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable } from '@angular/core';\nimport { AuthService, RoutingService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    private authService: AuthService,\n    private routingService: RoutingService\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.authService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.authService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.authService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected asmService: AsmService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.authService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.authService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.authService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.authService.authorizeCustomerSupporAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.authService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.authService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.asmService.updateAsmUiState({ visible: false });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AsmService, AsmUi } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm',\n  templateUrl: './asm-root.component.html',\n})\nexport class AsmRootComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  asmUi$: Observable<AsmUi>;\n\n  constructor(\n    protected asmService: AsmService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.asmUi$ = this.asmService.getAsmUiState();\n\n    this.subscription.add(\n      this.activatedRoute.queryParamMap.subscribe(queryParams => {\n        if (queryParams.get('asm') === 'true') {\n          this.showUi();\n        }\n      })\n    );\n  }\n\n  expandUi(): void {\n    this.asmService.updateAsmUiState({ expanded: true });\n  }\n\n  collapseUi(): void {\n    this.asmService.updateAsmUiState({ expanded: false });\n  }\n\n  private showUi(): void {\n    this.asmService.updateAsmUiState({ visible: true });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, OnInit, Output, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList', { static: false }) resultList: ElementRef;\n  @ViewChild('searchTerm', { static: false }) searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { AsmConfig, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  resetTimer() {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmRootComponent } from './asm-root/asm-root.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AsmComponent: {\n          component: AsmRootComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmRootComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  exports: [AsmRootComponent],\n  entryComponents: [AsmRootComponent],\n})\nexport class AsmModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    RouterModule.forChild([\n      {\n        path: 'guest/order/:orderCode',\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes => codes.map(code => this.productService.get(code)))\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        return sortedTitles;\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template.description,\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AsmModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    AsmModule.forRoot(),\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}