{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/web-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/launch-dialog/config/default-launch-config.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","IconResourceType","IconConfig","Injectable","providedIn","useExisting","Config","SkipLinkScrollPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","DomSanitizer","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","pop","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","CmsMappingService","platformId","missingComponents","getComponentMapping","componentType","componentConfig","console","warn","isComponentEnabled","isPlatformServer","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","childRoutes","CmsConfig","Inject","args","PLATFORM_ID","ComponentHandler","ComponentHandlerService","handlers","invalidMappings","resolve","componentMapping","handler","resolveApplicable","isDevMode","has","getLauncher","viewContainerRef","elementInjector","launcher","Optional","CmsInjectorService","cmsMapping","injector","getCmsData","uid","parentInjector","data$","get","CmsService","getComponentData","getInjector","configProviders","Injector","provide","CmsComponentData","useValue","parent","ComponentWrapperDirective","vcr","cmsMappingService","dynamicAttributeService","componentHandler","cmsInjector","cmsService","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","isLaunchInSmartEdit","addDynamicAttributes","properties","ViewContainerRef","DynamicAttributeService","Directive","DefaultComponentHandler","hasMatch","getPriority","Observable","subscriber","factory","getComponentFactory","createComponent","undefined","location","destroy","ComponentFactoryResolver","resolveComponentFactory","CxApiService","auth","cart","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","ActiveCartService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","WebComponentHandler","platform","loadedWebComponents","webElement","active","disposeFunc","remove","initWebComponent","then","elementName","cmsComponentData","cxApi","element","parentElement","Promise","path","script","setAttribute","body","isPlatformBrowser","onload","chainedOnload_1","DOCUMENT","PageComponentModule","multi","AsmComponentService","authService","asmAuthService","routingService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","of","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","globalMessageService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","switchMap","access_token","handleCustomerSessionStartRedirection","GlobalMessageType","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","HostBinding","encapsulation","ViewEncapsulation","None","BaseFocusService","PersistFocusService","focus","Map","group","set","clear","delete","getPersistenceGroup","getAttribute","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","querySelectorAll","findFirstFocusable","autofocus","el","isHidden","findFocusable","locked","invisible","suffix","map","join","filter","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","event","preventScroll","preventDefault","stopPropagation","focusOnDoubleEscape","AutoFocusService","hasPersistedFocus","getPersisted","focussed","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","tagName","TrapFocusService","hasFocusableChildren","moveFocus","focusable","v","getTrapStart","trap","getTrapEnd","LockFocusService","KeyboardFocusService","SkipLinkConfig","DIALOG_TYPE","LAUNCH_CALLER","SkipLinkService","keyboardFocusService","skipLinks$","BehaviorSubject","getSkipLinks","found","skipLinks","skipLink","existing","splice","getSkipLinkIndexInArray","i18nKey","position","scrollToTarget","HTMLElement","firstFocusable","hasTabindex","hasAttribute","removeAttribute","previous","this_1","SkipLinkComponent","skipLinkService","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_LAUNCH_CONFIG","launch","ASM","outlet","SKIP_LINKS","LaunchConfig","LaunchRenderStrategy","renderedCallers","shouldRender","caller","some","_config","LaunchDialogService","renderStrategies","launchConfig","findConfiguration","getStrategy","render","AsmEnablerService","launchDialogService","load","isEnabled","addUi","isLaunched","isUsedBefore","setItem","params","getItem","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","deps","asmEnablerService","BREAKPOINT","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","markForCheck","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","floor","seconds","slice","Pipe","name","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","EventEmitter","csAgentLoginForm","Validators","required","onSubmit","valid","emit","markAllAsTouched","FormBuilder","Output","CustomerEmulationComponent","subscription","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","controls","valueChanges","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","PaginationItemType","PaginationNavigationPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","indexOf","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","code","sort","a","width","_reversedFormats","sortedFormats","reverse","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","container","handleMissing","loadHandler","errorHandler","MediaModule","forRoot","ngModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","step","allowZero","readonly","handleClick","input","control","markAsDirty","decrement","getControl","_control$","startWith","getValidCount","emitEvent","max","HostListener","ItemCounterModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","PaginationConfig","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","_","number","label","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","BEFORE","AFTER","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","MediaConfig","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsConfig","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","fromEvent","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","FormErrorsComponent","_control","errors$","statusChanges","errors","entries","invalid","dirty","touched","FormErrorsModule","ViewConfig","ViewConfigModule","ViewConfigModule_1","view","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entryNumber","CustomFormValidators","emailValidator","email","match","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","CheckoutStepType","DeliveryModePreferences","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","isStable","BaseFocusDirective","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","toLowerCase","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","BlockFocusDirective","block","PersistFocusDirective","handleFocus","attr","ngAfterViewInit","isPersisted","EscapeFocusDirective","esc","AutoFocusDirective","shouldAutofocus","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","isLocked","lockFocus","addTabindexToChildren","shouldUnlockAfterAutofocus","setTimeout","toString","FocusDirective","directives","KeyboardFocusModule","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","getLoaded","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","slots","selectiveCart","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","features","CartComponentModule","CartModule","OutletPosition","CheckoutConfig","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","catch","verifyAddress","countrySelected","regionSelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","translate","payment","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","textExpires","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","field","cardLabels","selected","title","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","getCardContent","addAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","templateOrFactory","REPLACE","store","stacked","templateRef","removeValueOrAll","newValue","val","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","componentFactoryResolver","outletService","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","InlineRenderStrategy","inline","OutletRefDirective","tpl","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","first","observer","intersectOptions","rootMargin","getRootMargin","thresholds","threshold","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletRendererService","outletRefs","register","cxOutlet","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","cxOutletDefer","build","changes","hostElement","getHostElement","buildOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","OutletModule","OutletRenderStrategy","RoutingRenderStrategy","_caller","LaunchDialogModule","LaunchDialogModule_1","provideConfig","LayoutModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","components","pendingComponentCount","class","lastPosition","replace","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","typeCode","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","observeOn","asyncScheduler","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","querySelector","navBar","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","y","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","updateState","increaseVisibleValues","values","decreaseVisibleValues","topValueCount","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","expandFacetGroup","isCollapsed","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","viewStore","prepareRouteUrl","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","sub","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [provideDefaultConfig(fontawesomeIconConfig)],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsComponentMapping, CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  private missingComponents: string[] = [];\n\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  public getComponentMapping(componentType: string): CmsComponentMapping {\n    const componentConfig = this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  isComponentEnabled(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getComponentMapping(componentType)?.disableSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    return this.getComponentMapping(componentType)?.childRoutes ?? [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    return this.getComponentMapping(componentType)?.guards ?? [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    return this.getComponentMapping(componentType)?.i18nKeys ?? [];\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Applicable {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsMappingService } from '../../../services/cms-mapping.service';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsMapping: CmsMappingService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsMapping.getComponentMapping(type)?.providers ?? [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsMappingService } from '../../services/cms-mapping.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsMappingService: CmsMappingService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService,\n    protected cmsService: CmsService // TODO: remove, move smartedit detection responsibility to different layer/service\n  ) {}\n\n  ngOnInit() {\n    if (\n      this.cmsMappingService.isComponentEnabled(\n        this.cxComponentWrapper.flexType\n      )\n    ) {\n      this.launchComponent();\n    }\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsMappingService.getComponentMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n      });\n  }\n\n  private decorate(elementRef: ElementRef) {\n    if (this.cmsService.isLaunchInSmartEdit()) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.cxComponentWrapper.properties,\n        elementRef.nativeElement,\n        this.renderer\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      componentMapping.component.prototype\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import {\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ComponentHandler } from './component-handler';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CxApiService } from '../services/cx-api.service';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n/**\n * Component handler responsible for launching cms web components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebComponentHandler implements ComponentHandler {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'string' &&\n      componentMapping.component.includes('#')\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef }> {\n    return new Observable<{ elementRef: ElementRef }>((subscriber) => {\n      let webElement;\n      let active = true;\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const renderer = injector.get(Renderer2);\n\n      const disposeFunc = () => {\n        active = false;\n        if (webElement) {\n          webElement.remove();\n        }\n      };\n\n      this.initWebComponent(componentMapping.component, renderer).then(\n        (elementName) => {\n          if (elementName) {\n            webElement = renderer.createElement(elementName);\n\n            const cmsComponentData = injector.get(CmsComponentData, null);\n\n            webElement.cxApi = {\n              ...injector.get(CxApiService),\n              cmsComponentData,\n            };\n\n            renderer.appendChild(\n              viewContainerRef.element.nativeElement.parentElement,\n              webElement\n            );\n\n            subscriber.next({ elementRef: new ElementRef(webElement) });\n\n            if (!active) {\n              disposeFunc();\n            }\n          }\n        }\n      );\n\n      return disposeFunc;\n    });\n  }\n\n  private initWebComponent(\n    component: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const [path, selector] = component.split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { WebComponentHandler } from './handlers/web-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: WebComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistance\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LaunchConfig {\n  launch?: {\n    [key: string]: LaunchOptions;\n  };\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Optional elements for other configurations\n   */\n  options?: {\n    /**\n     * Dialog type is used to apply CSS classes\n     */\n    dialogType?: DIALOG_TYPE;\n  };\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { AsmMainUiComponent } from '../../../cms-components/asm/asm-main-ui/asm-main-ui.component';\nimport { SkipLinkComponent } from '../../a11y/skip-link/component/skip-link.component';\nimport { LaunchConfig } from './launch-config';\n\nexport const DEFAULT_LAUNCH_CONFIG: LaunchConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n    SKIP_LINKS: {\n      outlet: 'cx-storefront',\n      component: SkipLinkComponent,\n    },\n  },\n};\n","import { ViewContainerRef } from '@angular/core';\nimport { LAUNCH_CALLER, LaunchDialog, LaunchOptions } from '../config';\nimport { Applicable } from '@spartacus/core';\n\nexport abstract class LaunchRenderStrategy implements Applicable {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER;\n    element?: any;\n  }> = [];\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ): void;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(caller: LAUNCH_CALLER, config: LaunchDialog): boolean {\n    return this.renderedCallers.some((el) => el.caller === caller)\n      ? !!config.multi\n      : true;\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER, _config?: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n  }\n}\n","import { Inject, Injectable, ViewContainerRef } from '@angular/core';\nimport {\n  LAUNCH_CALLER,\n  LaunchConfig,\n  LaunchOptions,\n} from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\nimport { resolveApplicable } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  // Keep a list of rendered elements\n  protected renderedCallers: LAUNCH_CALLER[] = [];\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected launchConfig: LaunchConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(caller: LAUNCH_CALLER, vcr?: ViewContainerRef): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.render(config, caller, vcr);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER): LaunchOptions {\n    return this.launchConfig?.launch[caller];\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveApplicable(this.renderStrategies, [config]);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import { DeferLoadingStrategy, Config } from '@spartacus/core';\nimport { Injectable } from '@angular/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media?.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap((value) =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { MediaFormatSize } from './media.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(() =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter((loaded) => loaded),\n      switchMap(() => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap((dataLoaded) => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: ` <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container> `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { FormErrorsModule } from '../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistance key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      super.handleFocus(event as KeyboardEvent);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elmenents,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n\n    this.cart$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getActiveCartId(),\n      this.customerCouponService.getCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      ),\n    ]).pipe(\n      tap(\n        ([cart, activeCardId, customerCoupons]: [\n          Cart,\n          string,\n          CustomerCouponSearchResult\n        ]) => {\n          this.cartId = activeCardId;\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n        }\n      ),\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n    );\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    private authService: AuthService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn ? cartLoaded && sflLoaded : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart]) => {\n          if (cart.totalItems) {\n            return slots.filter((slot) => slot !== 'EmptyCartMiddleContent');\n          } else if (selectiveCart.totalItems) {\n            return slots.filter(\n              (slot) =>\n                slot !== 'EmptyCartMiddleContent' &&\n                slot !== 'CenterRightContentSlot'\n            );\n          } else {\n            return slots.filter(\n              (slot) =>\n                slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.paymentForm.get('cardType.code').setValue(card.code);\n  }\n\n  monthSelected(month: string): void {\n    this.paymentForm.get('expiryMonth').setValue(month);\n  }\n\n  yearSelected(year: number): void {\n    this.paymentForm.get('expiryYear').setValue(year);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddressForm\n      .get('region.isocodeShort')\n      .setValue(region.isocodeShort);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n  protected checkoutStepUrlNext: string;\n  protected checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.routingService.go(this.checkoutStepUrlNext);\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some((error) => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.addressForm['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    const selectedSub = this.selectedAddress$.subscribe((selected) => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected componentFactoryResolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER,\n    vcr: ViewContainerRef\n  ) {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      vcr.createComponent(template);\n      this.renderedCallers.push({ caller, element: vcr.element });\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, thresholds: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new Map<string, OutletDirective>();\n\n  render(outlet: string): void {\n    if (this.outletRefs.size !== 0) {\n      this.outletRefs.get(outlet).render();\n    }\n  }\n\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.set(cxOutlet, context);\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService?: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n    this.outletRendererService.register(this.cxOutlet, this);\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach((obj) => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n    this.renderedTemplate.push(tmplOrFactory);\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super();\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ) {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n\n      const element = vcr?.element;\n      this.renderedCallers.push({ caller, element });\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected routingService: RoutingService) {\n    super();\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfig } from '@spartacus/core';\nimport { DEFAULT_LAUNCH_CONFIG } from './config/default-launch-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [provideConfig(DEFAULT_LAUNCH_CONFIG)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position represents the unique key for a page slot on a single page, but can\n   * be reused cross pages.\n   *\n   * The position is used to find the CMS components for the page slot. It is also\n   * added as an additional CSS class so that layoutt can be applied.\n   */\n  @Input() set position(value: string) {\n    this.position$.next(value);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  /**\n   * Maintains css classes introduced by the host and adds additional classes.\n   */\n  @Input() @HostBinding() class: string;\n\n  /**\n   * Indicates that the page slot is the last page slot above the fold.\n   */\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  /**\n   * Indicates that the components of the page slot haven't been loaded as long\n   * as the isPending state is true.\n   */\n  @HostBinding('class.cx-pending') isPending = true;\n\n  /**\n   * Indicates that the page slot doesn't contain any components. This is no\n   * longer used in spartacus, but kept for backwards compatibility.\n   */\n  @HostBinding('class.has-components') @Input() hasComponents = false;\n\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  components: ContentSlotComponentData[];\n\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    distinctUntilChanged(this.isDistinct)\n  );\n\n  /** Observes the components for the given page slot. */\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\n    map((slot) => slot?.components ?? [])\n  );\n\n  protected subscription: Subscription = new Subscription();\n\n  /** Keeps track of the pending components that must be loaded for the page slot */\n  private pendingComponentCount = 0;\n\n  /** Tracks the last used position, in case the page slot is used dynamically */\n  private lastPosition: string;\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected config: CmsConfig,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\n        this.components = value?.components || [];\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  protected decorate(slot: ContentSlotData): void {\n    let cls = this.class || '';\n\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\n      cls = cls.replace(this.lastPosition, '');\n    }\n    if (this.position$.value) {\n      cls += ` ${this.position$.value}`;\n      this.lastPosition = this.position$.value;\n    }\n\n    // host bindings\n    this.pending = slot?.components?.length || 0;\n    this.hasComponents = slot?.components?.length > 0;\n    if (cls && cls !== this.class) {\n      this.class = cls;\n    }\n\n    this.addSmartEditSlotClass(slot);\n  }\n\n  /**\n   * Sets the pending count for the page slot components. Once all pending components are\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\n   */\n  protected set pending(count: number) {\n    this.pendingComponentCount = count;\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  protected get pending(): number {\n    return this.pendingComponentCount;\n  }\n\n  /*\n   * Is triggered when a component is added to the view. This is used to\n   * update the pending count\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pending--;\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether the component should be\n   * rendered instantly or whether it should be deferred.\n   */\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = (this.config.cmsComponents[componentType] || {})\n      .deferLoading;\n    return { deferLoading };\n  }\n\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\n    return (\n      current.components &&\n      old.components?.length === current.components.length &&\n      !old.components.find(\n        (el, index) => el.uid !== current.components[index].uid\n      )\n    );\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        slot.properties,\n        this.elementRef.nativeElement,\n        this.renderer\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap((data) =>\n      combineLatest(\n        data.components.split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach((key) => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => Boolean(order)),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      breadcrumb.facetValueCode === params.categoryCode\n    );\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: facet.topValueCount || 0,\n          maxVisible: facet.topValueCount || 0,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string) {\n    return { query: new HttpUrlEncodingCodec().decodeValue(query) };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\n\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\nimport { Observable } from 'rxjs';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given facet when there are no\n   * facets available. This is a great experience for the keyboard user, who keep the\n   * focus on the activated facet all the time.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return !facetList.facets?.length ? facet.facetValueName : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input() isDialog: boolean;\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.closeList.emit(event);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService, RoutingService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(\n    protected storeDataService: StoreDataService,\n    protected route: ActivatedRoute,\n    protected routingService: RoutingService\n  ) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}