{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/components/form-components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/form-components/form-components.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","Injectable","args","providedIn","NgbModal","CurrentProductService","routingService","productService","getProduct","_this","getRouterState","pipe","map","state","params","filter","productCode","switchMap","get","RoutingService","ProductService","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","TIMES","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","PLUS","MINUS","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","staticStyleClasses","undefined","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","AddedToCartDialogComponent","modalService","cartService","fb","iconTypes","ICON_TYPE","quantity","firstUpdate","form","group","ngOnInit","entry$","tap","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","showItemIncrLabel","dismissModal","removeEntry","item","updateEntry","_a","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","static","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","Boolean","subscribe","stock","stockLevelStatus","stockLevel","maxQuantity","markForCheck","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","size","componentInstance","cart$","getActive","loaded$","getLoaded","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","OnlyNumberDirective","renderer","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","preventDefault","onKeyUp","target","onKeyDown","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","setProperty","keyCode","String","fromCharCode","Renderer2","HostListener","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","async","cartIsLoading","isValueChangeable","update","EventEmitter","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","debounceTime","manualChange","Number","ngOnChanges","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","input","event","handlers","ArrowDown","decrement","ArrowUp","increment","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","emit","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Output","FormComponentsModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","startsWith","GenericLinkModule","RouterModule","PaginationComponent","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","Math","floor","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","xs","sm","md","lg","xl","LayoutConfig","ServerConfig","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","startWith","getBreakpoint","innerWidth","distinctUntilChanged","of","windowWidth","getClosest","reverse","br","nativeWindow","MediaService","breakpointService","getImageUrl","getBaseUrl","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","altText","mediaFormats","reduce","set","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","handleMissing","loadHandler","errorHandler","MediaModule","SpinnerComponent","SpinnerModule","I18nModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","GlobalMessageModule","forRoot","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","service","getAll","items","getContext","ctx","forEach","getOptionLabel","getActiveItem","getLabel","setActive","take","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","cmsComponents","CMSSiteContextComponent","component","useClass","deps","SiteContextModule","entryComponents","StarRatingComponent","el","change","initialRate","setRate","rating","force","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","invalid","touched","dirty","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","getPotentialProductPromotionsForItem","entryPromotions","_c","tslib_1.__values","_d","promotion","description","consumedEntries","_e","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","_b","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","UrlModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialOrderPromotions","appliedOrderPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","skipWhile","isEmpty","go","cxRoute","CartPageLayoutHandler","handle","slots$","pageTemplate","section","combineLatest","slots","totalItems","slot","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartModule","PAGE_LAYOUT_HANDLER","InjectionToken","CartComponentModule","CheckoutConfigService","checkoutConfig","routingConfigService","steps","checkout","getCheckoutStep","currentStepType","getCheckoutStepIndex","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","routeName","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","id","name","CheckoutStepType","CheckoutGuard","router","parseUrl","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","AuthGuard","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ShippingAddressSetGuard","checkoutDetailsService","checkoutConfigService","serverConfig","checkoutStep","production","console","warn","deliveryAddress","keys","DeliveryModeComponent","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","changedOption","supportedDeliveryModes$","getSupportedDeliveryModes","selectedDeliveryMode$","getSelectedDeliveryMode","loadSupportedDeliveryModes","deliveryMode","currentDeliveryModeId","changeMode","setDeliveryMode","deliveryModeSub","back","ngOnDestroy","unsubscribe","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","delete","setDefault","send","edit","CardModule","DeliveryModeSetGuard","BillingAddressFormComponent","countrySelected","country","billingAddress","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","userPaymentService","months","years","sameAsShippingAddress","goBack","closeForm","addPaymentInfo","payment","defaultPayment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","add","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","address","getAddressCardContent","region","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","UserPaymentService","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","isLoading$","getPaymentMethodsLoading","loadPaymentMethods","existingPaymentMethods$","getPaymentMethods","getPaymentDetailsSub","paymentInfo","field","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","title","img","getCardIcon","actions","header","paymentMethodSelected","showNewPaymentForm","hideNewPaymentForm","newPayment","addNewPaymentMethod","getDeliveryAddressSub","createPaymentDetails","setPaymentDetails","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","userAddressService","deliveryAddress$","paymentDetails$","deliveryMode$","selected","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","UserAddressService","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","selectedCountry$","BehaviorSubject","showCancelBtn","submitAddress","backToAddress","defaultAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","regions$","getRegions","regions","regionControl","errors","some","subject","addressData","patchValue","regionSelected","titleSelected","toggleDefaultAddress","AddressFormModule","ShippingAddressComponent","newAddressFormManuallyOpened","cards","selectedAddress$","goTo","getAddressesLoading","existingAddresses$","getAddresses","cards$","asObservable","addresses","textDefaultShippingAddress","textShipToThisAddress","loadDetails","loadAddresses","setAddressSub","setAddress","goNext","selectedAddressSub","addressSelected","addAddress","newAddress","createAndSetAddress","setDeliveryAddress","addNewAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","CustomFormValidators","emailDomainValidator","control","match","InvalidEmail","emailValidator","passwordValidator","InvalidPassword","LoginFormComponent","auth","authRedirectService","userId","password","login","authorize","sub","getUserToken","access_token","redirect","AuthService","AuthRedirectService","LoginFormModule","UserModule","ReturningCustomerLoginComponent","NotAuthGuard","LoginComponent","user$","token","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","detectChanges","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cxApi","CxApiService","getCmsDataForComponent","element","parentElement","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","removeChild","CmsService","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","LoginModule","LogoutGuard","cms","routing","semanticPathService","logout","hasPage","PageType","CONTENT_PAGE","SemanticPathService","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","ɵ0","LogoutModule","forChild","RegisterComponent","userRegistrationForm","email","passwordconf","newsletter","termsandconditions","requiredTrue","validator","matchPassword","submit","userRegisterFormData","register","subscription","globalMessageEntities","message","ac","NotEqual","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","obj","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","componentRoutes","updateRouting","navigateByUrl","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","getNextPageContext","withLatestFrom","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","hasNotFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","useFactory","APP_INITIALIZER","cmsRoute","addCmsRoute","ɵ0$1","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","htmlLangProvider","setHtmlLangAttribute","LanguageService","languageService","lang","documentElement","initSeoService","SeoModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenu","MainModule","layoutModules","LayoutModule","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","authService","translationService","Subscription","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","success","onSuccess","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentChanged","consentGiven","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","onConsentChange","given","ConsentManagementComponent","userConsentService","subscriptions","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","getConsents","templateList","consentsExists","loadConsents","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","giveConsent","version","withdrawConsent","UserConsentService","ConsentManagementModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","UserOrderService","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","moduleComponents","OrderDetailsModule","ɵ0$2","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","sort","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","userServiceSub","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","queryParams","isPasswordReset","reset","resetPassword","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","isNotValid","onSubmit","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitClicked","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","user","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","breadcrumbs","BreadcrumbModule","CmsPageTitleModule","NavigationComponentService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","childNode","CategoryNavigationComponent","node$","styleClass$","NavigationUIComponent","flyout","isOpen","openNodes","NavigationEnd","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","getDepth","depth","breakNodesIntoColumns","columnSize","clonedNode","newSubNode","changes","currentValue","NavigationComponent","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","query","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","className","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","transform","trim","Pipe","SearchBoxModule","ProductModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationThankYouMessageComponent","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationTotalsComponent","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","price","images","PRIMARY","ProductReferenceService","ProductCarouselComponent","items$","productCodes","codes","products$","CarouselService","itemWidth","clientWidth","totalWidth","round","CarouselComponent","minItemPixelSize","indicatorIcon","previousIcon","nextIcon","activeSlide","size$","slide","CarouselModule","ProductCarouselModule","ProductReferencesComponent","current","productCode$","productReferenceTypes","JSON","parse","displayProductTitles","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","querySelector","click","h3Elements","h3Element","innerHTML","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","ViewModes","ProductListComponent","productSearchService","searchConfig","gridMode$","createOptionsByUrlParams","categoryCode","brandCode","newConfig","itemPerPage","updateParams$","model$","searchResult","getCategoryTitle","categoryTitle","facetValueName","totalResults","viewPage","pageNumber","setGridMode","ProductSearchService","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","facets","facet","visible","activeFacetValueCode","searchResult$","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","CmsModule","ProductAttributesComponent","ProductReviewsComponent","reviewService","isWritingReview","initialMaxListItems","reviews$","getByProductCode","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","review","headline","comment","alias","reviewerName","ProductReviewService","ProductReviewsModule","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductSpecsTabComponent","ProductReviewsTabComponent","ProductImagesComponent","_imageContainer$","imageContainer$","showImage","imageContainer","startWaiting","isMainImageContainer","currentContainer","zoom","clearWaitList","waiting","ProductImagesModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$1","pageLabel","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","forgotPassword","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","brand","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","provideConfigFromMetaTags","StorefrontModule","ngModule","provideConfig","SmartEditModule","PersonalizationModule","OccModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductService, RoutingService, Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(productCode => !!productCode),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  TIMES = 'TIMES',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  PLUS = 'PLUS',\n  MINUS = 'MINUS',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      TIMES: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      MINUS: 'fas fa-minus',\n      PLUS: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n\n  quantity = 0;\n  firstUpdate = true;\n  showItemIncrLabel: boolean;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n\n          // Announce in header if Add To Cart button has incremented product\n          this.showItemIncrLabel = this.firstUpdate && entry.quantity > 1;\n          // Any updates after the first will be flagged as false\n          this.firstUpdate = false;\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit {\n  @Input() productCode: string;\n\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.hasStock = true;\n    } else {\n      this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe(product => {\n          this.productCode = product.code;\n\n          if (\n            product.stock &&\n            product.stock.stockLevelStatus !== 'outOfStock' &&\n            product.stock.stockLevel > 0\n          ) {\n            this.maxQuantity = product.stock.stockLevel;\n            this.hasStock = true;\n          } else {\n            this.hasStock = false;\n          }\n\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    this.openModal();\n    this.cartService.addEntry(this.productCode, this.quantity);\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    if (e.key) {\n      return e.key;\n    } else {\n      // for old browsers\n      if (e.keyCode && String.fromCharCode) {\n        switch (e.keyCode) {\n          case 8:\n            return 'Backspace';\n          case 9:\n            return 'Tab';\n          case 27:\n            return 'Escape';\n          case 37:\n            return 'ArrowLeft';\n          case 39:\n            return 'ArrowRight';\n          default:\n            return String.fromCharCode(e.keyCode);\n        }\n      }\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.inputValue.valueChanges.pipe(debounceTime(300)).subscribe(value => {\n      if (value) {\n        this.manualChange(Number(value));\n      }\n    });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { OnlyNumberDirective } from '../../directives/only-number/only-number.directive';\nimport { ItemCounterComponent } from './item-counter/item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent, OnlyNumberDirective],\n  exports: [ItemCounterComponent],\n})\nexport class FormComponentsModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { ServerConfig } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig extends ServerConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl = (url: string) => {\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  };\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n  styleUrls: ['./global-message.component.scss'],\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { GlobalMessageModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    IconModule,\n    I18nModule,\n    GlobalMessageModule.forRoot(),\n  ],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"LANGUAGE\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"CURRENCY\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            items.forEach(item => {\n              return (item.label = this.getOptionLabel(item, ctx));\n            });\n            return of(items);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map(ctx => this.getInjectedService(ctx)),\n      filter(Boolean)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(map(data => data.context));\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.el.nativeElement.style.setProperty(\n        '--star-fill',\n        value || this.initialRate\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Checks is the `formControlName` field valid in the provided `form`.\n   *\n   * If it's NOT valid, the method returns `true`.\n   *\n   * @param form a form whose field to check\n   * @param formControlName a field name\n   * @param submitted is the form submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    return (\n      form.get(formControlName).invalid &&\n      (submitted ||\n        (form.get(formControlName).touched && form.get(formControlName).dirty))\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { FormComponentsModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    FormComponentsModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { FormComponentsModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    FormComponentsModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\nimport { CartService, Cart, OrderEntry } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): Cart[] {\n    const potentialPromotions = cart.potentialOrderPromotions || [];\n    const appliedPromotions = cart.appliedOrderPromotions || [];\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { skipWhile, map, switchMap } from 'rxjs/operators';\n\nimport { CartService, RoutingService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getLoaded().pipe(\n      skipWhile(loaded => !loaded),\n      switchMap(() => this.cartService.getActive()),\n      map(cart => {\n        if (this.cartService.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n}\n","import { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest(slots$, this.cartService.getActive()).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService\n    .getActive()\n    .pipe(map(cart => cart.deliveryItemsQuantity || 0));\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CartModule,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\n\n@NgModule({\n  imports: [\n    CartModule,\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n  ],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n  ],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useClass: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    steps: Array<CheckoutStep>;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { CheckoutConfig } from './config/checkout-config';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutStep, CheckoutStepType } from './model/checkout-step.model';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable()\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute) {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  private getStepUrlFromActivatedRoute(activatedRoute: ActivatedRoute) {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string) {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutConfig } from './checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\n\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { Observable, of } from 'rxjs';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.config.checkout.steps[0].routeName\n        ).paths[0]\n      )\n    );\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AuthGuard, CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  PaymentDetails,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n  filter,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => cartData.code),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ServerConfig, Address, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.SHIPPING_ADDRESS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\nimport {\n  DeliveryMode,\n  CheckoutDeliveryService,\n  RoutingService,\n} from '@spartacus/core';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  changedOption: boolean;\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.changedOption = false;\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n    this.selectedDeliveryMode$ = this.checkoutDeliveryService.getSelectedDeliveryMode();\n\n    this.checkoutDeliveryService.loadSupportedDeliveryModes();\n\n    this.selectedDeliveryMode$\n      .pipe(\n        map((deliveryMode: DeliveryMode) =>\n          deliveryMode && deliveryMode.code ? deliveryMode.code : null\n        )\n      )\n      .subscribe(code => {\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          this.currentDeliveryModeId = code;\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.changedOption = true;\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    if (this.changedOption) {\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n\n    this.deliveryModeSub = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .subscribe(data => {\n        if (data && data.code === this.currentDeliveryModeId) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n      });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, ShippingAddressSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss'],\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { ServerConfig, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.DELIVERY_MODE\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Country } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent {\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutPaymentService,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  addPaymentInfo = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    country: this.fb.group({\n      isocode: ['', Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest(this.countries$, this.shippingAddress$).pipe(\n      map(([countries, address]) => {\n        return !!countries.filter(\n          (country: Country): boolean =>\n            country.isocode === address.country.isocode\n        ).length;\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.addPaymentInfo.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n\n  private getPaymentDetailsSub: Subscription;\n  private getDeliveryAddressSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          paymentInfo => paymentInfo && Object.keys(paymentInfo).length !== 0\n        )\n      )\n      .subscribe(paymentInfo => {\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.globalMessageService.add(\n                {\n                  key: 'paymentMethods.invalidField',\n                  params: { field: paymentInfo[key] },\n                },\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          const card: Card = {\n            title: payment.defaultPayment ? textDefaultPaymentMethod : '',\n            textBold: payment.accountHolderName,\n            text: [payment.cardNumber, textExpires],\n            img: this.getCardIcon(payment.cardType.code),\n            actions: [{ name: textUseThisPayment, event: 'send' }],\n          };\n          if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n            card.header = textSelected;\n          }\n          return card;\n        }\n      )\n    );\n  }\n\n  paymentMethodSelected(paymentDetails: PaymentDetails) {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  next(): void {\n    this.addPaymentInfo({\n      payment: this.selectedPayment,\n      newPayment: false,\n    });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  addNewPaymentMethod({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress: Address;\n  }): void {\n    this.getDeliveryAddressSub = this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        billingAddress = address;\n      });\n    this.addPaymentInfo({\n      payment: paymentDetails,\n      billingAddress,\n      newPayment: true,\n    });\n  }\n\n  addPaymentInfo({\n    newPayment,\n    payment,\n    billingAddress,\n  }: {\n    newPayment: boolean;\n    payment: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    payment.billingAddress = billingAddress\n      ? billingAddress\n      : this.deliveryAddress;\n\n    if (newPayment) {\n      this.checkoutPaymentService.createPaymentDetails(payment);\n      this.checkoutService.clearCheckoutStep(3);\n    }\n\n    // if the selected payment is the same as the cart's one\n    if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n      this.checkoutPaymentService.setPaymentDetails(payment);\n      this.checkoutService.clearCheckoutStep(3);\n    }\n\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .subscribe(data => {\n        if (data.accountHolderName && data.cardNumber) {\n          this.routingService.go(this.checkoutStepUrlNext);\n\n          return;\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n    if (this.getDeliveryAddressSub) {\n      this.getDeliveryAddressSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CheckoutModule,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ServerConfig, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.PAYMENT_DETAILS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\n\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    this.checkoutDeliveryService.verifyAddress(this.address.value);\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent],\n})\nexport class AddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../checkout-config.service';\nimport { CheckoutStepType } from '../../model/checkout-step.model';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  cards: Card[] = [];\n  isLoading$: Observable<boolean>;\n  selectedAddress: Address;\n  goTo: CheckoutStepType;\n  setAddress: Address;\n  setAddressSub: Subscription;\n  selectedAddressSub: Subscription;\n  selectedAddress$: BehaviorSubject<Address> = new BehaviorSubject<Address>(\n    null\n  );\n  cards$: Observable<CardWithAddress[]>;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.cards$ = combineLatest(\n      this.existingAddresses$,\n      this.selectedAddress$.asObservable(),\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected')\n    ).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    this.cartService.loadDetails();\n    this.userAddressService.loadAddresses();\n\n    this.setAddressSub = this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        this.setAddress = address;\n        this.selectedAddress$.next(address);\n        if (this.goTo) {\n          this.goNext();\n          this.goTo = null;\n        }\n      });\n    this.selectedAddressSub = this.selectedAddress$.subscribe(address => {\n      this.selectedAddress = address;\n    });\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n    const card: Card = {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n\n    this.cards.push(card);\n\n    return card;\n  }\n\n  addressSelected(address: Address): void {\n    this.selectedAddress$.next(address);\n  }\n\n  next(): void {\n    this.addAddress({ address: this.selectedAddress, newAddress: false });\n  }\n\n  addAddress({\n    newAddress,\n    address,\n  }: {\n    newAddress: boolean;\n    address: Address;\n  }): void {\n    if (newAddress) {\n      this.checkoutDeliveryService.createAndSetAddress(address);\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      return;\n    }\n    if (\n      this.setAddress &&\n      this.selectedAddress &&\n      this.setAddress.id === this.selectedAddress.id\n    ) {\n      this.goNext();\n    } else {\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      this.checkoutDeliveryService.setDeliveryAddress(address);\n    }\n  }\n\n  addNewAddress(address: Address): void {\n    this.addAddress({ address, newAddress: true });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goBack: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goBack) {\n      this.back();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutModule } from '@spartacus/core';\nimport { CartComponentModule } from '../cart/cart.module';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartComponentModule,\n    CheckoutModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n  // @todo: should we keep below provider here?\n  providers: [CheckoutConfigService],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(\n      // Email Standard RFC 5322:\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ // tslint:disable-line\n    )\n      ? null\n      : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(\n      '^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_+{};:.,]).{6,}$'\n    )\n      ? null\n      : { InvalidPassword: true };\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n  }\n\n  login(): void {\n    this.auth.authorize(\n      this.form.controls.userId.value,\n      this.form.controls.password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import {\n  Injectable,\n  ComponentFactoryResolver,\n  Inject,\n  Renderer2,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        script = renderer.createElement('script');\n        this.loadedWebComponents[path] = script;\n        script.setAttribute('src', path);\n        renderer.appendChild(this.document.body, script);\n\n        if (isPlatformBrowser(this.platform)) {\n          script.onload = () => {\n            script.onload = null;\n          };\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  CxApiService,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private cd: ChangeDetectorRef,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      this.cd.detectChanges();\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: this.getCmsDataForComponent(),\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.renderer.removeChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PAGE_LAYOUT_HANDLER, PageLayoutHandler } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest(this.page$, this.breakpointService.breakpoint$).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      return config.slots;\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(Boolean));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (this.config.production) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  Title,\n  UserSignUp,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  subscription: Subscription;\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: [false],\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private auth: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n  }\n\n  submit(): void {\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      titleCode,\n    } = this.userRegistrationForm.value;\n    const userRegisterFormData: UserSignUp = {\n      firstName,\n      lastName,\n      uid: email,\n      password,\n      titleCode,\n    };\n    this.userService.register(userRegisterFormData);\n\n    if (!this.subscription) {\n      this.subscription = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.globalMessageService\n      .get()\n      .pipe(filter(data => Object.keys(data).length > 0))\n      .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n        if (\n          globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR].some(\n            message => message === 'This field is required.'\n          )\n        ) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.globalMessageService.add(\n            { key: 'register.titleRequired' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  private matchPassword(ac: AbstractControl): { NotEqual: boolean } {\n    if (ac.get('password').value !== ac.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule, UserModule } from '@spartacus/core';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(pageContext: PageContext, routes: Route[]): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageContext.id.startsWith('/') &&\n      pageContext.id.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageContext.id.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: pageContext,\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  PageContext,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\n\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    private routingService: RoutingService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.hasPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([hasPage, pageContext]) =>\n        hasPage\n          ? this.resolveCmsPageLogic(pageContext, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageContext.id)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.hasPage(notFoundCmsPageContext).pipe(\n      switchMap(hasNotFoundPage => {\n        if (hasNotFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() => this.resolveCmsPageLogic(pageContext, route, state))\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { ServerConfig } from '@spartacus/core';\n\nexport abstract class PWAModuleConfig extends ServerConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { PWAModuleConfig } from '../pwa.module-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (pwaConfig.production && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Title, Meta, MetaDefinition } from '@angular/platform-browser';\nimport { PageMetaService, PageMeta, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { SeoMetaService } from './seo-meta.service';\nimport { htmlLangProvider } from './html-lang-provider';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { UserComponentModule } from '../../cms-components/user/index';\nimport { SeoModule } from '../../cms-structure/index';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/index';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/index';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    UserComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/index';\nimport { LayoutConfig } from './config/layout-config';\nimport { MainModule } from './main/main.module';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [MainModule, ...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [MainModule, ...layoutModules],\n})\nexport class LayoutModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab.flexType = tab.typeCode;\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport { Address, UserAddressService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(private userAddressService: UserAddressService) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Address, UserAddressService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(private userAddressService: UserAddressService) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  styleUrls: ['./close-account-modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  consentGiven = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentChanged.emit({\n      given: !this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, skipWhile, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest(\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      map(\n        ([consentLoading, giveConsentLoading, withdrawConsentLoading]) =>\n          consentLoading || giveConsentLoading || withdrawConsentLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      tap(templateList => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      })\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${\n              address.postalCode\n            }`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n              billingAddress.postalCode\n            }`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n    }),\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit, OnDestroy {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  userServiceSub: Subscription;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  ngOnDestroy(): void {\n    if (this.userServiceSub) {\n      this.userServiceSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n  styleUrls: ['./update-email-form.component.scss'],\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n  styleUrls: ['./update-email.component.scss'],\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n  styleUrls: ['./update-password-form.component.scss'],\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n  styleUrls: ['./update-profile-form.component.scss'],\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest(\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home')\n    ).pipe(\n      map(([meta, textHome]) =>\n        meta.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable, Optional } from '@angular/core';\nimport { CmsNavigationComponent, CmsService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable()\nexport class NavigationComponentService {\n  constructor(\n    protected cmsService: CmsService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsNavigationComponent>\n  ) {}\n\n  public getComponentData(): Observable<CmsNavigationComponent> {\n    return this.componentData.data$;\n  }\n\n  public createNavigation(): Observable<NavigationNode> {\n    return combineLatest(\n      this.getComponentData(),\n      this.getNavigationNode()\n    ).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(): Observable<NavigationNode> {\n    return this.getComponentData().pipe(\n      filter(Boolean),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node = {};\n\n    node['title'] = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node['children'] = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node['title']) {\n        node['title'] = item.linkName;\n      }\n      node['url'] = item.url;\n      // if \"NEWWINDOW\", target is true\n      node['target'] = item.target;\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationComponentService } from '../navigation/navigation.component.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode();\n\n  styleClass$: Observable<string> = this.service\n    .getComponentData()\n    .pipe(map(d => d.styleClass));\n\n  constructor(public service: NavigationComponentService) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  HostBinding,\n  Renderer2,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\nconst COLUMN_SIZE = 10;\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnChanges {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n\n  constructor(private router: Router, private renderer: Renderer2) {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => this.clear());\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (this.openNodes.includes(<HTMLElement>event.currentTarget)) {\n      this.openNodes = this.openNodes.filter(n => n !== event.currentTarget);\n      this.renderer.removeClass(<HTMLElement>event.currentTarget, 'is-open');\n    } else {\n      this.openNodes.push(<HTMLElement>event.currentTarget);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  // Recursively break nodes with more than COLUMN_SIZE into sub nodes to create columns\n  breakNodesIntoColumns(\n    node: NavigationNode,\n    columnSize: number\n  ): NavigationNode {\n    if (node.hasOwnProperty('children')) {\n      // Check if too many children for column\n      if (node.children.length > columnSize) {\n        const clonedNode: NavigationNode = { ...node };\n        node.children = [];\n        // Break node into subnodes with children length of columnSize\n        while (clonedNode.children.length > 0) {\n          const newSubNode: NavigationNode = { title: null, children: [] };\n          newSubNode.children.push(\n            ...clonedNode.children.splice(0, columnSize)\n          );\n          node.children.push(newSubNode);\n        }\n      }\n\n      // Recursively do the same with child nodes\n      node.children.forEach(child => {\n        child = this.breakNodesIntoColumns(child, columnSize);\n      });\n    }\n\n    return node;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Recursively break into columns once node exists on component\n    if (changes.node.currentValue) {\n      this.node = this.breakNodesIntoColumns(this.node, COLUMN_SIZE);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationComponentService } from './navigation.component.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation();\n\n  styleClass$: Observable<string> = this.service\n    .getComponentData()\n    .pipe(map(d => d.styleClass));\n\n  constructor(public service: NavigationComponentService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsService,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\nimport { NavigationComponentService } from './navigation.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n          providers: [\n            {\n              provide: NavigationComponentService,\n              useClass: NavigationComponentService,\n              deps: [CmsService, CmsComponentData],\n            },\n          ],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, CmsService, ConfigModule } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationComponentService } from '../navigation/navigation.component.service';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n          providers: [\n            {\n              provide: NavigationComponentService,\n              useClass: NavigationComponentService,\n              deps: [CmsService, CmsComponentData],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationComponentService } from '../navigation/navigation.component.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode();\n\n  styleClass$: Observable<string> = this.service\n    .getComponentData()\n    .pipe(map(d => d.styleClass));\n\n  constructor(public service: NavigationComponentService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, CmsService, ConfigModule } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationComponentService } from '../navigation/navigation.component.service';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n          providers: [\n            {\n              provide: NavigationComponentService,\n              useClass: NavigationComponentService,\n              deps: [CmsService, CmsComponentData],\n            },\n          ],\n        },\n      },\n    }),\n    GenericLinkModule,\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config)\n    ).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config)\n    ).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a singe product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  ProductModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ProductModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${\n            deliveryAddress.postalCode\n          }`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n            billingAddress.postalCode\n          }`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CheckoutModule,\n  I18nModule,\n  ConfigModule,\n  CmsConfig,\n  AuthGuard,\n} from '@spartacus/core';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { OrderConfirmationGuard } from './guards/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    CheckoutModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CarouselItem } from '../../../shared/components/carousel/carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<CarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<CarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map(refs =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): CarouselItem {\n    const item: CarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsProductCarouselComponent } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CarouselItem } from '../../../../shared/components/carousel/carousel.model';\nimport { ProductCarouselService } from '../product-carousel.service';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  title$: Observable<string> = this.component.data$.pipe(\n    map(data => data.title)\n  );\n\n  items$: Observable<CarouselItem[]> = this.component.data$.pipe(\n    filter(Boolean),\n    map(data => data.productCodes.split(' ')),\n    map(codes => codes.map(code => this.service.loadProduct(code))),\n    switchMap((products$: Observable<CarouselItem>[]) =>\n      combineLatest(products$)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductCarouselComponent>,\n    protected service: ProductCarouselService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items shown in the carousel is calculated dividing\n   * the host element width with the minimum item width.\n   */\n  getSize(nativeElement: HTMLElement, itemWidth: number) {\n    return fromEvent(this.winRef.nativeWindow, 'resize').pipe(\n      map(_ => (nativeElement as HTMLElement).clientWidth),\n      startWith((nativeElement as HTMLElement).clientWidth),\n      debounceTime(100),\n      map((totalWidth: any) => {\n        return Math.round(totalWidth / itemWidth);\n      }),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselItem } from './carousel.model';\nimport { CarouselService } from './carousel.service';\n\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n})\nexport class CarouselComponent implements OnInit {\n  @Input() title: string;\n\n  @Input() items: CarouselItem[];\n\n  /**\n   * Specifies the min pixel used per product. This value is used\n   * to calculate the amount of items we can fit into the available with\n   * of the host element. The number of items is not related the breakpoints,\n   * which means that a carousel can be placed in different layouts,\n   * regardless of the overall size.\n   */\n  @Input() minItemPixelSize = 300;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  /**\n   * The group with items which is currently active.\n   */\n  activeSlide = 0;\n\n  /**\n   * The number of items that should be rendered in the carousel.\n   */\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    this.size$ = this.service.getSize(\n      this.el.nativeElement,\n      this.minItemPixelSize\n    );\n  }\n\n  select(slide: number) {\n    this.activeSlide = slide;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsProductReferencesComponent } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\nimport { ProductCarouselService } from '../product-carousel.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  items$ = combineLatest([this.productCode$, this.component.data$]).pipe(\n    switchMap(([code, data]) =>\n      this.service.getProductReferences(\n        code,\n        data.productReferenceTypes,\n        Boolean(JSON.parse(data.displayProductTitles)),\n        Boolean(JSON.parse(data.displayProductPrices))\n      )\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected service: ProductCarouselService,\n    protected current: CurrentProductService\n  ) {}\n\n  get productCode$(): Observable<string> {\n    return this.current.getProduct().pipe(\n      filter(Boolean),\n      map(p => p.code)\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  ProductSearchPage,\n  ProductSearchService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit {\n  query: string;\n  categoryCode: string;\n  brandCode: string;\n  itemPerPage: number;\n\n  model$: Observable<ProductSearchPage>;\n  searchConfig: SearchConfig = {};\n  categoryTitle: string;\n  options: SearchConfig;\n  updateParams$: Observable<Params>;\n  gridMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    private activatedRoute: ActivatedRoute,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  update(): void {\n    const { queryParams } = this.activatedRoute.snapshot;\n    this.options = this.createOptionsByUrlParams();\n\n    if (this.categoryCode && this.categoryCode !== queryParams.categoryCode) {\n      this.query = ':relevance:category:' + this.categoryCode;\n    }\n    if (this.brandCode && this.brandCode !== queryParams.brandCode) {\n      this.query = ':relevance:brand:' + this.brandCode;\n    }\n    if (!this.query && queryParams.query) {\n      this.query = queryParams.query;\n    }\n    this.search(this.query, this.options);\n  }\n\n  createOptionsByUrlParams(): SearchConfig {\n    const { queryParams } = this.activatedRoute.snapshot;\n    const newConfig = {\n      ...queryParams,\n    };\n    delete newConfig.query;\n    const options = {\n      ...this.searchConfig,\n      ...newConfig,\n      pageSize: this.itemPerPage || 10,\n    };\n    if (this.categoryCode) {\n      options.categoryCode = this.categoryCode;\n    }\n    if (this.brandCode) {\n      options.brandCode = this.brandCode;\n    }\n\n    return options;\n  }\n\n  ngOnInit(): void {\n    this.updateParams$ = this.activatedRoute.params.pipe(\n      tap(params => {\n        this.categoryCode = params.categoryCode;\n        this.brandCode = params.brandCode;\n        this.query = params.query;\n        this.update();\n      })\n    );\n\n    this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n      this.gridMode$.next(\n        template === 'ProductGridPageTemplate' ? ViewModes.Grid : ViewModes.List\n      );\n    });\n\n    // clean previous search result\n    this.productSearchService.clearResults();\n\n    this.model$ = this.productSearchService.getResults().pipe(\n      tap(searchResult => {\n        if (Object.keys(searchResult).length === 0) {\n          this.search(this.query, this.options);\n        } else {\n          this.getCategoryTitle(searchResult);\n        }\n      }),\n      filter(searchResult => Object.keys(searchResult).length > 0)\n    );\n  }\n\n  protected getCategoryTitle(data: ProductSearchPage): string {\n    if (data.breadcrumbs && data.breadcrumbs.length > 0) {\n      this.categoryTitle = data.breadcrumbs[0].facetValueName;\n    } else if (!this.query.includes(':relevance:')) {\n      this.categoryTitle = this.query;\n    }\n    if (this.categoryTitle) {\n      this.categoryTitle =\n        data.pagination.totalResults + ' results for ' + this.categoryTitle;\n    }\n\n    return this.categoryTitle;\n  }\n\n  viewPage(pageNumber: number): void {\n    const { queryParams } = this.activatedRoute.snapshot;\n    this.search(queryParams.query, { currentPage: pageNumber });\n  }\n\n  sortList(sortCode: string): void {\n    this.search(this.query, { sortCode: sortCode });\n  }\n\n  setGridMode(mode: ViewModes): void {\n    this.gridMode$.next(mode);\n  }\n\n  protected search(query: string, options?: SearchConfig): void {\n    if (this.query) {\n      if (options) {\n        // Overide default options\n        this.searchConfig = {\n          ...this.searchConfig,\n          ...options,\n        };\n      }\n\n      this.productSearchService.search(query, this.searchConfig);\n    }\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  Facet,\n  ProductSearchPage,\n  ProductSearchService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  updateParams$: Observable<Params>;\n\n  get visibleFacets(): Facet[] {\n    if (!this.searchResult.facets) {\n      return [];\n    }\n    return this.searchResult.facets.filter(facet => facet.visible);\n  }\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productSearchService: ProductSearchService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.updateParams$ = this.activatedRoute.params.pipe(\n      tap(params => {\n        this.activeFacetValueCode = params.categoryCode || params.brandCode;\n      })\n    );\n\n    this.searchResult$ = this.productSearchService.getResults().pipe(\n      tap(searchResult => {\n        this.searchResult = searchResult;\n        if (this.searchResult.facets) {\n          this.searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      }),\n      filter(searchResult => Object.keys(searchResult).length > 0)\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productSearchService.search(this.queryCodec.decodeValue(query));\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  FormComponentsModule,\n  ListNavigationModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    FormComponentsModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  CmsModule,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CmsModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(Boolean),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule } from '@spartacus/core';\nimport {\n  FormComponentsModule,\n  StarRatingModule,\n} from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    FormComponentsModule,\n    I18nModule,\n    StarRatingModule,\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsModule,\n  ConfigModule,\n  I18nModule,\n  ProductService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CartSharedModule } from '../../cart/index';\n// guards\nimport { ProductAttributesComponent } from './product-attributes/product-attributes.component';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsComponent } from './product-reviews/product-reviews.component';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\nimport { ProductDetailsTabComponent } from './product-details-tab/product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    CmsModule,\n    OutletModule,\n    ProductReviewsModule,\n    ProductDetailsTabModule,\n    PageComponentModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent, ProductReviewsComponent],\n  entryComponents: [ProductAttributesComponent],\n  providers: [ProductService, WindowRef, RoutingService],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\nconst WAITING_CLASS = 'is-waiting';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  waiting: HTMLElement;\n\n  product$: Observable<Product> = this.currentProductService\n    .getProduct()\n    .pipe(filter(Boolean));\n\n  private _imageContainer$ = new BehaviorSubject(null);\n\n  imageContainer$ = combineLatest(this.product$, this._imageContainer$).pipe(\n    map(([product, container]) =>\n      container\n        ? container\n        : product.images && product.images.PRIMARY\n        ? product.images.PRIMARY\n        : {}\n    )\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  showImage(event: MouseEvent, imageContainer): void {\n    this.startWaiting(<HTMLElement>event.target);\n    this._imageContainer$.next(imageContainer);\n  }\n\n  isMainImageContainer(currentContainer): Observable<boolean> {\n    return this.imageContainer$.pipe(\n      map(\n        (container: any) =>\n          container &&\n          container.zoom &&\n          currentContainer.zoom &&\n          container.zoom.url === currentContainer.zoom.url\n      )\n    );\n  }\n\n  loadHandler(): void {\n    this.clearWaitList();\n  }\n\n  private startWaiting(el: HTMLElement): void {\n    this.clearWaitList();\n    el.classList.add(WAITING_CLASS);\n    this.waiting = el;\n  }\n\n  private clearWaitList(): void {\n    if (this.waiting) {\n      this.waiting.classList.remove(WAITING_CLASS);\n      delete this.waiting;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\n\n@NgModule({\n  imports: [\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    // TODO:#2811 - uncomment to enable\n    // StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  UrlSegment,\n  UrlMatchResult,\n  Route,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName [ / ** ]'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'TopHeaderSlot',\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'] },\n  logout: { paths: ['logout'] },\n  register: { paths: ['login/register'] },\n  forgotPassword: { paths: ['login/forgot-password'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['termsAndConditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { NgModule } from '@angular/core';\nimport {\n  ConfigModule,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [\n    CoreRoutingModule,\n    ConfigModule.withConfig(defaultRoutingConfig),\n    CmsRouteModule,\n  ],\n})\nexport class RoutingModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  AuthModule,\n  ConfigModule,\n  I18nModule,\n  provideConfigFromMetaTags,\n  SiteContextModule,\n  StateModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    AuthModule.forRoot(),\n    ConfigModule.forRoot(),\n    RoutingModule,\n    I18nModule.forRoot(),\n\n    SiteContextModule.forRoot(),\n\n    LayoutModule,\n  ],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    StorefrontFoundationModule,\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitely\n    OccModule,\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n  ],\n})\nexport class StorefrontModule {\n  static withConfig(config?: StorefrontConfig): ModuleWithProviders {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [LayoutModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(config?: StorefrontConfig): ModuleWithProviders {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}