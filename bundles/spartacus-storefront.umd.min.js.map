{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-launch-dialog.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/layout/direction/config/direction.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/default-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/default-anonymous-consent-layout.config.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/split-view/split-view-deactivate.guard.ts","ng://@spartacus/storefront/shared/components/split-view/split-view.service.ts","ng://@spartacus/storefront/shared/components/split-view/split/split-view.component.ts","ng://@spartacus/storefront/shared/components/split-view/view/view.component.ts","ng://@spartacus/storefront/shared/components/split-view/split-view.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/table/config/table.config.ts","ng://@spartacus/storefront/shared/components/table/table.component.ts","ng://@spartacus/storefront/shared/components/table/table.module.ts","ng://@spartacus/storefront/shared/components/table/table.service.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-structure/services/feature-modules.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-components.service.ts","ng://@spartacus/storefront/shared/utils/combined-injector.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/lazy-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/asm-toggle-ui/asm-toggle-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/default-asm-layout.config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/direction/config/direction.config.ts","ng://@spartacus/storefront/layout/direction/config/default-direction.config.ts","ng://@spartacus/storefront/layout/direction/direction.service.ts","ng://@spartacus/storefront/layout/direction/direction.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-template-style.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/events/page/page.events.ts","ng://@spartacus/storefront/events/cart/cart-page.events.ts","ng://@spartacus/storefront/events/cart/cart-page-event.builder.ts","ng://@spartacus/storefront/events/cart/cart-page-event.module.ts","ng://@spartacus/storefront/events/page/page-event.builder.ts","ng://@spartacus/storefront/events/page/page-event.module.ts","ng://@spartacus/storefront/events/product/product-page.events.ts","ng://@spartacus/storefront/events/product/product-page-event.builder.ts","ng://@spartacus/storefront/events/product/product-page-event.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/events/events.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","DIALOG_TYPE","LAUNCH_CALLER","BREAKPOINT","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","ar","error","__spread","concat","OutletPosition","LayoutConfig","Injectable","providedIn","useExisting","Config","LaunchRenderStrategy","document","rendererFactory","renderedCallers","dialogClasses","popoverClasses","sidebarEndClasses","sidebarStartClasses","renderer","createRenderer","shouldRender","caller","config","Boolean","component","some","el","multi","applyClasses","dialogType","classes","DIALOG","addClass","POPOVER","SIDEBAR_END","SIDEBAR_START","classes_1","classes_1_1","newClass","location","nativeElement","remove","filter","_a","removeClass","getPriority","Inject","DOCUMENT","InlineRenderStrategy","componentFactoryResolver","_this","_super","render","vcr","template","resolveComponentFactory","createComponent","element","of","isDevMode","console","warn","hasMatch","inline","args","RendererFactory2","ComponentFactoryResolver","LaunchDialogService","renderStrategies","layoutConfig","_dialogClose","BehaviorSubject","undefined","launch","findConfiguration","getStrategy","clear","asObservable","closeDialog","reason","resolveApplicable","ICON_TYPE","OutletService","features","templatesRefs","BEFORE","Map","REPLACE","AFTER","add","outlet","templateOrFactory","position","store","newValue","get","set","stacked","templateRef","removeValueOrAll","has","delete","existing","isLevel","val","FeatureConfigService","OutletRefDirective","tpl","outletService","ngOnInit","cxOutletRef","cxOutletPos","ngOnDestroy","TemplateRef","Input","Directive","selector","OutletRefModule","NgModule","imports","CommonModule","declarations","exports","OutletRendererService","outletRefs","size","register","cxOutlet","context","getOutletRef","pipe","map","IntersectionService","isIntersected","options","intersects","first","Observable","observer","intersectOptions","rootMargin","getRootMargin","threshold","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","distinctUntilChanged","deferredLoading","intersectionMargin","DeferLoaderService","platformId","intersectionService","globalLoadStrategy","strategy","DeferLoadingStrategy","INSTANT","load","shouldLoadInstantly","deferLoading","elementLoadingStrategy","isPlatformServer","DEFER","type","PLATFORM_ID","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","renderedComponents","loaded","EventEmitter","subscription","Subscription","unsubscribe","cxOutletDefer","build","ngOnChanges","changes","emit","hostElement","getHostElement","subscribe","buildOutlet","templates","includes","isArray","components","forEach","obj","tmplOrFactory","ComponentFactory","getComponentInjector","view","createEmbeddedView","$implicit","cxOutletContext","markForCheck","contextData","reference","Injector","providers","provide","OutletContextData","useValue","parent","injector","HTMLElement","parentNode","ViewContainerRef","Output","OutletModule","OutletRenderStrategy","template_1","outletDirective","reverse","find","componentType","tap","RoutingRenderStrategy","routingService","_caller","go","cxRoute","RoutingService","LaunchDialogModule","forRoot","ngModule","LaunchDialogModule_1","AnonymousConsentLaunchDialogService","launchDialogService","openDialog","openElement","ANONYMOUS_CONSENT","combineLatest","dialogClose","close","comp","focus","destroy","BaseFocusService","BaseFocusDirective","elementRef","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","host","tagName","toLowerCase","hasAttribute","ElementRef","HostBinding","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","event","isNavigating","metaKey","code","HostListener","BlockFocusDirective","block","PersistFocusService","group","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","isHidden","findFocusable","locked","invisible","suffix","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","setTimeout","_b","setAttribute","shouldUnlockAfterAutofocus","toString","Renderer2","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","AnonymousConsentManagementBannerComponent","anonymousConsentsService","anonymousConsentLaunchDialogService","subscriptions","bannerVisible$","isBannerVisible","viewDetails","hideBanner","dialog","allowAll","giveAllConsents","toggleBannerDismissed","AnonymousConsentsService","Component","IconResourceType","IconConfig","DirectionMode","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getFlipDirection","flipDirection","getStyleClasses","iconType","resourceType","res","types","svgResource","addLinkResource","resource","findResource","head","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","DomSanitizer","PaginationItemType","PaginationNavigationPosition","IconComponent","iconLoader","setIcon","addStyleClasses","flipIcon","iconDirection","flipAtLtr","LTR","flipAtRtl","RTL","styleClasses","cls","split","defaultIconConfig","IconModule","provideDefaultConfig","AnonymousConsentDialogComponent","role","modal","showLegalDescription","iconTypes","requiredConsents","focusConfig","anonymousConsents","showLegalDescriptionInDialog","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","rejectAll","take","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","AnonymousConsentsConfig","defaultAnonymousConsentLayoutConfig","AnonymousConsentOpenDialogComponent","ViewChild","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","provideConfig","cmsComponents","entryComponents","SpinnerComponent","SpinnerModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","globalMessageService","anonymousConsentsConfig","authService","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","withLatestFrom","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","success","onConsentGivenSuccess","resetWithdrawConsentProcessState","skipWhile","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","GlobalMessageType","MSG_TYPE_CONFIRMATION","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","loading","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","UserConsentService","GlobalMessageService","AuthService","ConsentManagementModule","FormsModule","ReactiveFormsModule","guards","AuthGuard","AnonymousConsentsDialogModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","floor","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","slice","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","sort","a","width","_reversedFormats","sortedFormats","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","isInitialized","isLoading","isMissing","container","handleMissing","loadHandler","errorHandler","MediaModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","FormErrorsComponent","_control","control","errors$","statusChanges","startWith","errors","invalid","dirty","touched","FormErrorsModule","GenericLinkComponent","router","PROTOCOL_REGEX","URL_SPLIT","routeParts","isExternalUrl","test","setUrlParts","currentValue","path","queryParams","fragment","getAbsoluteUrl","splitUrl","parseUrl","match","Router","GenericLinkModule","ItemCounterComponent","min","allowZero","readonly","input","sub","valueChanges","setValue","getValidCount","emitEvent","markAsDirty","decrement","max","ItemCounterModule","defaultPaginationConfig","pagination","addStart","addEnd","PaginationConfig","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","MediaConfig","ModalRef","NgbModalRef","ModalService","ngbModalService","modals","open","content","activeModal","getActiveModal","dismissActiveModal","dismiss","closeActiveModal","NgbModal","SplitViewDeactivateGuard","canDeactivate","timer","SplitViewService","defaultHideMode","_splitViewCount","_views$","initialState","views","hidden","getActiveView","getActive","getViewState","activePosition","splice","updateState","toggle","forceHide","hide","l","SplitViewComponent","splitService","lastVisibleView","lastVisible","mode","ViewComponent","disappeared","hiddenChange","_hidden","viewPosition","splitViewCount","Number","duration","force","nextPosition","getComputedStyle","getPropertyValue","trim","SplitViewModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsConfig","QualtricsLoaderService","qsiLoaded$","fromEvent","qsi$","switchMap","isDataLoaded","api","qsi","qsiApi","initialize","run","reload","API","unload","log","addScript","scriptSource","hasScript","script","defer","source","querySelector","QualtricsComponent","qualtricsLoader","qualtrics","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","Optional","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","deps","StarRatingComponent","disabled","change","initialRate","setRate","rating","saveRate","setRateOnEvent","StarRatingModule","TableConfig","TableComponent","_dataset","dataset","addTableDebugInfo","getDataValue","dataRow","headerKey","values","tableType","structure","TableModule","TableService","buildStructure","hasTableConfig","buildStructureFromConfig","buildStructureFromData","buildRandomStructure","getTableConfig","headers","hideHeader","tableConfig","table","bestMatch","message","ViewConfig","ViewConfigModule","ViewConfigModule_1","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","params","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","CheckoutService","ActiveCartService","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","password","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","controls","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","FeatureModulesService","configInitializer","compiler","componentFeatureMap","dependencyModules","initFeatureMap","_arguments","P","generator","getStableConfig","_k","featureModulesConfig","featureModules","_e","featureName","featureConfig","_f","_g","Promise","resolve","reject","fulfilled","rejected","result","then","hasFeatureFor","getCmsMapping","feature","resolveFeature","featureInstance","componentsMappings","getInjectors","injectors","moduleRef","depsModules","module","featureConfig_1","Error","depsResolve","dependencies","forkJoin","depModuleFunc","resolveDependencyModule","resolveFeatureModule","resolveModuleFactory","resolvedConfiguration","resolveFeatureConfiguration","featureInjector","featureConfigChunks","ConfigChunk","InjectFlags","Self","featureDefaultConfigChunks","DefaultConfigChunk","configurationFactory","moduleFunc","moduleFactory","pluck","NgModuleFactory","compileModuleAsync","observeOn","queueScheduler","merge","dependency","ConfigInitializerService","Compiler","CmsComponentsService","missingComponents","mappings","mappingResolvers","determineMappings","componentTypes","featureResolvers","componentTypes_1","componentTypes_1_1","staticConfig","getFeatureMappingResolver","mapTo","mappingResolver$","featureComponentMapping","deepMerge","share","getMapping","componentConfig","disableSSR","getDeferLoadingStrategy","getChildRoutes","routes","componentTypes_2","componentTypes_2_1","childRoutes","getGuards","Set","componentTypes_3","componentTypes_3_1","guard","getI18nKeys","i18nKeys","componentTypes_4","componentTypes_4_1","CmsConfig","NOT_FOUND_SYMBOL","CombinedInjector","mainInjector","complementaryInjectors","token","notFoundValue","flags","CmsInjectorService","cmsComponentsService","getCmsData","uid","parentInjector","CmsService","getComponentData","getInjector","configProviders","ComponentHandlerService","handlers","invalidMappings","componentMapping","handler","getLauncher","viewContainerRef","elementInjector","launcher","ComponentHandler","ComponentWrapperDirective","dynamicAttributeService","componentHandler","cmsInjector","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","ChangeDetectorRef","addDynamicAttributes","DynamicAttributeService","DefaultComponentHandler","subscriber","factory","getComponentFactory","LazyComponentHandler","defaultHandler","isNotClass","signature","substr","replace","PageComponentModule","AsmEnablerService","isEnabled","addUi","isLaunched","isUsedBefore","localStorage","setItem","getItem","ASM","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","asmEnablerService","CheckoutStepType","DeliveryModePreferences","AsmComponentService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","isCustomerEmulationSessionInProgress","mergeMap","userToken","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","isCollapsed$","getAsmUiState","uiState","collapsed","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","UserService","AsmService","encapsulation","ViewEncapsulation","None","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","FormatTimerPipe","transform","totalSeconds","minutes","seconds","Pipe","name","AsmToggleUiComponent","isCollapsed","toggleUi","updateAsmUiState","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","user","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","customerSearch","pageSize","maxResults","selectCustomerFromList","onDocumentClick","resultList","contains","closeResults","(document:click)","defaultAsmLayoutConfig","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","ProductService","AddedToCartDialogComponent","modalService","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","product","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","selectiveCartService","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","getControl","SelectiveCartService","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","selectiveCartEnabled","cartLoaded$","getLoaded","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","getLoading","slots","selectiveCart","loadingCart","exclude","arr","arg","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","cmsService","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","SkipLinkScrollPosition","CheckoutConfig","defaultCheckoutConfig","checkout","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","expressCheckoutService","firstStep$","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","countrySelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","translate","month","payment","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","textExpires","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","field","cardLabels","selected","title","img","actions","header","goNext","goPrevious","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","setAsDefaultField","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","regionSelected","addresses$","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","card","getCardContent","addAddress","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","SkipLinkConfig","SkipLinkService","keyboardFocusService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","getSkipLinkIndexInArray","i18nKey","scrollToTarget","parentElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkComponent","skipLinkService","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","DirectionConfig","defaultDirectionConfig","direction","detect","default","rtlLanguages","DirectionService","configInit","languageService","startsDetecting","setDirection","documentElement","isoCode","getDirection","language","ltrLanguages","LanguageService","initHtmlDirAttribute","directionService","featureConfigService","DirectionModule","HamburgerMenuService","isExpanded","events","NavigationStart","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","slot","pendingComponentCount","class","lastPosition","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","slotData","PageSlotModule","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageTemplateStyleService","ref","addStyleClass","currentTemplate","classList","initPageTemplateStyle","PageLayoutModule","APP_BOOTSTRAP_LISTENER","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","lang","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","JsonLdScriptFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","isPlatformBrowser","scriptElement","getElementById","JSON","stringify","_key","SecurityContext","HTML","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","routing","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","pageMeta","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductReviewService","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","typeCode","select","tabNum","scrollTo","offsetTop","history","activeTab","getTitleParams","tabComps","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","continue","amendOrderForm","forwardRoute","AmendOrderActionsModule","ValidateQuantityToCancel","cxNoSelectedItemToCancel","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","UserNotificationPreferenceService","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","UserInterestsService","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","contentPageLabelOrId","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","closest","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ProductReferenceService","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","siteContext","routerState","criteria","getCriteriaFromRoute","model$","routeParams","getQueryFromRouteParams","brandCode","getPageItems","pageNumber","routeCriteria","navigate","queryParamsHandling","relativeTo","setQuery","viewPage","ProductSearchService","CurrencyService","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","increaseVisibleValues","decreaseVisibleValues","topValueCount","topFacets","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","_isDialog","expandFacetGroup","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","q","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchConfig","searchQuery","queryText","geolocation","useMyLocation","radius","parseParameters","googleMaps","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderConfig","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","auth","loginAsGuest","routeState","prefilledEmail","loginForm","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","titleSelected","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","HomePageEvent","PageEvent","CartPageEvent","CartPageEventBuilder","eventService","buildCartPageEvent","pageEvent","semanticRoute","createFrom","ActionsSubject","EventService","CartPageEventModule","_cartPageEventBuilder","PageEventBuilder","buildPageEvent","buildHomePageEvent","getNavigatedEvent","ofType","ROUTER_NAVIGATED","payload","PageEventModule","_pageEventBuilder","ProductDetailsPageEvent","CategoryPageResultsEvent","SearchPageResultsEvent","ProductPageEventBuilder","buildSearchPageResultsEvent","buildProductDetailsPageEvent","buildCategoryResultsPageEvent","categories","skip","EMPTY","numberOfResults","categoryName","categoryPage","searchPage","ProductPageEventModule","_productPageEventBuilder","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","EventsModule","StorefrontFoundationModule","StateModule","AuthModule","AnonymousConsentsModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport interface LaunchConfig {\n  [key: string]: LaunchOptions;\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Dialog type is used to apply CSS classes\n   */\n  dialogType?: DIALOG_TYPE;\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n  ANONYMOUS_CONSENT = 'ANONYMOUS_CONSENT',\n}\n","import { Injectable } from '@angular/core';\nimport { Config, DeferLoadingStrategy } from '@spartacus/core';\nimport { LaunchConfig } from '../launch-dialog/index';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by indication, but keep in mind that\n   * a more precise indication will gain a more positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breakpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LayoutConfig {\n  /**\n   * The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints.\n   */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overridden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n\n  launch?: LaunchConfig;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n\n/**\n * Token for injecting outlet related context to the component rendered in the outlet\n */\nexport abstract class OutletContextData<T = any> {\n  /**\n   * Provides reference of the outlet where component is rendered in\n   */\n  reference: string;\n  /**\n   * Provides position of the outlet\n   */\n  position: OutletPosition;\n  /**\n   * Provides outlet context\n   */\n  context: T;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Renderer2,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Applicable, Priority } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  DIALOG_TYPE,\n  LaunchDialog,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config';\n\nexport abstract class LaunchRenderStrategy implements Applicable {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER | string;\n    element?: any;\n    component?: ComponentRef<any>;\n  }> = [];\n\n  /**\n   * Classes to apply to the component when the dialog is a DIALOG\n   */\n  protected dialogClasses = ['d-block', 'fade', 'modal', 'show'];\n  /**\n   * Classes to apply to the component when the dialog is a POPOVER\n   */\n  protected popoverClasses = ['cx-dialog-popover'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_END\n   */\n  protected sidebarEndClasses = ['cx-sidebar-end'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_START\n   */\n  protected sidebarStartClasses = ['cx-sidebar-start'];\n\n  protected renderer: Renderer2;\n\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>>;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(\n    caller: LAUNCH_CALLER | string,\n    config: LaunchDialog\n  ): boolean {\n    return (\n      Boolean(config.component) &&\n      (this.renderedCallers.some((el) => el.caller === caller)\n        ? !!config.multi\n        : true)\n    );\n  }\n\n  protected applyClasses(\n    component: ComponentRef<any>,\n    dialogType: DIALOG_TYPE\n  ): void {\n    let classes = [];\n\n    // TODO: make classes configurable\n    switch (dialogType) {\n      case DIALOG_TYPE.DIALOG:\n        classes = this.dialogClasses;\n        this.renderer.addClass(this.document.body, 'modal-open');\n        break;\n      case DIALOG_TYPE.POPOVER:\n        classes = this.popoverClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_END:\n        classes = this.sidebarEndClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_START:\n        classes = this.sidebarStartClasses;\n        break;\n    }\n\n    for (const newClass of classes) {\n      this.renderer.addClass(component.location.nativeElement, newClass);\n    }\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER | string, config: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller !== caller\n    );\n\n    if ((config as LaunchDialog)?.dialogType === DIALOG_TYPE.DIALOG) {\n      this.renderer.removeClass(this.document.body, 'modal-open');\n    }\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER | string,\n    vcr: ViewContainerRef\n  ): Observable<ComponentRef<any>> {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n\n      const component = vcr.createComponent(template);\n\n      if (config?.dialogType) {\n        this.applyClasses(component, config?.dialogType);\n      }\n\n      this.renderedCallers.push({ caller, element: vcr.element, component });\n\n      return of(component);\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { resolveApplicable } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { LayoutConfig } from '../../config/layout-config';\nimport { LaunchOptions, LAUNCH_CALLER } from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  private _dialogClose = new BehaviorSubject<string>(undefined);\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected layoutConfig: LayoutConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>> {\n    const config = this.findConfiguration(caller);\n    if (config) {\n      const renderer = this.getStrategy(config);\n\n      // Render if the strategy exists\n      if (renderer) {\n        this._dialogClose.next(undefined);\n        return renderer.render(config, caller, vcr);\n      }\n    } else if (isDevMode()) {\n      console.warn('No configuration provided for caller ' + caller);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER | string): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  get dialogClose(): Observable<string> {\n    return this._dialogClose.asObservable();\n  }\n\n  closeDialog(reason: string) {\n    this._dialogClose.next(reason);\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER | string): LaunchOptions {\n    if (this.layoutConfig?.launch) {\n      return this.layoutConfig.launch[caller];\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveApplicable(this.renderStrategies, [config]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { DirectionMode } from '../../../layout/direction/config/direction.model';\n\nexport enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n\n  /**\n   * Lists icons that should be flipped for a specific direction.\n   */\n  flipDirection?: {\n    [ICON_TYPE: string]: DirectionMode;\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automatically loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { ComponentFactory, Injectable, TemplateRef } from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any> | ComponentFactory<any>> {\n  /**\n   * @deprecated since 2.1, see #8116\n   */\n  constructor();\n  // tslint:disable-next-line: unified-signatures\n  constructor(features: FeatureConfigService);\n  constructor(protected features?: FeatureConfigService) {}\n\n  private templatesRefs = {\n    [OutletPosition.BEFORE]: new Map<string, T[]>(),\n    [OutletPosition.REPLACE]: new Map<string, T[]>(),\n    [OutletPosition.AFTER]: new Map<string, T[]>(),\n  };\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    const store = this.templatesRefs[position];\n    if (store) {\n      const existing = store.get(outlet) || [];\n      const newValue: T[] = existing.concat([templateOrFactory]);\n      store.set(outlet, newValue);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    const store =\n      this.templatesRefs[position] ||\n      this.templatesRefs[OutletPosition.REPLACE];\n\n    const templateRef: T[] = store.get(outlet);\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    const store =\n      this.templatesRefs[position] ||\n      this.templatesRefs[OutletPosition.REPLACE];\n\n    this.removeValueOrAll(store, outlet, value);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n\n      if (this.features?.isLevel('2.1')) {\n        existing = existing.filter((val) => val !== value);\n      } else {\n        // deprecated since 2.1, see #8116:\n        existing = existing.filter((val) => val === value);\n      }\n\n      store.set(outlet, existing);\n    }\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit, OnDestroy {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  /**\n   * @deprecated since 2.1, see #8201\n   */\n  constructor(tpl: TemplateRef<any>, outletService: OutletService);\n  constructor(\n    tpl: TemplateRef<any>,\n    outletService: OutletService,\n    // tslint:disable-next-line: unified-signatures\n    features: FeatureConfigService\n  );\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService,\n    private features?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n\n  ngOnDestroy() {\n    if (this.features?.isLevel('2.1')) {\n      this.outletService.remove(this.cxOutletRef, this.cxOutletPos, this.tpl);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new BehaviorSubject(new Map<string, OutletDirective>());\n\n  /**\n   * Dynamically render the templates in the specified array\n   *\n   * @param outlet\n   */\n  render(outlet: string): void {\n    if (this.outletRefs.value.size !== 0) {\n      this.outletRefs.value.get(outlet).render();\n    }\n  }\n\n  /**\n   * Register outlet to be available to render dynamically\n   *\n   * @param cxOutlet\n   * @param context\n   */\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.next(this.outletRefs.value.set(cxOutlet, context));\n  }\n  /**\n   * Returns map of outlets\n   *\n   */\n  getOutletRef(outlet: string): Observable<OutletDirective> {\n    return this.outletRefs.asObservable().pipe(\n      map((val) => val.get(outlet)),\n      filter((val) => Boolean(val))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, threshold: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  Injector,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport {\n  OutletContextData,\n  OutletPosition,\n  USE_STACKED_OUTLETS,\n} from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n  public renderedComponents = new Map<\n    OutletPosition,\n    Array<ComponentRef<any> | EmbeddedViewRef<any>>\n  >();\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.renderedComponents.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n      this.outletRendererService.register(this.cxOutlet, this);\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    const components = [];\n    templates.forEach((obj) => {\n      const component = this.create(obj, position);\n      components.push(component);\n    });\n\n    this.renderedComponents.set(position, components);\n  }\n\n  private create(\n    tmplOrFactory: any,\n    position: OutletPosition\n  ): ComponentRef<any> | EmbeddedViewRef<any> {\n    this.renderedTemplate.push(tmplOrFactory);\n\n    if (tmplOrFactory instanceof ComponentFactory) {\n      const component = this.vcr.createComponent(\n        tmplOrFactory,\n        undefined,\n        this.getComponentInjector(position)\n      );\n      return component;\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n      return view;\n    }\n  }\n\n  /**\n   * Returns injector with OutletContextData that can be injected to the component\n   * rendered in the outlet\n   */\n  private getComponentInjector(position: OutletPosition): Injector {\n    const contextData: OutletContextData = {\n      reference: this.cxOutlet,\n      position,\n      context: this.cxOutletContext,\n    };\n\n    return Injector.create({\n      providers: [\n        {\n          provide: OutletContextData,\n          useValue: contextData,\n        },\n      ],\n      parent: this.vcr.injector,\n    });\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent nodes of the given element.\n   *\n   * We avoid traversing the parent _elements_, as this is blocking\n   * ie11 implementations. One of the spare exclusions we make to not\n   * supporting ie11.\n   *\n   * @param element\n   */\n  private getHostElement(element: Node): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentNode);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  RendererFactory2,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER | string\n  ): Observable<ComponentRef<any>> {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n      this.renderedCallers.push({ caller });\n\n      return this.outletRendererService.getOutletRef(config.outlet).pipe(\n        map((outletDirective) => {\n          const components = outletDirective.renderedComponents.get(\n            config.position ? config.position : OutletPosition.BEFORE\n          ) as ComponentRef<any>[];\n\n          return components\n            .reverse()\n            .find(\n              (component) => component.componentType === template.componentType\n            );\n        }),\n        tap((component) => {\n          if (config?.dialogType) {\n            this.applyClasses(component, config?.dialogType);\n          }\n        })\n      );\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER | string, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n\n    super.remove(caller, config);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, RendererFactory2 } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected routingService: RoutingService\n  ) {\n    super(document, rendererFactory);\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER | string) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { LayoutConfig } from '../config/layout-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [{ provide: LayoutConfig, useExisting: Config }],\n    };\n  }\n}\n","import { ElementRef, Injectable, ViewContainerRef } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport {\n  LaunchDialogService,\n  LAUNCH_CALLER,\n} from '../../layout/launch-dialog/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentLaunchDialogService {\n  constructor(protected launchDialogService: LaunchDialogService) {}\n\n  openDialog(\n    openElement?: ElementRef,\n    vcr?: ViewContainerRef\n  ): Observable<any> | undefined {\n    const component = this.launchDialogService.launch(\n      LAUNCH_CALLER.ANONYMOUS_CONSENT,\n      vcr\n    );\n\n    if (component) {\n      return combineLatest([\n        component,\n        this.launchDialogService.dialogClose,\n      ]).pipe(\n        filter(([, close]) => close && close !== undefined),\n        tap(([comp]) => {\n          openElement?.nativeElement.focus();\n          this.launchDialogService.clear(LAUNCH_CALLER.ANONYMOUS_CONSENT);\n          comp.destroy();\n        }),\n        map(([comp]) => comp)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n *\n * This feature must be explicitly enabled with the `disableMouseFocus` config.\n *\n * The appearance of the visual focus depends on the CSS implementation to\n * begin with. Spartacus styles add a blue border around each focusable element.\n * This can be considered annoying by keyboard users, as they won't need such a\n * strong indication of the selected element.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = {\n    disableMouseFocus: true,\n  };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** Controls a css class to hide focus visible CSS rules */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown', ['$event']) handleKeydown(event: KeyboardEvent) {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = !this.isNavigating(event);\n    }\n  }\n\n  /**\n   * Indicates whether the configurations setup to disable visual focus.\n   */\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n\n  /**\n   * Indicates whether the event is used to navigate the storefront. Some keyboard events\n   * are used by mouse users to fill a form or interact with the OS or browser.\n   */\n  protected isNavigating(event: KeyboardEvent): boolean {\n    // when the cmd or ctrl keys are used, the user doesn't navigate the storefront\n    if (event.metaKey) {\n      return false;\n    }\n    // when the tab key is used, users are for navigating away from the current (form) element\n    if (event.code === 'Tab') {\n      return true;\n    }\n    // If the user fill in a form, we don't considering it part of storefront navigation.\n    if (['INPUT', 'TEXTAREA'].includes((event.target as HTMLElement).tagName)) {\n      return false;\n    }\n    return true;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singleton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the `mouse-focus` class is added to the host element,\n   * indicating that the element focus should not be made visible.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistence key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistence\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      // we wait a few milliseconds, mainly because firefox will otherwise apply\n      // the mouse event on the new focused child element\n      setTimeout(() => {\n        super.handleFocus(event as KeyboardEvent);\n      }, 100);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elements,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { Component, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      null,\n      this.vcr\n    );\n    if (dialog) {\n      this.subscriptions.add(dialog.subscribe());\n    }\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/**\n * The ltr and rtl directions can be used to configure the storefront for a certain direction, both statically\n * or dynamically.\n *\n * The HTML5 \"auto\" value is not supported in Spartacus, as it's considered to be too fragile for the global\n * direction.\n */\nexport enum DirectionMode {\n  /**\n   * Indicates Left to Right direction.\n   */\n  LTR = 'ltr',\n  /**\n   * Indicates Right to Left direction.\n   */\n  RTL = 'rtl',\n}\n\n/**\n * Contains the configuration mode for language driven directionality. The detect mode is recommended\n * for a multi-site or multi-lingual setup where the active language should dictate the direction mode.\n */\nexport interface Direction {\n  /**\n   * The default direction mode is used for the direction mode of the overall storefront. The default mode\n   * can be used for all languages, but can be further enhanced dynamically by using the language detect mode.\n   * The default mode will also be used in detect mode for those languages that are not listed in either\n   * `rtlLanguages` or `ltrLanguages`.\n   */\n  default?: DirectionMode;\n\n  /**\n   * If detect is enabled, the direction is driven by the active language. The language is compared to the\n   * list of configured `rtlLanguages` vs `ltrLanguages`. If no language is resolved, the default direction\n   * mode is used.\n   *\n   * If no direction can be resolved, the direction is removed.\n   */\n  detect?: boolean;\n\n  /**\n   * The language isoCodes that are used to detect Right to Left languages.\n   */\n  rtlLanguages?: string[];\n\n  /**\n   * The language isoCodes that are used to detect Left to Right languages.\n   */\n  ltrLanguages?: string[];\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport { DirectionMode } from '../../../layout/direction/config/direction.model';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   * Return the direction for which the icon should mirror (ltr vs rtl). The icon direction\n   * is configurable, but optional, as only a few icons should be flipped for rtl direction.\n   */\n  getFlipDirection(type: ICON_TYPE | string): DirectionMode {\n    return this.config?.flipDirection?.[type];\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { DirectionMode } from '../../../layout/direction/config/direction.model';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * The `flip-at-rtl` class is added to the DOM for the style layer to flip the icon in RTL direction.\n   */\n  @HostBinding('class.flip-at-rtl') flipAtRtl: boolean;\n\n  /**\n   * The `flip-at-ltr` class is added to the DOM for the style layer to flip the icon in LTR direction.\n   */\n  @HostBinding('class.flip-at-ltr') flipAtLtr: boolean;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n    this.flipIcon(type);\n  }\n\n  /**\n   * The icons supports flipping for some icons to support rtl and ltr directions.\n   */\n  protected flipIcon(type: ICON_TYPE) {\n    // TODO: this can be dropped with the next major release.\n    if (!this.iconLoader.getFlipDirection) {\n      return;\n    }\n    const iconDirection = this.iconLoader.getFlipDirection(type);\n    this.flipAtLtr = iconDirection === DirectionMode.LTR;\n    this.flipAtRtl = iconDirection === DirectionMode.RTL;\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { DirectionMode } from '../../../layout/direction/config/direction.model';\nimport { IconConfig } from './icon.model';\n\nexport const defaultIconConfig: IconConfig = {\n  icon: {\n    flipDirection: {\n      CARET_RIGHT: DirectionMode.RTL,\n      CARET_LEFT: DirectionMode.RTL,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultIconConfig } from './default-icon.config';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultIconConfig),\n    // TODO: move the opinionated fontawesome config to a recipe\n    provideDefaultConfig(fontawesomeIconConfig),\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { FocusConfig } from '../../../layout/a11y/keyboard-focus/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  @HostBinding('attr.role') role = 'dialog';\n  @HostBinding('attr.aria-modal') modal = true;\n\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: 'input[type=\"checkbox\"]',\n    focusOnEscape: true,\n  };\n\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    // Close on click outside the dialog window\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\n      this.close('Cross click');\n    }\n  }\n\n  constructor(\n    protected config: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected el: ElementRef,\n    protected launchDialogService: LaunchDialogService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  close(reason?: any): void {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { DIALOG_TYPE } from '../../layout/launch-dialog/index';\nimport { AnonymousConsentDialogComponent } from '../../shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component';\n\nexport const defaultAnonymousConsentLayoutConfig: LayoutConfig = {\n  launch: {\n    ANONYMOUS_CONSENT: {\n      inline: true,\n      component: AnonymousConsentDialogComponent,\n      dialogType: DIALOG_TYPE.DIALOG,\n    },\n  },\n};\n","import {\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  @ViewChild('open') openElement: ElementRef;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService\n  ) {}\n\n  openDialog(): void {\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      this.openElement,\n      this.vcr\n    );\n    if (dialog) {\n      dialog.pipe(take(1)).subscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../layout/a11y/keyboard-focus/index';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { defaultAnonymousConsentLayoutConfig } from './default-anonymous-consent-layout.config';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideConfig(defaultAnonymousConsentLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/index';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsDialogModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media?.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Params, Router } from '@angular/router';\n\n// private\ninterface RouteParts {\n  /** Path in the Angular-like array format */\n  path?: string[];\n\n  /** Query params */\n  queryParams?: Params;\n\n  /** Hash fragment */\n  fragment?: string;\n}\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent implements OnChanges {\n  constructor(protected router: Router) {}\n\n  /**\n   * Pattern matching string starting with `http://` or `https://`.\n   */\n  private readonly PROTOCOL_REGEX: RegExp = /^https?:\\/\\//i;\n\n  /**\n   * Used to split url into 2 parts:\n   * 1. the path\n   * 2. query params + hash fragment\n   */\n  private readonly URL_SPLIT = /(^[^#?]*)(.*)/;\n\n  /**\n   * Parsed parts of the @Input `url`, when it's a local URL.\n   * It should not be used when the `url` is external.\n   * @see `url`\n   */\n  private routeParts: RouteParts = {};\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  /**\n   * Returns true when the @Input `url` is a string starting with `http://` or `https://`.\n   */\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.PROTOCOL_REGEX.test(this.url);\n  }\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['url']) {\n      this.setUrlParts(changes['url'].currentValue);\n    }\n  }\n\n  /**\n   * The part with the path of the local url.\n   */\n  get routerUrl(): any[] {\n    return this.routeParts.path;\n  }\n\n  /**\n   * The part with the query params of the local url.\n   */\n  get queryParams(): Params {\n    return this.routeParts.queryParams;\n  }\n\n  /**\n   * The part with the hash fragment of the local url.\n   */\n  get fragment(): string {\n    return this.routeParts.fragment;\n  }\n\n  /**\n   * Parses the given url and sets the property `urlParts` accordingly.\n   */\n  private setUrlParts(url: string | any[]) {\n    if (typeof url === 'string') {\n      url = this.getAbsoluteUrl(url); // string links in CMS sometimes don't have the leading slash, so fix it here\n      this.routeParts = this.splitUrl(url as string);\n    } else {\n      this.routeParts = { path: url };\n    }\n  }\n\n  /**\n   * Parses the given string into 3 parts:\n   * - string path (wrapped in an array to be compatible with Angular syntax for the `routerLink`)\n   * - query params (as an object)\n   * - hash fragment (string)\n   */\n  private splitUrl(url: string = ''): RouteParts {\n    const { queryParams, fragment } = this.router.parseUrl(url);\n    const [, path] = url.match(this.URL_SPLIT);\n\n    // wrap path in an array, to have the Angular-like path format\n    return { path: [path], queryParams, fragment };\n  }\n\n  /**\n   * Prepends a leading slash to the given URL string, in case it doesn't have it.\n   */\n  private getAbsoluteUrl(url: string): string {\n    return url.startsWith('/') ? url : '/' + url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functionality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent implements OnInit, OnDestroy {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive integer or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Indicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  /**\n   * Subscription responsible for auto-correcting control's value when it's invalid.\n   */\n  private sub: Subscription;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  ngOnInit() {\n    this.sub = this.control.valueChanges\n      .pipe(startWith(this.control.value))\n      .subscribe((value) =>\n        this.control.setValue(this.getValidCount(value), { emitEvent: false })\n      );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { MediaFormatSize } from './media.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { Observable, timer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Guard that can be used in split-view based child routes. This guard\n * delays the guard to be removed with 500ms, so that any css transition can be\n * finished before the DOM is destroyed.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SplitViewDeactivateGuard implements CanDeactivate<boolean> {\n  canDeactivate(): Observable<boolean> {\n    return timer(500).pipe(map(() => true));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { SplitViewState } from './split/split-view.model';\n\n/**\n * Supposed to be injected in the split view component, so that the split view state\n * is maintained for a single split view.\n */\n@Injectable()\nexport class SplitViewService {\n  /**\n   * Newly added views are hidden by default, unless it is the first view of the split view.\n   * The default hide mode can be overridden.\n   */\n  defaultHideMode = true;\n\n  protected _splitViewCount = 2;\n\n  protected _views$: BehaviorSubject<any[]> = new BehaviorSubject([]);\n\n  /**\n   * Adds a view to the list of views. The view is initialized with the `SplitViewState`\n   * state. If no state is provided, the state is created with the hidden property. The hidden\n   * property is provided by the `defaultHideMode`, unless it's the first view (position: 0).\n   */\n  add(position: number, initialState?: SplitViewState) {\n    if (!this.views[position]) {\n      this.views[position] = {\n        ...{ hidden: position === 0 ? false : this.defaultHideMode },\n        ...initialState,\n      };\n      this._views$.next(this.views);\n    }\n  }\n\n  /**\n   * Returns an observable with the active view number. The active view number\n   * represents the last visible view.\n   */\n  getActiveView(): Observable<number> {\n    return this._views$.pipe(\n      map((views) => this.getActive(views)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns an observable with the SplitViewState for the given view position.\n   */\n  getViewState(position: number): Observable<SplitViewState> {\n    return this._views$.pipe(\n      map((views) => views[position]),\n      // we must filter here, since outlet driven views will destroyed the view\n      filter((view) => Boolean(view))\n    );\n  }\n\n  /**\n   * Removes a view from the list of views.\n   *\n   * Removing a view is different from hiding a view. Removing a view is typically done\n   * when a component is destroyed.\n   *\n   * When the view is removed, the SplitViewState is updated to reflect that new organization\n   * of views.\n   */\n  remove(position: number) {\n    const activePosition = this.getActive(this.views);\n    this._views$.next(this.views.splice(0, position));\n    if (activePosition >= position) {\n      this.updateState(position - 1);\n    }\n  }\n\n  /**\n   * Returns the next view position. This is useful for views that do not want to be bothered\n   * with controlling view numbers.\n   */\n  get nextPosition(): number {\n    return this.views.length || 0;\n  }\n\n  /**\n   * Toggles the visibility of the views based on the given view position. If the view\n   * is already visible, we close the view and active the former view. Unless the hide flag\n   * is used, to force the view.\n   *\n   * The view state of other views in the split view are updated as well.\n   *\n   * @param position The zero-based position number of the view.\n   * @param forceHide The (optional) hide state for the view position.\n   */\n  toggle(position: number, forceHide?: boolean) {\n    // add the view if it hasn't been added before.\n    if (!this.views[position]) {\n      this.add(position, { hidden: forceHide ?? false });\n    }\n\n    // If the position is already visible, we move to a previous position. Only if the hide\n    // state is forced, we keep the current position.\n    if (\n      this.views[position] &&\n      forceHide === undefined &&\n      !this.views[position].hidden\n    ) {\n      position--;\n    }\n\n    this.updateState(position, forceHide);\n  }\n\n  protected updateState(position: number, hide?: boolean) {\n    const views = [...this.views];\n    const split: number = this._splitViewCount - 1;\n    // toggle the hidden state per view, based on the next position and number of views per split view\n    views.forEach((view, pos) => {\n      if (pos === position) {\n        view.hidden = hide ?? !(pos >= position - split && pos <= position);\n      } else {\n        view.hidden = !(pos >= position - split && pos <= position);\n      }\n    });\n    this._views$.next(views);\n  }\n\n  /**\n   * Returns the active view count for the list of views.\n   */\n  protected getActive(views: SplitViewState[]): number {\n    // we reverse the list to find the last visible view\n    const l = [...views]\n      .reverse()\n      .findIndex((view: SplitViewState) => !view.hidden);\n    const last = l === -1 ? 0 : views.length - l - 1;\n    return last;\n  }\n\n  /**\n   * Sets the view count for the split view.\n   *\n   * Defaults to 2.\n   */\n  set splitViewCount(count: number) {\n    this._splitViewCount = count;\n  }\n\n  /**\n   * Utility method that resolves all views from the subject.\n   */\n  protected get views(): SplitViewState[] {\n    return this._views$.value;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  OnDestroy,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SplitViewService } from '../split-view.service';\n\n/**\n * The split-view component supports an unlimited number of nested views. The component\n * is a host to those view components and doesn't add any restrictions to it's content;\n * content is projected as-is.\n *\n * ```html\n * <cx-split-view>\n *   <cx-view></cx-view>\n *   <cx-view></cx-view>\n *   <any-wrapper>\n *     <cx-view></cx-view>\n *   </any-wrapper>\n * </cx-split-view>\n * ```\n *\n * The split view component is only concerned with tracking the underlying _visible_\n * view components, so that the `lastVisibleView` can be updated accordingly. The actual\n * visibility of views is controlled by CSS. To allow for maximum flexibility, the CSS\n * implementation is using CSS variables. The `lastVisibleView` is bind to the\n * `--cx-active-view` on the host, so that all descendants views will inherit the\n * property conveniently.\n */\n@Component({\n  selector: 'cx-split-view',\n  templateUrl: './split-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [SplitViewService],\n})\nexport class SplitViewComponent implements OnDestroy {\n  /**\n   * Sets the default hide mode for views. This mode is useful in case views are dynamically being created,\n   * for example when they are created by router components.\n   */\n  @Input()\n  set hideMode(mode: boolean) {\n    this.splitService.defaultHideMode = mode;\n  }\n\n  /**\n   * Indicates the last visible view in the range of views that is visible. This\n   * is bind to a css variable `--cx-active-view` so that the experience\n   * can be fully controlled by css.\n   */\n  @HostBinding('style.--cx-active-view')\n  lastVisibleView = 1;\n\n  protected subscription: Subscription = this.splitService\n    .getActiveView()\n    .subscribe(\n      (lastVisible: number) => (this.lastVisibleView = lastVisible + 1)\n    );\n\n  constructor(protected splitService: SplitViewService) {}\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SplitViewService } from '../split-view.service';\n\n/**\n * The view component is part of the `SplitViewComponent`. The view\n * contains the navigable content that should be split up. It maintains\n * a view position and allows to show or hide the view.\n *\n * The ViewComponent interacts with the `SplitViewService` for handing over the\n * view state, so that the overarching `SplitViewComponent` can manage the\n * overall experience.\n */\n@Component({\n  selector: 'cx-view',\n  templateUrl: './view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewComponent implements OnInit, OnDestroy {\n  protected _hidden;\n\n  @Input()\n  @HostBinding('attr.position')\n  position: string;\n\n  /**\n   * The disappeared flag is added to the\n   */\n  @HostBinding('attr.disappeared') disappeared = true;\n\n  /**\n   * The hidden input is used to set the initial visible state of the view.\n   * The hidden state defaults to false.\n   *\n   * The hidden input supports 2-way binding, see `hiddenChange` property.\n   */\n  @Input()\n  set hidden(hidden: boolean) {\n    this._hidden = hidden;\n    this.splitService.toggle(this.viewPosition, hidden);\n  }\n\n  /**\n   * An update of the view visibility is emitted to the hiddenChange output.\n   */\n  @Output()\n  hiddenChange = new EventEmitter();\n\n  protected subscription: Subscription;\n\n  constructor(\n    protected splitService: SplitViewService,\n    protected elementRef: ElementRef\n  ) {}\n\n  ngOnInit() {\n    this.splitService.splitViewCount = this.splitViewCount;\n\n    const hidden = this._hidden ? { hidden: this._hidden } : {};\n    this.splitService.add(this.viewPosition, hidden);\n\n    this.subscription = this.splitService\n      .getViewState(Number(this.position))\n      .subscribe((view) => {\n        this.hiddenChange.emit(view.hidden);\n        this._hidden = view.hidden;\n        if (view.hidden) {\n          setTimeout(() => {\n            this.disappeared = true;\n          }, this.duration * 1.25);\n        } else {\n          this.disappeared = false;\n        }\n      });\n  }\n\n  /**\n   * Toggles the visibility of the view.\n   *\n   * An optional force flag can be used to explicitly show or hide view component.\n   */\n  toggle(force?: boolean) {\n    this.splitService.toggle(this.viewPosition, force);\n  }\n\n  /**\n   * Returns the position for the view.\n   *\n   * The position is either taken from the input `position` or generated by the `SplitService`.\n   */\n  protected get viewPosition(): number {\n    if (!(Number(this.position) >= 0)) {\n      this.position = this.splitService.nextPosition.toString();\n    }\n    return Number(this.position);\n  }\n\n  /**\n   * Returns the duration in milliseconds. The duration is based on the CSS custom property\n   * `--cx-transition-duration`. Defaults to 300 milliseconds.\n   */\n  protected get duration(): number {\n    const duration: string = getComputedStyle(this.elementRef.nativeElement)\n      .getPropertyValue('--cx-transition-duration')\n      .trim();\n\n    if (duration.indexOf('ms') > -1) {\n      return Number(duration.split('ms')[0]);\n    } else if (duration.indexOf('s') > -1) {\n      return Number(duration.split('s')[0]) * 1000;\n    } else {\n      return 300;\n    }\n  }\n\n  /**\n   * Returns the maximum number of views per split-view. The number is based on the CSS custom property\n   * `--cx-max-views`. Defaults to `2`\n   */\n  protected get splitViewCount(): number {\n    return Number(\n      getComputedStyle(this.elementRef.nativeElement)\n        .getPropertyValue('--cx-max-views')\n        .trim() || 2\n    );\n  }\n\n  /**\n   * The view is removed from the `SplitService` so that the view no longer\n   * plays a role in the overall split view.\n   */\n  ngOnDestroy() {\n    this.splitService.remove(this.viewPosition);\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SplitViewComponent } from './split/split-view.component';\nimport { ViewComponent } from './view/view.component';\n\n/**\n * The split-view component supports an unlimited number of nested views. Nested views are rendered\n * next to each other. The views can be rendered next to each other, but the max number of visible\n * views can be limisted as well. This is configurable in the CSS layer, so that the max number of views\n * per split-view can be different for each component.\n *\n * The basic structure of the split-view component is shown below:\n *\n *\n * ```\n * <cx-split-view>\n * </cx-split-view>\n * ```\n *\n * The UX pattern used for the split-view is driven by an initial view, which gets splitted into\n * more views as soon as the user starts interacting with the initial and subsequantial views.\n * The views can be driven by routes, which means that you can navigate through the splitted views\n * by using the browser history as well as share or bookmark splitted views.\n *\n * The UI is implemented in the style layer, with only a few generic style rules. Most of the split\n * view style is driven by CSS properties, so that alternative split-view styles can be introduced\n * per page or component.\n *\n * The max number of views per split-view on mobile is limited to 1 by default, where as on tablet\n * (and higher) it is set to 2. Spartacus has a pretty narrow layout, which is why 2 is maximum,\n * but customers could alter the layout to bring in more views in the same split-view at the time.\n *\n */\n\n@NgModule({\n  declarations: [SplitViewComponent, ViewComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [SplitViewComponent, ViewComponent],\n})\nexport class SplitViewModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Configuration options for the Qualtrics integration, which allows you to\n * specify the qualtrics project and deployment script.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QualtricsConfig {\n  /**\n   * Holds the qualtrics integration options.\n   */\n  qualtrics?: {\n    /**\n     * Deployment script, loaded from a resource, to integrate the deployment of the qualtrics project.\n     * You would typically store the file in the local assets folder.\n     *\n     * Defaults to `assets/qualtricsIntegration.js`\n     */\n    scriptSource?: string;\n  };\n}\n","import {\n  Injectable,\n  isDevMode,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\n\nexport const QUALTRICS_EVENT_NAME = 'qsi_js_loaded';\n\n/**\n * Service to integration Qualtrics.\n *\n * The integration observes the Qualtrics API, and when available, it runs the QSI API\n * to let Qualtrics evaluate the application.\n *\n * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application\n * data before pulling the QSI API. This is beneficial in a single page application when additional\n * data is required before the Qualtrics _creatives_ run.\n *\n * This service also supports the creation of the Qualtrics deployment script. This is optional, as\n * the script can be added in alternatives ways.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  /**\n   * Reference to the QSI API.\n   */\n  protected qsiApi: any;\n\n  /**\n   * QSI load event that happens when the QSI JS file is loaded.\n   */\n  private qsiLoaded$: Observable<any> = this.winRef?.nativeWindow\n    ? fromEvent(this.winRef.nativeWindow, QUALTRICS_EVENT_NAME)\n    : of();\n\n  /**\n   * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.\n   *\n   * The API is emitted when the JavaScript resource holding this API is fully loaded.\n   * The API is also stored locally in the service, in case it's required later on.\n   */\n  protected qsi$: Observable<any> = this.qsiLoaded$.pipe(\n    switchMap(() => this.isDataLoaded()),\n    map(() => this.winRef?.nativeWindow['QSI']),\n    filter((api) => Boolean(api)),\n    tap((qsi) => (this.qsiApi = qsi))\n  );\n\n  constructor(\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.initialize();\n  }\n\n  /**\n   * Starts observing the Qualtrics integration. The integration is based on a\n   * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,\n   * we run the API.\n   */\n  protected initialize() {\n    this.qsi$.subscribe(() => this.run());\n  }\n\n  /**\n   * Evaluates the Qualtrics project code for the application.\n   *\n   * In order to reload the evaluation in Qualtrics, the API requires to unload the API before\n   * running it again. We don't do this by default, but offer a flag to conditionally unload the API.\n   */\n  protected run(reload = false): void {\n    if (!this.qsiApi?.API) {\n      if (isDevMode()) {\n        console.log('The QSI api is not available');\n      }\n      return;\n    }\n\n    if (reload) {\n      // Removes any currently displaying creatives\n      this.qsiApi.API.unload();\n    }\n\n    // Starts the intercept code evaluation right after loading the Site Intercept\n    // code for any defined intercepts or creatives\n    this.qsiApi.API.load().done(this.qsiApi.API.run());\n  }\n\n  /**\n   * Adds the deployment script to the DOM.\n   *\n   * The script will not be added twice if it was loaded before. In that case, we use\n   * the Qualtrics API directly to _unload_ and _run_ the project.\n   */\n  addScript(scriptSource: string): void {\n    if (this.hasScript(scriptSource)) {\n      this.run(true);\n    } else {\n      const script: HTMLScriptElement = this.renderer.createElement('script');\n      script.type = 'text/javascript';\n      script.defer = true;\n      script.src = scriptSource;\n      this.renderer.appendChild(this.winRef.document.body, script);\n    }\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.\n   * You can observe any data in this method.\n   *\n   * Defaults to true.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n\n  /**\n   * Indicates if the script is already added to the DOM.\n   */\n  protected hasScript(source?: string): boolean {\n    return !!this.winRef.document.querySelector(`script[src=\"${source}\"]`);\n  }\n\n  protected get renderer(): Renderer2 {\n    return this.rendererFactory.createRenderer(null, null);\n  }\n}\n","import { Component, isDevMode } from '@angular/core';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n/**\n * Adds the Qualtrics deployment script whenever the component is loaded. The\n * deployment script is loaded from the global configuration (`qualtrics.scriptSource`).\n */\n@Component({\n  selector: 'cx-qualtrics',\n  template: ``,\n})\nexport class QualtricsComponent {\n  constructor(\n    protected qualtricsLoader: QualtricsLoaderService,\n    protected config: QualtricsConfig\n  ) {\n    if (this.config.qualtrics?.scriptSource) {\n      this.qualtricsLoader.addScript(this.config.qualtrics.scriptSource);\n    } else if (isDevMode()) {\n      console.warn(\n        `We're unable to add the Qualtrics deployment code as there is no script source defined in config.qualtrics.scriptSource.`\n      );\n    }\n  }\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => (ctx ? this.getInjectedService(ctx) : undefined)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data?.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { BREAKPOINT } from '../../../../layout/config/layout-config';\nimport { TableStructureConfiguration } from '../table.model';\n\n/**\n * Helper configuration to introduce a breakpoint specific table configuration.\n */\nexport interface TableConfiguration extends TableStructureConfiguration {\n  breakpoint?: BREAKPOINT;\n}\n\n/**\n * The `TableConfig` provides table configurations. The configuration allows for a\n * an optional breakpoint specific structure, so a dedicated table structure per\n * screen size can be generated (see `TableService`).\n *\n * The string based key is used to define a configuration for a specific type. The type\n * binds to a specific component, such as the cost-center table. The various table types\n * should be exposed by feature modules, to ease the configuration.\n *\n * The `TableConfiguration` is added in an array, so that any opinionated default configurations\n * can be replaced by customer configurations.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class TableConfig {\n  table: {\n    [key: string]: TableConfiguration[];\n  };\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  isDevMode,\n} from '@angular/core';\nimport { Table } from './table.model';\n\n/**\n * The table component provides a generic DOM structure based on the `dataset` input.\n * The `Table` dataset contains a type, table structure and table data.\n *\n * The table component only supports horizontal table structure.\n *\n * The implementation is fairly \"dumb\" and only provides the following features:\n * - Use outlet for table headers (`<th>`) and cells (`<td>`).\n * - Localizing table headers, using the `I18nModule`.\n * - Add CSS classes on each cell to\n *\n * Al features are optional.\n *\n * By default, the headers and columns are rendered with an outlet template. The template\n * reference is generated by concatenating the table `type` and table header `key`.\n * The following snippet shows an outlet generated for a table header, for the table type\n * \"cost-center\" with a label \"name\":\n *\n * ```\n * <th>\n *   <template cxOutlet=\"tbl.cost-center.header.name\">\n *     [localized label is generated here]\n *   </template>\n * </th>\n * ```\n *\n * Similarly, the `<td>` is generated with the outlet template reference `tbl.cost-center.data.name`.\n *\n * This allows smart components to further customize the table rendering. More over, customers can\n * customize the header and data by using the generated outlets.\n */\n@Component({\n  selector: 'cx-table',\n  templateUrl: './table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableComponent {\n  @HostBinding('attr.__cx-table-type') tableType: string;\n\n  protected _dataset: Table;\n  @Input()\n  set dataset(dataset: Table) {\n    this._dataset = dataset;\n    this.addTableDebugInfo();\n  }\n\n  get dataset(): Table {\n    return this._dataset;\n  }\n\n  /**\n   * Returns the configured data value by the label key.\n   * If there's no headerKey available, or no corresponding value, the\n   * first value in the data row is returned.\n   */\n  getDataValue(dataRow: any, headerKey: string, index: number): string {\n    return dataRow[headerKey] || Object.values(dataRow)[index];\n  }\n\n  /**\n   * Generates the table type into the UI in devMode, so that developers\n   * can easily get the notion of the table type.\n   */\n  protected addTableDebugInfo() {\n    if (isDevMode) {\n      this.tableType = this.dataset?.structure?.type;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { TableComponent } from './table.component';\n\n/**\n * The TableModule provides a table component that is driven by (responsible) configuration.\n */\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  declarations: [TableComponent],\n  exports: [TableComponent],\n})\nexport class TableModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { TableConfig } from './config/table.config';\nimport { TableStructure, TableStructureConfiguration } from './table.model';\n\n/**\n * Responsive table service.\n *\n * The `TableService` is used to generate a `TableStructure` based on configuration. The table\n * structure configuration allows for breakpoint specific configuration, so that the table\n * experience can be differentiated various screen sizes.\n *\n * The table structure configuration is driven by a table type. The various supported\n * table types are exposed in feature libraries.\n *\n * If there is no table configuration for the given type found, a table header structure\n * is generated based on the actual data or randomly (in case no data is passed in) by\n * generating 5 headers. In case of a generated header, we warn the developer in devMode that\n * there is no configuration available.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TableService {\n  constructor(\n    protected breakpointService: BreakpointService,\n    protected config: TableConfig\n  ) {}\n\n  /**\n   * Builds the table structure. The table structure can be created by the help of\n   * the `tableType`. The `tableType` can be used in the configuration `TableConfig`,\n   * so that the table headers can be defined.\n   */\n  buildStructure(\n    tableType: string,\n    data$?: Observable<any>\n  ): Observable<TableStructure> {\n    if (this.hasTableConfig(tableType)) {\n      return this.buildStructureFromConfig(tableType);\n    } else {\n      if (data$) {\n        return this.buildStructureFromData(tableType, data$);\n      } else {\n        return this.buildRandomStructure(tableType);\n      }\n    }\n  }\n\n  /**\n   * Returns the table structure by configuration. The configuration can be\n   * breakpoint-driven, which means that an alternative header structure can\n   * be created per screen size.\n   *\n   * The breakpoint is resolved by teh `BreakpointService`.\n   */\n  protected buildStructureFromConfig(type: string): Observable<TableStructure> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => ({ ...this.getTableConfig(type, breakpoint), type }))\n    );\n  }\n\n  /**\n   * This method generates a table structure by the help of the first data row.\n   */\n  protected buildStructureFromData(\n    type: string,\n    data$: Observable<any>\n  ): Observable<TableStructure> {\n    this.warn(\n      `No table configuration found to render table with type \"${type}\". The table header for \"${type}\" is generated by the help of the first data item`\n    );\n    return data$.pipe(\n      map((data: any[]) => {\n        const headers = Object.keys(data?.[0]).map((key) => ({\n          key,\n          label: key,\n        }));\n        return {\n          type: type,\n          headers,\n        } as TableStructure;\n      })\n    );\n  }\n\n  /**\n   * As a last resort, the table structure is randomly created. We add 5 unknown headers\n   * and use the `hideHeader` to avoid the unknown headers to be rendered.\n   */\n  protected buildRandomStructure(type: string): Observable<TableStructure> {\n    this.warn(\n      `No data available for \"${type}\", a random structure is generated (with hidden table headers).`\n    );\n\n    return of({\n      type,\n      headers: [\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n      ],\n      hideHeader: true,\n    });\n  }\n\n  /**\n   * Finds the best applicable table configuration for the given type\n   * and breakpoint. If there is no configuration available for the breakpoint,\n   * the best match will be returned, using mobile first approach.\n   *\n   * If there is no match for any breakpoint, the fallback is a configuration\n   * without the notion of a breakpoint. Otherwise we fallback to the first\n   * available config.\n   */\n  protected getTableConfig(\n    type: string,\n    breakpoint: BREAKPOINT\n  ): TableStructureConfiguration {\n    const tableConfig = this.config.table[type];\n\n    // find all relevant breakpoints\n    const current = this.breakpointService.breakpoints.indexOf(breakpoint);\n    const relevant = this.breakpointService.breakpoints\n      .slice(0, current + 1)\n      .reverse();\n\n    const bestMatch: BREAKPOINT = relevant.find(\n      (br) => !!tableConfig.find((structure) => structure.breakpoint === br)\n    );\n\n    return bestMatch\n      ? tableConfig.find((config) => config.breakpoint === bestMatch)\n      : tableConfig.find((structure) => !structure.breakpoint) ||\n          tableConfig[0];\n  }\n\n  protected hasTableConfig(tableType: string): boolean {\n    return !!this.config.table?.[tableType];\n  }\n\n  /**\n   * Prints a convenient message in the console to increase developer experience.\n   */\n  private warn(message) {\n    if (isDevMode) {\n      console.warn(message);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import {\n  Compiler,\n  Injectable,\n  InjectFlags,\n  Injector,\n  NgModuleFactory,\n  NgModuleRef,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CMSComponentConfig,\n  CmsComponentMapping,\n  CmsConfig,\n  ConfigChunk,\n  ConfigInitializerService,\n  configurationFactory,\n  DefaultConfigChunk,\n  FeatureModuleConfig,\n} from '@spartacus/core';\nimport {\n  combineLatest,\n  defer,\n  forkJoin,\n  from,\n  merge,\n  Observable,\n  of,\n  queueScheduler,\n} from 'rxjs';\nimport {\n  map,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\ninterface FeatureInstance extends FeatureModuleConfig {\n  moduleRef?: NgModuleRef<any>;\n  depsModules?: any[];\n  componentsMappings?: CMSComponentConfig;\n}\n\n/**\n * Service responsible for resolving cms config based feature modules.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureModulesService implements OnDestroy {\n  // feature modules configuration\n  private featureModulesConfig?: {\n    [featureName: string]: FeatureModuleConfig;\n  };\n\n  // maps componentType to feature\n  private componentFeatureMap: Map<string, string> = new Map();\n\n  /*\n   * Contains either FeatureInstance or FeatureInstance resolver for not yet\n   * resolved feature modules\n   */\n  private features: Map<string, Observable<FeatureInstance>> = new Map();\n\n  private dependencyModules = new Map<any, NgModuleRef<any>>();\n\n  constructor(\n    protected configInitializer: ConfigInitializerService,\n    protected compiler: Compiler,\n    protected injector: Injector\n  ) {\n    this.initFeatureMap();\n  }\n\n  private async initFeatureMap(): Promise<void> {\n    const config: CmsConfig = await this.configInitializer.getStableConfig(\n      'featureModules'\n    );\n\n    this.featureModulesConfig = config.featureModules ?? {};\n\n    for (const [featureName, featureConfig] of Object.entries(\n      this.featureModulesConfig\n    )) {\n      if (featureConfig?.cmsComponents?.length) {\n        for (const component of featureConfig.cmsComponents) {\n          this.componentFeatureMap.set(component, featureName);\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if there is feature module configuration that covers specified\n   * component type\n   */\n  hasFeatureFor(componentType: string): boolean {\n    return this.componentFeatureMap.has(componentType);\n  }\n\n  /**\n   * Return full CmsComponent mapping defined in feature module\n   */\n  getCmsMapping(componentType: string): Observable<CmsComponentMapping> {\n    const feature = this.componentFeatureMap.get(componentType);\n\n    return this.resolveFeature(feature).pipe(\n      map(\n        (featureInstance) => featureInstance.componentsMappings[componentType]\n      )\n    );\n  }\n\n  /**\n   * Get all injectors for feature and its dependencies\n   *\n   * As it's a synchronous method, it works only for already resolved features,\n   * returning undefined otherwise\n   */\n  getInjectors(componentType: string): Injector[] | undefined {\n    const feature = this.componentFeatureMap.get(componentType);\n    let injectors;\n\n    // we are returning injectors only for already resolved features\n    this.features\n      .get(feature)\n      ?.subscribe((featureInstance) => {\n        injectors = [\n          // feature module injector\n          featureInstance.moduleRef.injector,\n          // injectors from dependency modules\n          ...featureInstance.depsModules.map(\n            (module) => this.dependencyModules.get(module).injector\n          ),\n        ];\n      })\n      .unsubscribe();\n    return injectors;\n  }\n\n  /**\n   * Resolve feature based on feature name, if feature was not yet resolved\n   *\n   * It will first resolve all module dependencies if defined\n   */\n  private resolveFeature(featureName: string): Observable<FeatureInstance> {\n    return defer(() => {\n      if (!this.features.has(featureName)) {\n        const featureConfig = this.featureModulesConfig[featureName];\n\n        if (!featureConfig?.module) {\n          throw new Error(\n            'No module defined for Feature Module ' + featureName\n          );\n        }\n\n        // resolve dependencies first (if any)\n        const depsResolve = featureConfig.dependencies?.length\n          ? forkJoin(\n              featureConfig.dependencies.map((depModuleFunc) =>\n                this.resolveDependencyModule(depModuleFunc)\n              )\n            )\n          : of(undefined);\n\n        this.features.set(\n          featureName,\n          depsResolve.pipe(\n            switchMap((deps) => this.resolveFeatureModule(featureConfig, deps)),\n            shareReplay()\n          )\n        );\n      }\n\n      return this.features.get(featureName);\n    });\n  }\n\n  /**\n   * Initialize feature module by returning feature instance\n   */\n  private resolveFeatureModule(\n    featureConfig: FeatureModuleConfig,\n    depsModules: any[] = []\n  ): Observable<FeatureInstance> {\n    return this.resolveModuleFactory(featureConfig?.module).pipe(\n      map(([moduleFactory]) => {\n        const moduleRef = moduleFactory.create(this.injector);\n\n        const featureInstance: FeatureInstance = {\n          ...featureConfig,\n          moduleRef,\n          depsModules,\n          componentsMappings: {},\n        };\n\n        // resolve configuration for feature module\n        const resolvedConfiguration = this.resolveFeatureConfiguration(\n          moduleRef.injector\n        );\n\n        // extract cms components configuration from feature config\n        for (const componentType of featureInstance.cmsComponents) {\n          featureInstance.componentsMappings[componentType] =\n            resolvedConfiguration.cmsComponents[componentType];\n        }\n        return featureInstance;\n      })\n    );\n  }\n\n  /**\n   * Returns configuration provided in feature module\n   */\n  private resolveFeatureConfiguration(featureInjector: Injector): CmsConfig {\n    // get config chunks from feature lib\n    const featureConfigChunks = featureInjector.get<any[]>(\n      ConfigChunk,\n      [],\n      InjectFlags.Self\n    );\n    // get default config chunks from feature lib\n    const featureDefaultConfigChunks = featureInjector.get<any[]>(\n      DefaultConfigChunk,\n      [],\n      InjectFlags.Self\n    );\n\n    return configurationFactory(\n      featureConfigChunks,\n      featureDefaultConfigChunks\n    ) as CmsConfig;\n  }\n\n  /**\n   * Resolves dependency module and initializes single module instance\n   */\n  private resolveDependencyModule(\n    moduleFunc: () => Promise<any>\n  ): Observable<any> {\n    // We grab moduleFactory symbol from module function and if there is no\n    // such a module created yet, we create it and store it in a\n    // dependencyModules map\n    return this.resolveModuleFactory(moduleFunc).pipe(\n      tap(([moduleFactory, module]) => {\n        if (!this.dependencyModules.has(module)) {\n          const moduleRef = moduleFactory.create(this.injector);\n          this.dependencyModules.set(module, moduleRef);\n        }\n      }),\n      pluck(1)\n    );\n  }\n\n  /**\n   * Resolve any Angular module from an function that return module or moduleFactory\n   */\n  private resolveModuleFactory(\n    moduleFunc: () => Promise<any>\n  ): Observable<[NgModuleFactory<any>, any]> {\n    return from(moduleFunc()).pipe(\n      switchMap((module) =>\n        module instanceof NgModuleFactory\n          ? (of([module, module]) as Observable<[NgModuleFactory<any>, any]>)\n          : combineLatest([\n              // using compiler here is for jit compatibility, there is no overhead\n              // for aot production builds as it will be stubbed\n              from(this.compiler.compileModuleAsync(module as any)),\n              of(module),\n            ])\n      ),\n      observeOn(queueScheduler)\n    );\n  }\n\n  ngOnDestroy(): void {\n    // clean up all initialized features\n    merge(...Array.from(this.features.values())).subscribe((featureInstance) =>\n      featureInstance.moduleRef?.destroy()\n    );\n\n    // clean up all initialized dependency modules\n    this.dependencyModules.forEach((dependency) => dependency.destroy());\n  }\n}\n","import { Inject, Injectable, Injector, PLATFORM_ID } from '@angular/core';\nimport {\n  CmsComponentMapping,\n  CmsConfig,\n  deepMerge,\n  DeferLoadingStrategy,\n} from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\nimport { defer, forkJoin, Observable, of } from 'rxjs';\nimport { mapTo, share, tap } from 'rxjs/operators';\nimport { FeatureModulesService } from './feature-modules.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentsService {\n  private missingComponents: string[] = [];\n  private mappings: { [componentType: string]: CmsComponentMapping } = {};\n\n  // contains\n  private mappingResolvers: Map<\n    string,\n    Observable<CmsComponentMapping>\n  > = new Map();\n\n  /**\n   * @deprecated since 2.1\n   * constructor(config: CmsConfig, platformId: Object);\n   */\n  constructor(\n    protected config: CmsConfig,\n    @Inject(PLATFORM_ID) protected platformId: Object,\n    protected featureModules?: FeatureModulesService\n  ) {}\n\n  /**\n   * Should be called to make sure all component mappings are determined,\n   * especially lazy loaded ones.\n   *\n   * It's recommended way to make sure all other methods of CmsComponentService\n   * will be able to work synchronously for asked component types and avoid risk\n   * of potential errors that could be thrown otherwise.\n   */\n  determineMappings(componentTypes: string[]): Observable<string[]> {\n    return defer(() => {\n      // we use defer, to be sure the logic below used to compose final observable\n      // will be executed at subscription time (with up to date state at the time,\n      // when it will be needed)\n      const featureResolvers = [];\n\n      for (const componentType of componentTypes) {\n        if (!this.mappings[componentType]) {\n          const staticConfig = this.config.cmsComponents[componentType];\n\n          // check if this component type is managed by feature module\n          if (this.featureModules.hasFeatureFor(componentType)) {\n            featureResolvers.push(\n              // we delegate populating this.mappings to feature resolver\n              this.getFeatureMappingResolver(componentType, staticConfig)\n            );\n          } else {\n            // simply use only static config\n            this.mappings[componentType] = staticConfig;\n          }\n        }\n      }\n\n      if (featureResolvers.length) {\n        return forkJoin(featureResolvers).pipe(mapTo(componentTypes));\n      } else {\n        return of(componentTypes);\n      }\n    });\n  }\n\n  private getFeatureMappingResolver(\n    componentType: string,\n    staticConfig?: CmsComponentMapping\n  ): Observable<CmsComponentMapping> {\n    if (!this.mappingResolvers.has(componentType)) {\n      const mappingResolver$ = this.featureModules\n        .getCmsMapping(componentType)\n        .pipe(\n          tap((featureComponentMapping) => {\n            // We treat cms mapping configuration from a feature as a default,\n            // that can be overridden by app/static configuration\n            this.mappings[componentType] = deepMerge(\n              {},\n              featureComponentMapping,\n              staticConfig\n            );\n            this.mappingResolvers.delete(componentType);\n          }),\n          share()\n        );\n      this.mappingResolvers.set(componentType, mappingResolver$);\n    }\n    return this.mappingResolvers.get(componentType);\n  }\n\n  getInjectors(componentType: string): Injector[] {\n    return (\n      (this.featureModules.hasFeatureFor(componentType) &&\n        this.featureModules.getInjectors(componentType)) ??\n      []\n    );\n  }\n\n  /**\n   * Return collection of component mapping configuration for specified list of\n   * component types.\n   *\n   * If component mapping can't be determined synchronously, for example, lazy\n   * loaded one, it will throw an error.\n   *\n   * To make sure component mapping is available, determineMappings()\n   * should be called and completed first.\n   */\n  getMapping(componentType: string): CmsComponentMapping {\n    const componentConfig =\n      this.mappings[componentType] ??\n      this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  /**\n   * Checks, if component should be rendered as some components\n   * could be disabled for server side renderings\n   */\n  shouldRender(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getMapping(componentType)?.disableSSR);\n  }\n\n  /**\n   * Return DeferLoadingStrategy for component type.\n   */\n  getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    return this.config.cmsComponents?.[componentType]?.deferLoading;\n  }\n\n  /**\n   * Get cms driven child routes for components\n   */\n  getChildRoutes(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        routes.push(...(this.getMapping(componentType)?.childRoutes ?? []));\n      }\n    }\n    return routes;\n  }\n\n  /**\n   * Get cms driven guards for components\n   */\n  getGuards(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getMapping(componentType)?.guards?.forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  /**\n   * Get i18n keys associated with components\n   */\n  getI18nKeys(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        this.getMapping(componentType)?.i18nKeys?.forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n}\n","import {\n  AbstractType,\n  InjectFlags,\n  InjectionToken,\n  Injector,\n  Type,\n} from '@angular/core';\n\nconst NOT_FOUND_SYMBOL = {};\n\n/**\n * CombinedInjector is able to combine more than one injector together in a way\n * that main injector is supported by complementary injectors.\n *\n * Should be used as a parent injector for components, when we want to have access\n * to both providers from component hierarchical injectors and providers from any\n * number of additional injectors (lazy loaded modules for example).\n */\nexport class CombinedInjector implements Injector {\n  /**\n   * @param mainInjector Component hierarchical injector\n   * @param complementaryInjectors Additional injector that will be taken into an account when resolving dependencies\n   */\n  constructor(\n    private mainInjector: Injector,\n    private complementaryInjectors: Injector[]\n  ) {}\n\n  get<T>(\n    token: Type<T> | InjectionToken<T> | AbstractType<T>,\n    notFoundValue?: T,\n    flags?: InjectFlags\n  ): T;\n  get(token: any, notFoundValue?: any): any;\n  get(token, notFoundValue?: any, flags?: InjectFlags): any {\n    // tslint:disable-next-line:no-bitwise\n    if (flags & InjectFlags.Self) {\n      if (notFoundValue !== undefined) {\n        return notFoundValue;\n      }\n      throw new Error(\n        \"CombinedInjector should be used as a parent injector / doesn't support self dependencies\"\n      );\n    }\n\n    for (const injector of [\n      this.mainInjector,\n      ...this.complementaryInjectors,\n    ]) {\n      // First we are resolving providers provided at Self level in all injectors,\n      // starting with main injector and going through complementary ones...\n      const service = injector.get(token, NOT_FOUND_SYMBOL, InjectFlags.Self);\n      if (service !== NOT_FOUND_SYMBOL) {\n        return service;\n      }\n    }\n    // ...and then fallback to main injector passing the flag\n    return this.mainInjector.get(token, notFoundValue, flags);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsComponentsService } from '../../../services/cms-components.service';\nimport { CombinedInjector } from '../../../../shared/utils/combined-injector';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsComponentsService.getMapping(type)?.providers ?? [];\n\n    const complementaryInjectors = this.cmsComponentsService.getInjectors(type);\n\n    if (complementaryInjectors?.length) {\n      parentInjector = new CombinedInjector(\n        parentInjector ?? this.injector,\n        complementaryInjectors\n      );\n    }\n\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Applicable {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsComponentsService } from '../../services/cms-components.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService\n  ) {}\n\n  ngOnInit() {\n    this.cmsComponentsService\n      .determineMappings([this.cxComponentWrapper.flexType])\n      .subscribe(() => {\n        if (\n          this.cmsComponentsService.shouldRender(\n            this.cxComponentWrapper.flexType\n          )\n        ) {\n          this.launchComponent();\n        }\n      });\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsComponentsService.getMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n        this.injector.get(ChangeDetectorRef).markForCheck();\n      });\n  }\n\n  private decorate(elementRef: ElementRef): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      elementRef.nativeElement,\n      this.renderer,\n      { componentData: this.cxComponentWrapper }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return typeof componentMapping.component === 'function';\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { DefaultComponentHandler } from './default-component.handler';\nimport { switchMap } from 'rxjs/operators';\nimport { ComponentHandler } from './component-handler';\n\n/**\n * Lazy component handler used for launching lazy loaded cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LazyComponentHandler implements ComponentHandler {\n  constructor(protected defaultHandler: DefaultComponentHandler) {}\n\n  /**\n   * We want to mach dynamic import signature () => import('')\n   */\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      this.isNotClass(componentMapping.component)\n    );\n  }\n\n  private isNotClass(symbol: any): boolean {\n    const signature = symbol.toString().substr(0, 20).replace(' ', '');\n    return signature.startsWith('function()') || signature.startsWith('()=>');\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return from(componentMapping.component()).pipe(\n      switchMap((component) =>\n        this.defaultHandler.launcher(\n          { ...componentMapping, component },\n          viewContainerRef,\n          elementInjector\n        )\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { LazyComponentHandler } from './handlers/lazy-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: LazyComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  isCollapsed$: Observable<boolean>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected asmService: AsmService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n    this.isCollapsed$ = this.asmService\n      .getAsmUiState()\n      .pipe(map((uiState) => uiState.collapsed));\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AsmService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm-toggle-ui',\n  templateUrl: './asm-toggle-ui.component.html',\n  styleUrls: ['./asm-toggle-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmToggleUiComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  isCollapsed: boolean;\n\n  constructor(protected asmService: AsmService) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      this.asmService.getAsmUiState().subscribe((uiState) => {\n        this.isCollapsed = uiState.collapsed;\n      })\n    );\n  }\n\n  toggleUi(): void {\n    this.asmService.updateAsmUiState({ collapsed: !this.isCollapsed });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\n\nexport const defaultAsmLayoutConfig: LayoutConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AsmModule as AsmCoreModule,\n  I18nModule,\n  provideConfig,\n} from '@spartacus/core';\nimport { FormErrorsModule } from '../../shared/index';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { AsmToggleUiComponent } from './asm-toggle-ui/asm-toggle-ui.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { defaultAsmLayoutConfig } from './default-asm-layout.config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n    AsmToggleUiComponent,\n  ],\n  providers: [provideConfig(defaultAsmLayoutConfig)],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n\n    this.cart$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getActiveCartId(),\n      this.customerCouponService.getCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      ),\n    ]).pipe(\n      tap(\n        ([cart, activeCardId, customerCoupons]: [\n          Cart,\n          string,\n          CustomerCouponSearchResult\n        ]) => {\n          this.cartId = activeCardId;\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n        }\n      ),\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n    );\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n  selectiveCartEnabled: boolean;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.selectiveCartEnabled = this.selectiveCartService.isEnabled();\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartEnabled\n        ? this.selectiveCartService.getLoaded()\n        : of(false),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn && this.selectiveCartEnabled\n          ? cartLoaded && sflLoaded\n          : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, Cart, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.isEnabled()\n          ? this.selectiveCartService.getCart()\n          : of({} as Cart),\n        this.activeCartService.getLoading(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart, loadingCart]) => {\n          const exclude = (arr, args) =>\n            arr.filter((item) => args.every((arg) => arg !== item));\n          return Object.keys(cart).length === 0 && loadingCart\n            ? exclude(slots, [\n                'TopContent',\n                'CenterRightContentSlot',\n                'EmptyCartMiddleContent',\n              ])\n            : cart.totalItems\n            ? exclude(slots, ['EmptyCartMiddleContent'])\n            : selectiveCart.totalItems\n            ? exclude(slots, [\n                'EmptyCartMiddleContent',\n                'CenterRightContentSlot',\n              ])\n            : exclude(slots, ['TopContent', 'CenterRightContentSlot']);\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { SaveForLaterComponent } from './save-for-later.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          if (code !== this.currentDeliveryModeId) {\n            this.checkoutDeliveryService.setDeliveryMode(code);\n          }\n        }\n        this.currentDeliveryModeId = code;\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.checkoutDeliveryService.setDeliveryMode(code);\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n  protected checkoutStepUrlNext: string;\n  protected checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.routingService.go(this.checkoutStepUrlNext);\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CheckoutService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm: FormGroup = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  ErrorModel,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  addresses$: Observable<Address[]>;\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField = true;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries: Country[]) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles: Title[]) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions: Region[]) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(\n              (error: ErrorModel) => error.subject === 'titleCode'\n            )\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n\n    this.addresses$ = this.userAddressService.getAddresses();\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take, filter } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    this.selectedAddress$\n      .pipe(\n        filter((selected) => !!selected?.shippingAddress),\n        take(1)\n      )\n      .subscribe(() => this.goNext());\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { Direction } from './direction.model';\n\n/**\n * The direction config provides an easy way to configure \"ltr\" versus \"rtl\" direction\n * for the storefront. The direction can be configured to detect the direction by language.\n *\n * The following configuration detects rtl languages by isoCode for Arabic and Hebrew:\n *\n * ```typescript\n * direction: {\n *   detect: true,\n *   default: DirectionMode.LTR,\n *   rtlLanguages: ['ar', 'he']\n * }\n * ```\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class DirectionConfig {\n  direction?: Direction;\n}\n","import { DirectionConfig } from './direction.config';\nimport { DirectionMode } from './direction.model';\n\nexport const defaultDirectionConfig: DirectionConfig = {\n  direction: {\n    detect: true,\n    default: DirectionMode.LTR,\n    // we're not polluting the system with all defaults for ltr, but add 2 common used\n    // languages (hebrew and arabic) to easily demo directionality\n    // see https://meta.wikimedia.org/wiki/Template:List_of_language_names_ordered_by_code\n    rtlLanguages: ['he', 'ar'],\n  },\n};\n","import { Injectable, OnDestroy } from '@angular/core';\nimport {\n  ConfigInitializerService,\n  LanguageService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { DirectionConfig } from './config/direction.config';\nimport { Direction, DirectionMode } from './config/direction.model';\n\n/**\n * The `DirectionService` can be used to add the direction to the overall storefront or individual elements.\n * By default, the direction is added to the `html` element (i.e. `<html dir=\"ltr\">`). The API of this service\n * does however provide methods to add direction to individual elements if needed.\n *\n * The direction is configurable and allows for language driven direction configuration.\n *\n * To react to the active language, the service subscribes to the active language in the initialize method. This\n * is called from an APP_INITIALIZER method and should only happen once.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DirectionService implements OnDestroy {\n  protected config: Direction;\n  protected startsDetecting = false;\n\n  protected subscription = new Subscription();\n\n  constructor(\n    protected configInit: ConfigInitializerService,\n    protected languageService: LanguageService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Initializes the layout direction for the storefront.\n   */\n  initialize(): Promise<void> {\n    return this.configInit\n      .getStableConfig('direction')\n      .then((config: DirectionConfig) => {\n        this.config = config?.direction;\n        if (this.config?.detect) {\n          this.detect();\n        } else {\n          this.setDirection(\n            this.winRef.document.documentElement,\n            this.config?.default\n          );\n        }\n      });\n  }\n\n  /**\n   * Observes the _active_ language and set the required direction for the given language.\n   * The method is guarded to ensure that the active language is observed only once.\n   */\n  protected detect() {\n    if (this.startsDetecting) {\n      return;\n    }\n    this.subscription.add(\n      this.languageService\n        .getActive()\n        .subscribe((isoCode: string) =>\n          this.setDirection(\n            this.winRef.document.documentElement,\n            this.getDirection(isoCode)\n          )\n        )\n    );\n    this.startsDetecting = true;\n  }\n\n  /**\n   * Sets the direction attribute for the given element. If the direction is undefined, the `dir`\n   * attribute is removed.\n   */\n  setDirection(el: HTMLElement, direction: DirectionMode): void {\n    if (direction) {\n      el.setAttribute('dir', direction);\n    } else {\n      el.removeAttribute('dir');\n    }\n  }\n\n  /**\n   * Gets the `DirectionMode` for the given language isoCode. The language isoCode is compared\n   * to the configured list of languages(`direction.rtlLanguages` vs `direction.ltrLanguages`).\n   *\n   * If no language is given, or no language mapping could be found, we fallback to the default\n   * `direction.mode`.\n   */\n  getDirection(language?: string): DirectionMode {\n    if (language && this.config?.rtlLanguages?.includes(language)) {\n      return DirectionMode.RTL;\n    }\n    if (language && this.config?.ltrLanguages?.includes(language)) {\n      return DirectionMode.LTR;\n    }\n    return this.config?.default;\n  }\n\n  ngOnDestroy(): void {\n    // Cleans up the subscription, to avoid memory leaks in SSR.\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { FeatureConfigService, provideDefaultConfig } from '@spartacus/core';\nimport { defaultDirectionConfig } from './config/default-direction.config';\nimport { DirectionService } from './direction.service';\n\nexport function initHtmlDirAttribute(\n  directionService: DirectionService,\n  featureConfigService: FeatureConfigService\n) {\n  const result = () => {\n    if (featureConfigService.isLevel('2.1')) {\n      return directionService.initialize();\n    }\n  };\n  return result;\n}\n\n/**\n * Provides a configuration and APP_INITIALIZER to add the correct (language drive) html direction.\n */\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: initHtmlDirAttribute,\n      deps: [DirectionService, FeatureConfigService],\n    },\n    provideDefaultConfig(defaultDirectionConfig),\n  ],\n})\nexport class DirectionModule {}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { DirectionModule } from './direction/direction.module';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot(), DirectionModule],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nimport { CmsComponentsService } from '../../services/cms-components.service';\n\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position represents the unique key for a page slot on a single page, but can\n   * be reused cross pages.\n   *\n   * The position is used to find the CMS components for the page slot. It is also\n   * added as an additional CSS class so that layoutt can be applied.\n   */\n  @Input() set position(value: string) {\n    this.position$.next(value);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  /**\n   * Maintains css classes introduced by the host and adds additional classes.\n   */\n  @Input() @HostBinding() class: string;\n\n  /**\n   * Indicates that the page slot is the last page slot above the fold.\n   */\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  /**\n   * Indicates that the components of the page slot haven't been loaded as long\n   * as the isPending state is true.\n   */\n  @HostBinding('class.cx-pending') isPending = true;\n\n  /**\n   * Indicates that the page slot doesn't contain any components. This is no\n   * longer used in spartacus, but kept for backwards compatibility.\n   */\n  @HostBinding('class.has-components') @Input() hasComponents = false;\n\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  components: ContentSlotComponentData[];\n\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    distinctUntilChanged(this.isDistinct)\n  );\n\n  /** Observes the components for the given page slot. */\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\n    map((slot) => slot?.components ?? [])\n  );\n\n  protected subscription: Subscription = new Subscription();\n\n  /** Keeps track of the pending components that must be loaded for the page slot */\n  private pendingComponentCount = 0;\n\n  /** Tracks the last used position, in case the page slot is used dynamically */\n  private lastPosition: string;\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\n        this.components = value?.components || [];\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  protected decorate(slot: ContentSlotData): void {\n    let cls = this.class || '';\n\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\n      cls = cls.replace(this.lastPosition, '');\n    }\n    if (this.position$.value) {\n      cls += ` ${this.position$.value}`;\n      this.lastPosition = this.position$.value;\n    }\n\n    // host bindings\n    this.pending = slot?.components?.length || 0;\n    this.hasComponents = slot?.components?.length > 0;\n    if (cls && cls !== this.class) {\n      this.class = cls;\n    }\n\n    this.addSmartEditSlotClass(slot);\n  }\n\n  /**\n   * Sets the pending count for the page slot components. Once all pending components are\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\n   */\n  protected set pending(count: number) {\n    this.pendingComponentCount = count;\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  protected get pending(): number {\n    return this.pendingComponentCount;\n  }\n\n  /*\n   * Is triggered when a component is added to the view. This is used to\n   * update the pending count\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pending--;\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether the component should be\n   * rendered instantly or whether it should be deferred.\n   */\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(\n      componentType\n    );\n    return { deferLoading };\n  }\n\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\n    return (\n      current.components &&\n      old.components?.length === current.components.length &&\n      !old.components.find(\n        (el, index) => el.uid !== current.components[index].uid\n      )\n    );\n  }\n\n  private addSmartEditSlotClass(slot: ContentSlotData): void {\n    if (slot) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.elementRef.nativeElement,\n        this.renderer,\n        { slotData: slot }\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { ComponentRef, Injectable, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n/**\n * Service that adds the page template as a className to the application root element. If the root\n * element is cx-storefront, the resulting DOM would look like:\n *\n * ```html\n * <cx-storefront class=\"LandingPageTemplate\">\n *  [...]\n * <cx-storefront>\n * ```\n */\n@Injectable({ providedIn: 'root' })\nexport class PageTemplateStyleService implements OnDestroy {\n  /**\n   * Keeps the subscriptions for this service so that we can unsubscribe on destroy.\n   */\n  protected subscription = new Subscription();\n\n  /**\n   * Holds the current page template, so we can remove previous page templates from the element classList.\n   */\n  protected currentTemplate: string;\n\n  constructor(protected pageLayoutService: PageLayoutService) {}\n\n  initialize(ref: ComponentRef<any>): void {\n    const el: HTMLElement = ref.location.nativeElement;\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(distinctUntilChanged())\n        .subscribe((template) => this.addStyleClass(el, template))\n    );\n  }\n\n  /**\n   * Adds the page template as a style class to the given element. If any page template\n   * was added before, we clean it up.\n   */\n  protected addStyleClass(el: HTMLElement, template: string): void {\n    // clean up previous template class binding\n    if (this.currentTemplate) {\n      el.classList?.remove(this.currentTemplate);\n    }\n    if (template) {\n      this.currentTemplate = template;\n      el.classList.add(this.currentTemplate);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_BOOTSTRAP_LISTENER, ComponentRef, NgModule } from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageTemplateStyleService } from './page-template-style.service';\n\nexport function initPageTemplateStyle(\n  service: PageTemplateStyleService,\n  featureConfigService: FeatureConfigService\n) {\n  const result = (componentRef: ComponentRef<any>) => {\n    if (featureConfigService.isLevel('2.1')) {\n      service.initialize(componentRef);\n    }\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  exports: [PageLayoutComponent],\n\n  providers: [\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      multi: true,\n      useFactory: initPageTemplateStyle,\n      deps: [PageTemplateStyleService, FeatureConfigService],\n    },\n  ],\n})\nexport class PageLayoutModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddToHomeScreenService {\n  protected deferredEvent: any;\n\n  protected canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    protected config: PWAModuleConfig,\n    protected globalMessageService: GlobalMessageService,\n    protected winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService implements OnDestroy {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  private subscription: Subscription;\n\n  init() {\n    this.subscription = this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory implements OnDestroy {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  private subscription: Subscription;\n\n  build() {\n    this.subscription = this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsDialogModule } from '../../shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsDialogModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsComponentsService.getGuards(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected translation: TranslationService,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsComponentsService.getI18nKeys(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsComponentsService } from './cms-components.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(\n    private router: Router,\n    private cmsComponentsService: CmsComponentsService\n  ) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsComponentsService.getChildRoutes(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsComponentsService } from '../services/cms-components.service';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    protected cmsService: CmsService,\n    protected cmsRoutes: CmsRoutesService,\n    protected cmsI18n: CmsI18nService,\n    protected cmsGuards: CmsGuardsService,\n    protected cmsComponentsService: CmsComponentsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsComponentsService.determineMappings(componentTypes)\n      ),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, take, switchMap } from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    winRef?: WindowRef,\n    // tslint:disable-next-line:unified-signatures\n    breakpointService?: BreakpointService\n  );\n  /**\n   * @deprecated since 2.1\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    winRef?: WindowRef\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    protected cmsService: CmsService,\n    protected winRef?: WindowRef,\n    protected breakpointService?: BreakpointService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilChanged((x, y) => x?.components === y?.components),\n    switchMap((data) =>\n      combineLatest(\n        (data?.components ?? '').split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab) {\n                return undefined;\n              }\n\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number, event?: MouseEvent): void {\n    this.breakpointService\n      ?.isDown(BREAKPOINT.sm)\n      .pipe(take(1))\n      .subscribe((res) => {\n        if (res) {\n          this.activeTabNum = this.activeTabNum === tabNum ? -1 : tabNum;\n          if (event && event?.target) {\n            const target = event.target as HTMLElement;\n            const parentNode = target.parentNode as HTMLElement;\n            this.winRef?.nativeWindow?.scrollTo(0, parentNode.offsetTop);\n          }\n        } else {\n          this.activeTabNum = tabNum;\n        }\n      });\n  }\n\n  ngOnInit(): void {\n    this.activeTabNum =\n      this.winRef?.nativeWindow?.history?.state?.activeTab ?? this.activeTabNum;\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() amendOrderForm: FormGroup;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n\n  constructor(protected routingService: RoutingService) {}\n\n  continue(event: Event): void {\n    if (this.amendOrderForm.valid) {\n      this.routingService.go({\n        cxRoute: this.forwardRoute,\n        params: { code: this.orderCode },\n      });\n    } else {\n      this.amendOrderForm.markAllAsTouched();\n      event.stopPropagation();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantityToCancel(control: FormControl) {\n  if (!control.value) {\n    return null;\n  }\n  const quantity = Object.values(control.value).reduce(\n    (acc: number, val: number) => acc + val,\n    0\n  );\n  return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup(\n      {},\n      { validators: [ValidateQuantityToCancel] }\n    );\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  ItemCounterModule,\n  MediaModule,\n} from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup) {\n    if (form.valid) {\n      this.orderAmendService.save();\n    } else {\n      form.markAllAsTouched();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order?.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\nimport { FormErrorsModule } from '../../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm: FormGroup = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return data\n          ? {\n              title: data.name,\n              children: [nav],\n            }\n          : undefined;\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category),\n   * also taking into account content pages (contentPageLabelOrId)\n   * and product pages (productCode)\n   */\n  protected getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.contentPageLabelOrId) {\n      return item.contentPageLabelOrId;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    } else if (item.productCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'product',\n        params: {\n          code: item.productCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    const wrapper = <HTMLElement>node.querySelector('.wrapper');\n    const body = <HTMLElement>node.closest('body');\n    if (wrapper) {\n      this.renderer.removeStyle(wrapper, 'margin-left');\n      if (\n        wrapper.offsetLeft + wrapper.offsetWidth >\n        body.offsetLeft + body.offsetWidth\n      ) {\n        this.renderer.setStyle(\n          wrapper,\n          'margin-left',\n          `${node.offsetWidth - wrapper.offsetWidth}px`\n        );\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c?.displayProducts === 'true' || c?.displayProducts === true,\n            displayProductImages:\n              <any>c?.displayProductImages === 'true' ||\n              c?.displayProductImages === true,\n            displaySuggestions:\n              <any>c?.displaySuggestions === 'true' ||\n              c?.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d?.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data?.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) => {\n      this.mainMediaContainer.next(p.images?.PRIMARY ? p.images.PRIMARY : {});\n    })\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RouterState,\n  RoutingService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\nimport { ProductListRouteParams, SearchCriteria } from './product-list.model';\n\n/**\n * The `ProductListComponentService` is used to search products. The service is used\n * on the Product Listing Page, for listing products and the facet navigation.\n *\n * The service exposes the product search results based on the category and search\n * route parameters. The route parameters are used to query products by the help of\n * the `ProductSearchService`.\n */\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  /**\n   * @deprecated will be removed in version 3.0 as this is the\n   *   subscription is longer used\n   */\n  protected sub: Subscription;\n\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  /**\n   * Emits the search results for the current search query.\n   *\n   * The `searchResults$` is _not_ concerned with querying, it only observes the\n   * `productSearchService.getResults()`\n   */\n  protected searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  /**\n   * Observes the route and performs a search on each route change.\n   *\n   * Context changes, such as language and currencies are also taken\n   * into account, so that the search is performed again.\n   */\n  protected searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    ...this.siteContext,\n  ]).pipe(\n    map(([routerState, ..._context]) => (routerState as RouterState).state),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream is used for the Product Listing and Product Facets.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  /**\n   * Expose the `SearchCriteria`. The search criteria are driven by the route parameters.\n   *\n   * This search route configuration is not yet configurable\n   * (see https://github.com/SAP/spartacus/issues/7191).\n   */\n  protected getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  /**\n   * Resolves the search query from the given `ProductListRouteParams`.\n   */\n  protected getQueryFromRouteParams({\n    query,\n    categoryCode,\n    brandCode,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n\n    // TODO: drop support for brands as they should be treated\n    // similarly as any category.\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  /**\n   * Performs a search based on the given search criteria.\n   *\n   * The search is delegated to the `ProductSearchService`.\n   */\n  protected search(criteria: SearchCriteria): void {\n    const currentPage = criteria.currentPage;\n    const pageSize = criteria.pageSize;\n    const sortCode = criteria.sortCode;\n\n    this.productSearchService.search(\n      criteria.query,\n      // TODO: consider dropping this complex passing of cleaned object\n      Object.assign(\n        {},\n        currentPage && { currentPage },\n        pageSize && { pageSize },\n        sortCode && { sortCode }\n      )\n    );\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  /**\n   * Sort the search results by the given sort code.\n   */\n  sort(sortCode: string): void {\n    this.route({ sortCode });\n  }\n\n  /**\n   * Routes to the next product listing page, using the given `queryParams`. The\n   * `queryParams` support sorting, pagination and querying.\n   *\n   * The `queryParams` are delegated to the Angular router `NavigationExtras`.\n   */\n  protected route(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n\n  /**\n   * The site context is used to update the search query in case of a\n   * changing context. The context will typically influence the search data.\n   *\n   * We keep this private for now, as we're likely refactoring this in the next\n   * major version.\n   */\n  private get siteContext(): Observable<string>[] {\n    // TODO: we should refactor this so that custom context will be taken\n    // into account automatically. Ideally, we drop the specific context\n    // from the constructor, and query a ContextService for all contexts.\n\n    return [this.languageService.getActive(), this.currencyService.getActive()];\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  setQuery(query: string): void {\n    this.route({ query, currentPage: undefined });\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  viewPage(pageNumber: number): void {\n    this.route({ currentPage: pageNumber });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      (breadcrumb.facetValueCode === params.categoryCode ||\n        breadcrumb.facetValueCode === params.brandCode)\n    );\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    const topFacets =\n      facet.topValueCount > 0 ? facet.topValueCount : facet.values?.length || 0;\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: topFacets,\n          maxVisible: topFacets,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string): { [key: string]: string } {\n    return {\n      // to avoid encoding issues with facets that have space (' ') in their name,\n      // we replace the decoded '+' back to empty space ' '.\n      // For more, see https://github.com/SAP/spartacus/issues/7348\n      query: new HttpUrlEncodingCodec().decodeValue(query).replace(/\\+/g, ' '),\n    };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given _active_ facet when there\n   * the original facets is not available. This happens for non multi-valued facets.\n   *\n   * With this approach, the we keep the focus, either at the facet list or on the\n   * active facets.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return facetList.facets?.find((f) =>\n      f.values?.find((val) => val.name === facet.facetValueName)\n    )\n      ? ''\n      : facet.facetValueName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  private _isDialog: boolean;\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input()\n  set isDialog(value: boolean) {\n    this._isDialog = value;\n    if (value) {\n      this.renderer.addClass(document.body, 'modal-open');\n    }\n  }\n\n  get isDialog(): boolean {\n    return this._isDialog;\n  }\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  @HostListener('click') handleClick() {\n    this.close();\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef,\n    protected renderer: Renderer2\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.renderer.removeClass(document.body, 'modal-open');\n    this.closeList.emit(event);\n  }\n\n  block(event?: MouseEvent) {\n    event.stopPropagation();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n  StoreFinderConfig,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n  radius: number;\n  searchQuery: StoreFinderSearchQuery;\n  geolocation: GeoPoint;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    protected config: StoreFinderConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.radius = this.config.googleMaps.radius;\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { Params } from '@angular/router';\nimport { PageContext } from '@spartacus/core';\n\n/**\n * Indicates that a user visited an arbitrary page.\n */\nexport class PageEvent {\n  context: PageContext;\n  semanticRoute?: string;\n  url: string;\n  params: Params;\n}\n\n/**\n * Indicates that a user visited the home page.\n */\nexport class HomePageEvent extends PageEvent {}\n","import { PageEvent } from '../page/page.events';\n\n/**\n * Indicates that a user visited a cart page.\n */\nexport class CartPageEvent extends PageEvent {}\n","import { Injectable } from '@angular/core';\nimport { ActionsSubject } from '@ngrx/store';\nimport { createFrom, EventService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PageEvent } from '../page/page.events';\nimport { CartPageEvent } from './cart-page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageEventBuilder {\n  constructor(\n    protected actions: ActionsSubject,\n    protected eventService: EventService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(CartPageEvent, this.buildCartPageEvent());\n  }\n\n  protected buildCartPageEvent(): Observable<CartPageEvent> {\n    return this.eventService.get(PageEvent).pipe(\n      filter((pageEvent) => pageEvent.semanticRoute === 'cart'),\n      map((pageEvent) => createFrom(CartPageEvent, pageEvent))\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartPageEventBuilder } from './cart-page-event.builder';\n\n@NgModule({})\nexport class CartPageEventModule {\n  constructor(_cartPageEventBuilder: CartPageEventBuilder) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { RouterNavigatedAction, ROUTER_NAVIGATED } from '@ngrx/router-store';\nimport { ActionsSubject } from '@ngrx/store';\nimport {\n  ActivatedRouterStateSnapshot,\n  createFrom,\n  EventService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { HomePageEvent, PageEvent } from './page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageEventBuilder {\n  constructor(\n    protected actions: ActionsSubject,\n    protected eventService: EventService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(PageEvent, this.buildPageEvent());\n    this.eventService.register(HomePageEvent, this.buildHomePageEvent());\n  }\n\n  protected buildPageEvent(): Observable<PageEvent> {\n    return this.getNavigatedEvent().pipe(\n      map((state) =>\n        createFrom(PageEvent, {\n          context: state.context,\n          semanticRoute: state.semanticRoute,\n          url: state.url,\n          params: state.params,\n        })\n      )\n    );\n  }\n\n  protected buildHomePageEvent(): Observable<HomePageEvent> {\n    return this.buildPageEvent().pipe(\n      filter((pageEvent) => pageEvent.semanticRoute === 'home'),\n      map((pageEvent) => createFrom(HomePageEvent, pageEvent))\n    );\n  }\n\n  private getNavigatedEvent(): Observable<ActivatedRouterStateSnapshot> {\n    return this.actions.pipe(\n      ofType<RouterNavigatedAction<ActivatedRouterStateSnapshot>>(\n        ROUTER_NAVIGATED\n      ),\n      map((event) => event.payload.routerState)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageEventBuilder } from './page-event.builder';\n\n@NgModule({})\nexport class PageEventModule {\n  constructor(_pageEventBuilder: PageEventBuilder) {}\n}\n","import { Category, Price } from '@spartacus/core';\nimport { PageEvent } from '../page/page.events';\n\n/**\n * Indicates that a user visited a product details page.\n */\nexport class ProductDetailsPageEvent extends PageEvent {\n  categories?: Category[];\n  code?: string;\n  name?: string;\n  price?: Price;\n}\n\n/**\n * Indicates that a user visited a category page.\n */\nexport class CategoryPageResultsEvent extends PageEvent {\n  categoryCode: string;\n  categoryName?: string;\n  numberOfResults: Number;\n}\n\n/**\n * Indicates that the a user visited the search results page,\n * and that the search results have been retrieved.\n */\nexport class SearchPageResultsEvent extends PageEvent {\n  searchTerm: string;\n  numberOfResults: Number;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  createFrom,\n  EventService,\n  ProductSearchService,\n  ProductService,\n} from '@spartacus/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { filter, map, skip, switchMap, take } from 'rxjs/operators';\nimport { PageEvent } from '../page/page.events';\nimport {\n  CategoryPageResultsEvent,\n  ProductDetailsPageEvent,\n  SearchPageResultsEvent,\n} from './product-page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageEventBuilder {\n  constructor(\n    protected eventService: EventService,\n    protected productService: ProductService,\n    protected productSearchService: ProductSearchService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(\n      SearchPageResultsEvent,\n      this.buildSearchPageResultsEvent()\n    );\n    this.eventService.register(\n      ProductDetailsPageEvent,\n      this.buildProductDetailsPageEvent()\n    );\n    this.eventService.register(\n      CategoryPageResultsEvent,\n      this.buildCategoryResultsPageEvent()\n    );\n  }\n\n  protected buildProductDetailsPageEvent(): Observable<\n    ProductDetailsPageEvent\n  > {\n    return this.eventService.get(PageEvent).pipe(\n      filter((pageEvent) => pageEvent.semanticRoute === 'product'),\n      switchMap((pageEvent) =>\n        this.productService.get(pageEvent.context.id).pipe(\n          filter((product) => Boolean(product)),\n          take(1),\n          map((product) =>\n            createFrom(ProductDetailsPageEvent, {\n              ...pageEvent,\n              categories: product.categories,\n              code: product.code,\n              name: product.name,\n              price: product.price,\n            })\n          )\n        )\n      )\n    );\n  }\n\n  protected buildCategoryResultsPageEvent(): Observable<\n    CategoryPageResultsEvent\n  > {\n    const searchResults$ = this.productSearchService.getResults().pipe(\n      // skipping the initial value, and preventing emission of the previous search state\n      skip(1)\n    );\n\n    return this.eventService.get(PageEvent).pipe(\n      switchMap((pageEvent) => {\n        if (pageEvent?.semanticRoute !== 'category') {\n          return EMPTY;\n        }\n\n        return searchResults$.pipe(\n          map((searchResults) => ({\n            ...pageEvent,\n            ...{\n              categoryCode: pageEvent?.context?.id,\n              numberOfResults: searchResults?.pagination?.totalResults,\n              categoryName: searchResults.breadcrumbs?.[0].facetValueName,\n            },\n          })),\n          map((categoryPage) =>\n            createFrom(CategoryPageResultsEvent, categoryPage)\n          )\n        );\n      })\n    );\n  }\n\n  protected buildSearchPageResultsEvent(): Observable<SearchPageResultsEvent> {\n    const searchResults$ = this.productSearchService.getResults().pipe(\n      // skipping the initial value, and preventing emission of the previous search state\n      skip(1)\n    );\n\n    return this.eventService.get(PageEvent).pipe(\n      switchMap((pageEvent) => {\n        if (pageEvent?.semanticRoute !== 'search') {\n          return EMPTY;\n        }\n\n        return searchResults$.pipe(\n          map((searchResults) => ({\n            ...pageEvent,\n            ...{\n              searchTerm: searchResults?.freeTextSearch,\n              numberOfResults: searchResults?.pagination?.totalResults,\n            },\n          })),\n          map((searchPage) => createFrom(SearchPageResultsEvent, searchPage))\n        );\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ProductPageEventBuilder } from './product-page-event.builder';\n\n@NgModule({})\nexport class ProductPageEventModule {\n  constructor(_productPageEventBuilder: ProductPageEventBuilder) {}\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport { CartPageEventModule } from './cart/cart-page-event.module';\nimport { PageEventModule } from './page/page-event.module';\nimport { ProductPageEventModule } from './product/product-page-event.module';\n\n@NgModule({\n  imports: [CartPageEventModule, PageEventModule, ProductPageEventModule],\n})\nexport class EventsModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { EventsModule } from '../events/events.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n    EventsModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}